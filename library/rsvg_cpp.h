#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"






























#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"






















#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gbinding.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gbinding.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"





























#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"













#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

































#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"







#pragma once


















    
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    
    

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        


            
        #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    #line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





























#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"


#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
























































































































































































































#line 2366 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"


    
    
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

























#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


















#pragma once




















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"





#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\concurrencysal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\sal.h"

#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)







#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"




    
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"
    
    
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"







#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"





#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"











#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"




































#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

    

#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vadefs.h"

#pragma pack(pop)
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"














#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"









#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

    


    


#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    


        
    #line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
















    

#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
    #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    

#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
        
    #line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"





#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    
    
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"




    
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"








    


#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"




    
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    



      
    #line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
    typedef _Bool __vcrt_bool;
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



    
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



    
    typedef unsigned short wchar_t;
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    


        
    #line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    


#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"










    
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"






#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    


        




    #line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    
        
    


#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"


    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"



#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\vcruntime.h"
#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"











    

#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"




    
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





    
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









    
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"













    


        
    #line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
























#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    typedef _Bool __crt_bool;
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"










    
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



















    

#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
        
    #line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


 






  

#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
   
  #line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
 #line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"







    











        
    #line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    

#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

























 void __cdecl _invalid_parameter_noinfo(void);
 __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
 void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



















#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        


    #line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"









    






        
    #line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        
    #line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"













#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"















#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





    
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    

#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        


            
        #line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    #line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"





#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        



    #line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
        
    



#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
              
        

#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    



#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
    



#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

    
        
    



#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"



    
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"










    





















































































































































#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

        
        
        
        
        
        
        
        
        
        
        
        

    #line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"

        
        
        
        

        

            


            


            


            


            


            


            


            


            



            



            


            


            


            


            


            


            


            


            


            


            



            



            



            


            



            




            

            




            

            




            

            




            

            




            

            




            

            




            

            




            

        











































#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
    #line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"
#line 2007 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt.h"




#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"


















     int* __cdecl _errno(void);
    

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"




    


        
    #line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"


#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"

 extern unsigned long  __cdecl __threadid(void);

 extern uintptr_t __cdecl __threadhandle(void);




#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stddef.h"
#line 39 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"













#line 53 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"














#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


#line 73 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
#line 74 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
















#line 91 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"






#line 98 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


#line 101 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 107 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"




#line 112 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 116 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 120 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"




#line 126 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


#line 129 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
















#line 146 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"







#line 154 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 158 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 160 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"




#line 165 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 167 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"







#line 175 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"














#line 190 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 194 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 196 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 200 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 202 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"









#line 212 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


#line 215 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
#line 216 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"




#line 221 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


#line 224 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"











#line 236 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 238 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"




#line 243 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 245 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"




#line 250 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 252 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 256 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"








#line 265 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
















#line 282 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 286 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


































#line 321 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

























#line 347 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
#line 348 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"







#line 356 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
#line 357 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"





















#line 379 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"


#line 382 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 386 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 390 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 394 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 398 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 402 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 406 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"



#line 410 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"















#line 426 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"










































#line 469 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"

#line 471 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmacros.h"
#line 15 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"







#pragma once














    
    



#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"


    
        
    

#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"


    
        
    #line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\limits.h"




#line 17 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"








#pragma once










    


        


            
        #line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
    #line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"



















    






        
    #line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
























































































































































#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"

    

#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"











 unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );

#pragma warning(pop)


 void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


 errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


 unsigned int __cdecl _statusfp(void);


 void __cdecl _fpreset(void);















 unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );












 
 int* __cdecl __fpecode(void);



 
 int __cdecl __fpe_flt_rounds(void);












   double __cdecl _copysign(  double _Number,   double _Sign);
   double __cdecl _chgsign(  double _X);
   double __cdecl _scalb(  double _X,   long _Y);
   double __cdecl _logb(  double _X);
   double __cdecl _nextafter(  double _X,   double _Y);
   int    __cdecl _finite(  double _X);
   int    __cdecl _isnan(  double _X);
   int    __cdecl _fpclass(  double _X);


       float __cdecl _scalbf(  float _X,   long _Y);
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"










    
    
    

    
     void __cdecl fpreset(void);

    
    

    
    

    
    
    

    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    
    

    

    
    
    
    
    
    

    
    
    
    

    
    
    
    
    
    

    
    
    
    

    

#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"




#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\float.h"
#line 18 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"

















typedef signed char gint8;
typedef unsigned char guint8;
typedef signed short gint16;
typedef unsigned short guint16;



typedef signed int gint32;
typedef unsigned int guint32;









typedef signed __int64 gint64;
typedef unsigned __int64 guint64;
#line 56 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"





#line 62 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"




#line 67 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"










typedef signed long long gssize;
typedef unsigned long long gsize;


























#line 106 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"

typedef gint64 goffset;







































typedef signed __int64 gintptr;
typedef unsigned __int64 guintptr;
#line 150 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"





#line 156 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"





#line 162 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"











#line 174 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"

















#line 192 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"
#line 193 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"



















































typedef void * GPid;












#line 258 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glibconfig.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"
























































































































































#line 184 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 186 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"




#line 191 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 193 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"




























#line 222 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

























#line 248 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"




#line 253 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"


#line 256 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"


#line 259 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"
















#line 276 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 280 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 282 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 290 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 294 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 296 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 304 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 308 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 310 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 318 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 322 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 324 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 332 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 336 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 338 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 346 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 350 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 352 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 360 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 364 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 366 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 374 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 378 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 380 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 388 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 392 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 394 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 402 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 406 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 408 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 416 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 420 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 422 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 430 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 434 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 436 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 444 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 448 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 450 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"







#line 458 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"



#line 462 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 464 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"

#line 466 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversionmacros.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"








#pragma once












struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 
 
 wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

 errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );


#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

 

 size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );


#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);


#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );


#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"


 errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );


#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wtime.h"




#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"
















  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_daylight" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 int* __cdecl __daylight(void);




  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_dstbias" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 long* __cdecl __dstbias(void);




  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_timezone" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 long* __cdecl __timezone(void);




    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_tzname" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 char** __cdecl __tzname(void);



  
 errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
 errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
 errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
 errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "asctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
     errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"


#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 clock_t __cdecl clock(void);

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 char* __cdecl _ctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );


#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 char* __cdecl _ctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );


#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 
 double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
 double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gmtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_localtime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
 __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
 __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


 __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


 __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

 size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


 errno_t __cdecl _strdate_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );


#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   char* __cdecl _strdate( char *_Buffer);
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"


 errno_t __cdecl _strtime_s(
       char*  _Buffer,
                                                                              size_t _SizeInBytes
    );


#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl _strtime( char *_Buffer);
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

 __time32_t __cdecl _time32(
      __time32_t* _Time
    );

 __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
 int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
 int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










     void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
     unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










    











































































































          __declspec(deprecated("This function or variable may be unsafe. Consider using " "ctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          __declspec(deprecated("This function or variable may be unsafe. Consider using " "gmtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        __declspec(deprecated("This function or variable may be unsafe. Consider using " "localtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base);
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

    #line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"










    

    
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tzset" ". See online help for details."))  void __cdecl tzset(void);
    #line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"

#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"




#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\time.h"
#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"










typedef char   gchar;
typedef short  gshort;
typedef long   glong;
typedef int    gint;
typedef gint   gboolean;

typedef unsigned char   guchar;
typedef unsigned short  gushort;
typedef unsigned long   gulong;
typedef unsigned int    guint;

typedef float   gfloat;
typedef double  gdouble;


















typedef void* gpointer;
typedef const void *gconstpointer;

typedef gint            (*GCompareFunc)         (gconstpointer  a,
                                                 gconstpointer  b);
typedef gint            (*GCompareDataFunc)     (gconstpointer  a,
                                                 gconstpointer  b,
						 gpointer       user_data);
typedef gboolean        (*GEqualFunc)           (gconstpointer  a,
                                                 gconstpointer  b);
typedef void            (*GDestroyNotify)       (gpointer       data);
typedef void            (*GFunc)                (gpointer       data,
                                                 gpointer       user_data);
typedef guint           (*GHashFunc)            (gconstpointer  key);
typedef void            (*GHFunc)               (gpointer       key,
                                                 gpointer       value,
                                                 gpointer       user_data);









typedef void            (*GFreeFunc)            (gpointer       data);













typedef const gchar *   (*GTranslateFunc)       (const gchar   *str,
						 gpointer       data);
















































































































































































































#line 328 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"



#line 332 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"























































#line 388 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"

#line 390 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"
#line 391 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"





















#line 413 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"















static inline gboolean _GLIB_CHECKED_ADD_U32 (guint32 *dest, guint32 a, guint32 b) {
  *dest = a + b; return *dest >= a; }
static inline gboolean _GLIB_CHECKED_MUL_U32 (guint32 *dest, guint32 a, guint32 b) {
  *dest = a * b; return !a || *dest / a == b; }
static inline gboolean _GLIB_CHECKED_ADD_U64 (guint64 *dest, guint64 a, guint64 b) {
  *dest = a + b; return *dest >= a; }
static inline gboolean _GLIB_CHECKED_MUL_U64 (guint64 *dest, guint64 a, guint64 b) {
  *dest = a * b; return !a || *dest / a == b; }
#line 437 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"


















typedef union  _GDoubleIEEE754	GDoubleIEEE754;
typedef union  _GFloatIEEE754	GFloatIEEE754;





union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};






















#line 504 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"

typedef struct _GTimeVal                GTimeVal;

struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
};



















#line 532 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"
#line 533 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"


#line 536 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"
#line 537 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"

#line 539 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtypes.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"



#line 37 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"



#line 41 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"


#line 44 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"








#pragma once









































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
 int __cdecl _callnewh(
      size_t _Size
    );

     
 __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );


void __cdecl _free_base(
        void* _Block
    );

 
void __cdecl free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
 __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
       size_t _Size
    );

 

size_t __cdecl _msize_base(
      void* _Block
    );

 
 
size_t __cdecl _msize(
      void* _Block
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );


void __cdecl _aligned_free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 

size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_malloc.h"




#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"







    


#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





     intptr_t __cdecl _get_heap_handle(void);

     
     int __cdecl _heapmin(void);

    
         int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    
           int __cdecl _heapchk(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

     int __cdecl _resetstkoflw(void);

    
    
    

    
        
    

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
















    
    







#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"




#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            





        }
    }
    #pragma warning(pop)

#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"




    
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"




#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\malloc.h"
#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"











#line 58 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"
#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"












































#line 104 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/galloca.h"
#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/garray.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/garray.h"





typedef struct _GBytes          GBytes;
typedef struct _GArray		GArray;
typedef struct _GByteArray	GByteArray;
typedef struct _GPtrArray	GPtrArray;

struct _GArray
{
  gchar *data;
  guint len;
};

struct _GByteArray
{
  guint8 *data;
  guint	  len;
};

struct _GPtrArray
{
  gpointer *pdata;
  guint	    len;
};











extern
GArray* g_array_new               (gboolean          zero_terminated,
				   gboolean          clear_,
				   guint             element_size);
extern
GArray* g_array_sized_new         (gboolean          zero_terminated,
				   gboolean          clear_,
				   guint             element_size,
				   guint             reserved_size);
extern
gchar*  g_array_free              (GArray           *array,
				   gboolean          free_segment);
extern
GArray *g_array_ref               (GArray           *array);
extern
void    g_array_unref             (GArray           *array);
extern
guint   g_array_get_element_size  (GArray           *array);
extern
GArray* g_array_append_vals       (GArray           *array,
				   gconstpointer     data,
				   guint             len);
extern
GArray* g_array_prepend_vals      (GArray           *array,
				   gconstpointer     data,
				   guint             len);
extern
GArray* g_array_insert_vals       (GArray           *array,
				   guint             index_,
				   gconstpointer     data,
				   guint             len);
extern
GArray* g_array_set_size          (GArray           *array,
				   guint             length);
extern
GArray* g_array_remove_index      (GArray           *array,
				   guint             index_);
extern
GArray* g_array_remove_index_fast (GArray           *array,
				   guint             index_);
extern
GArray* g_array_remove_range      (GArray           *array,
				   guint             index_,
				   guint             length);
extern
void    g_array_sort              (GArray           *array,
				   GCompareFunc      compare_func);
extern
void    g_array_sort_with_data    (GArray           *array,
				   GCompareDataFunc  compare_func,
				   gpointer          user_data);
extern
void    g_array_set_clear_func    (GArray           *array,
                                   GDestroyNotify    clear_func);






extern
GPtrArray* g_ptr_array_new                (void);
extern
GPtrArray* g_ptr_array_new_with_free_func (GDestroyNotify    element_free_func);
extern
GPtrArray* g_ptr_array_sized_new          (guint             reserved_size);
extern
GPtrArray* g_ptr_array_new_full           (guint             reserved_size,
					   GDestroyNotify    element_free_func);
extern
gpointer*  g_ptr_array_free               (GPtrArray        *array,
					   gboolean          free_seg);
extern
GPtrArray* g_ptr_array_ref                (GPtrArray        *array);
extern
void       g_ptr_array_unref              (GPtrArray        *array);
extern
void       g_ptr_array_set_free_func      (GPtrArray        *array,
                                           GDestroyNotify    element_free_func);
extern
void       g_ptr_array_set_size           (GPtrArray        *array,
					   gint              length);
extern
gpointer   g_ptr_array_remove_index       (GPtrArray        *array,
					   guint             index_);
extern
gpointer   g_ptr_array_remove_index_fast  (GPtrArray        *array,
					   guint             index_);
extern
gboolean   g_ptr_array_remove             (GPtrArray        *array,
					   gpointer          data);
extern
gboolean   g_ptr_array_remove_fast        (GPtrArray        *array,
					   gpointer          data);
extern
GPtrArray *g_ptr_array_remove_range       (GPtrArray        *array,
					   guint             index_,
					   guint             length);
extern
void       g_ptr_array_add                (GPtrArray        *array,
					   gpointer          data);
extern
void       g_ptr_array_insert             (GPtrArray        *array,
                                           gint              index_,
                                           gpointer          data);
extern
void       g_ptr_array_sort               (GPtrArray        *array,
					   GCompareFunc      compare_func);
extern
void       g_ptr_array_sort_with_data     (GPtrArray        *array,
					   GCompareDataFunc  compare_func,
					   gpointer          user_data);
extern
void       g_ptr_array_foreach            (GPtrArray        *array,
					   GFunc             func,
					   gpointer          user_data);






extern
GByteArray* g_byte_array_new               (void);
extern
GByteArray* g_byte_array_new_take          (guint8           *data,
                                            gsize             len);
extern
GByteArray* g_byte_array_sized_new         (guint             reserved_size);
extern
guint8*     g_byte_array_free              (GByteArray       *array,
					    gboolean          free_segment);
extern
GBytes*     g_byte_array_free_to_bytes     (GByteArray       *array);
extern
GByteArray *g_byte_array_ref               (GByteArray       *array);
extern
void        g_byte_array_unref             (GByteArray       *array);
extern
GByteArray* g_byte_array_append            (GByteArray       *array,
					    const guint8     *data,
					    guint             len);
extern
GByteArray* g_byte_array_prepend           (GByteArray       *array,
					    const guint8     *data,
					    guint             len);
extern
GByteArray* g_byte_array_set_size          (GByteArray       *array,
					    guint             length);
extern
GByteArray* g_byte_array_remove_index      (GByteArray       *array,
					    guint             index_);
extern
GByteArray* g_byte_array_remove_index_fast (GByteArray       *array,
					    guint             index_);
extern
GByteArray* g_byte_array_remove_range      (GByteArray       *array,
					    guint             index_,
					    guint             length);
extern
void        g_byte_array_sort              (GByteArray       *array,
					    GCompareFunc      compare_func);
extern
void        g_byte_array_sort_with_data    (GByteArray       *array,
					    GCompareDataFunc  compare_func,
					    gpointer          user_data);



#line 239 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/garray.h"
#line 32 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gasyncqueue.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gasyncqueue.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gatomic.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gatomic.h"





extern
gint                    g_atomic_int_get                      (const volatile gint *atomic);
extern
void                    g_atomic_int_set                      (volatile gint  *atomic,
                                                               gint            newval);
extern
void                    g_atomic_int_inc                      (volatile gint  *atomic);
extern
gboolean                g_atomic_int_dec_and_test             (volatile gint  *atomic);
extern
gboolean                g_atomic_int_compare_and_exchange     (volatile gint  *atomic,
                                                               gint            oldval,
                                                               gint            newval);
extern
gint                    g_atomic_int_add                      (volatile gint  *atomic,
                                                               gint            val);
extern
guint                   g_atomic_int_and                      (volatile guint *atomic,
                                                               guint           val);
extern
guint                   g_atomic_int_or                       (volatile guint *atomic,
                                                               guint           val);
extern
guint                   g_atomic_int_xor                      (volatile guint *atomic,
                                                               guint           val);

extern
gpointer                g_atomic_pointer_get                  (const volatile void *atomic);
extern
void                    g_atomic_pointer_set                  (volatile void  *atomic,
                                                               gpointer        newval);
extern
gboolean                g_atomic_pointer_compare_and_exchange (volatile void  *atomic,
                                                               gpointer        oldval,
                                                               gpointer        newval);
extern
gssize                  g_atomic_pointer_add                  (volatile void  *atomic,
                                                               gssize          val);
extern
gsize                   g_atomic_pointer_and                  (volatile void  *atomic,
                                                               gsize           val);
extern
gsize                   g_atomic_pointer_or                   (volatile void  *atomic,
                                                               gsize           val);
extern
gsize                   g_atomic_pointer_xor                  (volatile void  *atomic,
                                                               gsize           val);

__declspec(deprecated("is deprecated. Use '" "g_atomic_int_add" "' instead")) extern
gint                    g_atomic_int_exchange_and_add         (volatile gint  *atomic,
                                                               gint            val);









































































































































































#line 252 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gatomic.h"



































#line 288 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gatomic.h"

#line 290 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gatomic.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gerror.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gerror.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.16.27023\\include\\stdarg.h"







#pragma once
















#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gerror.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gquark.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gquark.h"





typedef guint32 GQuark;



extern
GQuark                g_quark_try_string         (const gchar *string);
extern
GQuark                g_quark_from_static_string (const gchar *string);
extern
GQuark                g_quark_from_string        (const gchar *string);
extern
const gchar *         g_quark_to_string          (GQuark       quark) ;













extern
const gchar *         g_intern_string            (const gchar *string);
extern
const gchar *         g_intern_static_string     (const gchar *string);



#line 69 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gquark.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gerror.h"












typedef struct _GError GError;

struct _GError
{
  GQuark       domain;
  gint         code;
  gchar       *message;
};

extern
GError*  g_error_new           (GQuark         domain,
                                gint           code,
                                const gchar   *format,
                                ...) ;

extern
GError*  g_error_new_literal   (GQuark         domain,
                                gint           code,
                                const gchar   *message);
extern
GError*  g_error_new_valist    (GQuark         domain,
                                gint           code,
                                const gchar   *format,
                                va_list        args) ;

extern
void     g_error_free          (GError        *error);
extern
GError*  g_error_copy          (const GError  *error);

extern
gboolean g_error_matches       (const GError  *error,
                                GQuark         domain,
                                gint           code);




extern
void     g_set_error           (GError       **err,
                                GQuark         domain,
                                gint           code,
                                const gchar   *format,
                                ...) ;

extern
void     g_set_error_literal   (GError       **err,
                                GQuark         domain,
                                gint           code,
                                const gchar   *message);



extern
void     g_propagate_error     (GError       **dest,
				GError        *src);


extern
void     g_clear_error         (GError       **err);


extern
void     g_prefix_error               (GError       **err,
                                       const gchar   *format,
                                       ...) ;


extern
void     g_propagate_prefixed_error   (GError       **dest,
                                       GError        *src,
                                       const gchar   *format,
                                       ...) ;



#line 118 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gerror.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"

















#line 49 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"

extern
const gchar *         g_get_user_name        (void);
extern
const gchar *         g_get_real_name        (void);
extern
const gchar *         g_get_home_dir         (void);
extern
const gchar *         g_get_tmp_dir          (void);
extern
const gchar *         g_get_host_name	     (void);
extern
const gchar *         g_get_prgname          (void);
extern
void                  g_set_prgname          (const gchar *prgname);
extern
const gchar *         g_get_application_name (void);
extern
void                  g_set_application_name (const gchar *application_name);

extern
void      g_reload_user_special_dirs_cache     (void);
extern
const gchar *         g_get_user_data_dir      (void);
extern
const gchar *         g_get_user_config_dir    (void);
extern
const gchar *         g_get_user_cache_dir     (void);
extern
const gchar * const * g_get_system_data_dirs   (void);



extern
const gchar * const * g_win32_get_system_data_dirs_for_module (void (*address_of_function)(void));
#line 85 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"






static inline const gchar * const *
_g_win32_get_system_data_dirs (void)
{
  return g_win32_get_system_data_dirs_for_module ((void (*)(void)) &_g_win32_get_system_data_dirs);
}

#line 98 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"

extern
const gchar * const * g_get_system_config_dirs (void);

extern
const gchar * g_get_user_runtime_dir (void);























typedef enum {
  G_USER_DIRECTORY_DESKTOP,
  G_USER_DIRECTORY_DOCUMENTS,
  G_USER_DIRECTORY_DOWNLOAD,
  G_USER_DIRECTORY_MUSIC,
  G_USER_DIRECTORY_PICTURES,
  G_USER_DIRECTORY_PUBLIC_SHARE,
  G_USER_DIRECTORY_TEMPLATES,
  G_USER_DIRECTORY_VIDEOS,

  G_USER_N_DIRECTORIES
} GUserDirectory;

extern
const gchar * g_get_user_special_dir (GUserDirectory directory);









typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  const gchar *key;
  guint	       value;
};



extern
guint                 g_parse_debug_string (const gchar     *string,
					    const GDebugKey *keys,
					    guint            nkeys);

extern
gint                  g_snprintf           (gchar       *string,
					    gulong       n,
					    gchar const *format,
					    ...) ;
extern
gint                  g_vsnprintf          (gchar       *string,
					    gulong       n,
					    gchar const *format,
					    va_list      args)
					    ;

extern
void                  g_nullify_pointer    (gpointer    *nullify_location);

typedef enum
{
  G_FORMAT_SIZE_DEFAULT     = 0,
  G_FORMAT_SIZE_LONG_FORMAT = 1 << 0,
  G_FORMAT_SIZE_IEC_UNITS   = 1 << 1
} GFormatSizeFlags;

extern
gchar *g_format_size_full   (guint64          size,
                             GFormatSizeFlags flags);
extern
gchar *g_format_size        (guint64          size);

__declspec(deprecated("is deprecated. Use '" "g_format_size" "' instead")) extern
gchar *g_format_size_for_display (goffset size);









typedef void (*GVoidFunc) (void);

__declspec(deprecated) extern
void	g_atexit		(GVoidFunc    func);









int atexit (void (*)(void));
#line 219 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"

#line 221 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"

#line 223 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"



extern
gchar*  g_find_program_in_path  (const gchar *program);
















extern
gint    (g_bit_nth_lsf)         (gulong mask,
                                 gint   nth_bit);
extern
gint    (g_bit_nth_msf)         (gulong mask,
                                 gint   nth_bit);
extern
guint   (g_bit_storage)         (gulong number);

static inline gint
g_bit_nth_lsf_impl (gulong mask,
                    gint   nth_bit)
{
  if ((nth_bit < -1))
    nth_bit = -1;
  while (nth_bit < ((4 * 8) - 1))
    {
      nth_bit++;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}

static inline gint
g_bit_nth_msf_impl (gulong mask,
                    gint   nth_bit)
{
  if (nth_bit < 0 || (nth_bit > 4 * 8))
    nth_bit = 4 * 8;
  while (nth_bit > 0)
    {
      nth_bit--;
      if (mask & (1UL << nth_bit))
        return nth_bit;
    }
  return -1;
}

static inline guint
g_bit_storage_impl (gulong number)
{



#line 290 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"
  guint n_bits = 0;

  do
    {
      n_bits++;
      number >>= 1;
    }
  while (number);
  return n_bits;
#line 300 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"
}






extern
void g_abort (void)  ;
#line 310 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"
#line 311 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"














































#line 358 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"

#line 360 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"



#line 364 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gutils.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"




extern
GQuark g_thread_error_quark (void);

typedef enum
{
  G_THREAD_ERROR_AGAIN 
} GThreadError;

typedef gpointer (*GThreadFunc) (gpointer data);

typedef struct _GThread         GThread;

typedef union  _GMutex          GMutex;
typedef struct _GRecMutex       GRecMutex;
typedef struct _GRWLock         GRWLock;
typedef struct _GCond           GCond;
typedef struct _GPrivate        GPrivate;
typedef struct _GOnce           GOnce;

union _GMutex
{
  
  gpointer p;
  guint i[2];
};

struct _GRWLock
{
  
  gpointer p;
  guint i[2];
};

struct _GCond
{
  
  gpointer p;
  guint i[2];
};

struct _GRecMutex
{
  
  gpointer p;
  guint i[2];
};


struct _GPrivate
{
  
  gpointer       p;
  GDestroyNotify notify;
  gpointer future[2];
};

typedef enum
{
  G_ONCE_STATUS_NOTCALLED,
  G_ONCE_STATUS_PROGRESS,
  G_ONCE_STATUS_READY
} GOnceStatus;


struct _GOnce
{
  volatile GOnceStatus status;
  volatile gpointer retval;
};






























#line 139 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"

extern
GThread *       g_thread_ref                    (GThread        *thread);
extern
void            g_thread_unref                  (GThread        *thread);
extern
GThread *       g_thread_new                    (const gchar    *name,
                                                 GThreadFunc     func,
                                                 gpointer        data);
extern
GThread *       g_thread_try_new                (const gchar    *name,
                                                 GThreadFunc     func,
                                                 gpointer        data,
                                                 GError        **error);
extern
GThread *       g_thread_self                   (void);
extern
void            g_thread_exit                   (gpointer        retval);
extern
gpointer        g_thread_join                   (GThread        *thread);
extern
void            g_thread_yield                  (void);


extern
void            g_mutex_init                    (GMutex         *mutex);
extern
void            g_mutex_clear                   (GMutex         *mutex);
extern
void            g_mutex_lock                    (GMutex         *mutex);
extern
gboolean        g_mutex_trylock                 (GMutex         *mutex);
extern
void            g_mutex_unlock                  (GMutex         *mutex);

extern
void            g_rw_lock_init                  (GRWLock        *rw_lock);
extern
void            g_rw_lock_clear                 (GRWLock        *rw_lock);
extern
void            g_rw_lock_writer_lock           (GRWLock        *rw_lock);
extern
gboolean        g_rw_lock_writer_trylock        (GRWLock        *rw_lock);
extern
void            g_rw_lock_writer_unlock         (GRWLock        *rw_lock);
extern
void            g_rw_lock_reader_lock           (GRWLock        *rw_lock);
extern
gboolean        g_rw_lock_reader_trylock        (GRWLock        *rw_lock);
extern
void            g_rw_lock_reader_unlock         (GRWLock        *rw_lock);

extern
void            g_rec_mutex_init                (GRecMutex      *rec_mutex);
extern
void            g_rec_mutex_clear               (GRecMutex      *rec_mutex);
extern
void            g_rec_mutex_lock                (GRecMutex      *rec_mutex);
extern
gboolean        g_rec_mutex_trylock             (GRecMutex      *rec_mutex);
extern
void            g_rec_mutex_unlock              (GRecMutex      *rec_mutex);

extern
void            g_cond_init                     (GCond          *cond);
extern
void            g_cond_clear                    (GCond          *cond);
extern
void            g_cond_wait                     (GCond          *cond,
                                                 GMutex         *mutex);
extern
void            g_cond_signal                   (GCond          *cond);
extern
void            g_cond_broadcast                (GCond          *cond);
extern
gboolean        g_cond_wait_until               (GCond          *cond,
                                                 GMutex         *mutex,
                                                 gint64          end_time);

extern
gpointer        g_private_get                   (GPrivate       *key);
extern
void            g_private_set                   (GPrivate       *key,
                                                 gpointer        value);
extern
void            g_private_replace               (GPrivate       *key,
                                                 gpointer        value);

extern
gpointer        g_once_impl                     (GOnce          *once,
                                                 GThreadFunc     func,
                                                 gpointer        arg);
extern
gboolean        g_once_init_enter               (volatile void  *location);
extern
void            g_once_init_leave               (volatile void  *location,
                                                 gsize           result);








#line 245 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"




















#line 266 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"

extern
guint          g_get_num_processors (void);







typedef void GMutexLocker;









































static inline GMutexLocker *
g_mutex_locker_new (GMutex *mutex)
{
  g_mutex_lock (mutex);
  return (GMutexLocker *) mutex;
}









static inline void
g_mutex_locker_free (GMutexLocker *locker)
{
  g_mutex_unlock ((GMutex *) locker);
}



#line 342 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthread.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gasyncqueue.h"



typedef struct _GAsyncQueue GAsyncQueue;

extern
GAsyncQueue *g_async_queue_new                  (void);
extern
GAsyncQueue *g_async_queue_new_full             (GDestroyNotify item_free_func);
extern
void         g_async_queue_lock                 (GAsyncQueue      *queue);
extern
void         g_async_queue_unlock               (GAsyncQueue      *queue);
extern
GAsyncQueue *g_async_queue_ref                  (GAsyncQueue      *queue);
extern
void         g_async_queue_unref                (GAsyncQueue      *queue);

__declspec(deprecated("is deprecated. Use '" "g_async_queue_ref" "' instead")) extern
void         g_async_queue_ref_unlocked         (GAsyncQueue      *queue);

__declspec(deprecated("is deprecated. Use '" "g_async_queue_unref" "' instead")) extern
void         g_async_queue_unref_and_unlock     (GAsyncQueue      *queue);

extern
void         g_async_queue_push                 (GAsyncQueue      *queue,
                                                 gpointer          data);
extern
void         g_async_queue_push_unlocked        (GAsyncQueue      *queue,
                                                 gpointer          data);
extern
void         g_async_queue_push_sorted          (GAsyncQueue      *queue,
                                                 gpointer          data,
                                                 GCompareDataFunc  func,
                                                 gpointer          user_data);
extern
void         g_async_queue_push_sorted_unlocked (GAsyncQueue      *queue,
                                                 gpointer          data,
                                                 GCompareDataFunc  func,
                                                 gpointer          user_data);
extern
gpointer     g_async_queue_pop                  (GAsyncQueue      *queue);
extern
gpointer     g_async_queue_pop_unlocked         (GAsyncQueue      *queue);
extern
gpointer     g_async_queue_try_pop              (GAsyncQueue      *queue);
extern
gpointer     g_async_queue_try_pop_unlocked     (GAsyncQueue      *queue);
extern
gpointer     g_async_queue_timeout_pop          (GAsyncQueue      *queue,
                                                 guint64           timeout);
extern
gpointer     g_async_queue_timeout_pop_unlocked (GAsyncQueue      *queue,
                                                 guint64           timeout);
extern
gint         g_async_queue_length               (GAsyncQueue      *queue);
extern
gint         g_async_queue_length_unlocked      (GAsyncQueue      *queue);
extern
void         g_async_queue_sort                 (GAsyncQueue      *queue,
                                                 GCompareDataFunc  func,
                                                 gpointer          user_data);
extern
void         g_async_queue_sort_unlocked        (GAsyncQueue      *queue,
                                                 GCompareDataFunc  func,
                                                 gpointer          user_data);

extern
gboolean     g_async_queue_remove               (GAsyncQueue      *queue,
                                                 gpointer          item);
extern
gboolean     g_async_queue_remove_unlocked      (GAsyncQueue      *queue,
                                                 gpointer          item);
extern
void         g_async_queue_push_front           (GAsyncQueue      *queue,
                                                 gpointer          item);
extern
void         g_async_queue_push_front_unlocked  (GAsyncQueue      *queue,
                                                 gpointer          item);

__declspec(deprecated("is deprecated. Use '" "g_async_queue_timeout_pop" "' instead")) extern
gpointer     g_async_queue_timed_pop            (GAsyncQueue      *queue,
                                                 GTimeVal         *end_time);
__declspec(deprecated("is deprecated. Use '" "g_async_queue_timeout_pop_unlocked" "' instead")) extern
gpointer     g_async_queue_timed_pop_unlocked   (GAsyncQueue      *queue,
                                                 GTimeVal         *end_time);



#line 123 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gasyncqueue.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\signal.h"







#pragma once









typedef int sig_atomic_t;

typedef void (__cdecl* _crt_signal_t)(int);
































 void** __cdecl __pxcptinfoptrs(void);




     _crt_signal_t __cdecl signal(  int _Signal,   _crt_signal_t _Function);
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\signal.h"

 int __cdecl raise(  int _Signal);




#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\signal.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"



extern
void g_on_error_query (const gchar *prg_name);
extern
void g_on_error_stack_trace (const gchar *prg_name);











#line 53 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"

#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"







#line 63 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"



#line 67 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbacktrace.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbase64.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbase64.h"





extern
gsize   g_base64_encode_step    (const guchar *in,
                                 gsize         len,
                                 gboolean      break_lines,
                                 gchar        *out,
                                 gint         *state,
                                 gint         *save);
extern
gsize   g_base64_encode_close   (gboolean      break_lines,
                                 gchar        *out,
                                 gint         *state,
                                 gint         *save);
extern
gchar*  g_base64_encode         (const guchar *data,
                                 gsize         len) ;
extern
gsize   g_base64_decode_step    (const gchar  *in,
                                 gsize         len,
                                 guchar       *out,
                                 gint         *state,
                                 guint        *save);
extern
guchar *g_base64_decode         (const gchar  *text,
                                 gsize        *out_len) ;
extern
guchar *g_base64_decode_inplace (gchar        *text,
                                 gsize        *out_len);




#line 62 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbase64.h"
#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbitlock.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbitlock.h"



extern
void      g_bit_lock                      (volatile gint *address,
                                           gint           lock_bit);
extern
gboolean  g_bit_trylock                   (volatile gint *address,
                                           gint           lock_bit);
extern
void      g_bit_unlock                    (volatile gint *address,
                                           gint           lock_bit);

extern
void      g_pointer_bit_lock              (volatile void *address,
                                           gint           lock_bit);
extern
gboolean  g_pointer_bit_trylock           (volatile void *address,
                                           gint           lock_bit);
extern
void      g_pointer_bit_unlock            (volatile void *address,
                                           gint           lock_bit);

























#line 77 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbitlock.h"
#line 37 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbookmarkfile.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbookmarkfile.h"































typedef enum
{
  G_BOOKMARK_FILE_ERROR_INVALID_URI,
  G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
  G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
  G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
  G_BOOKMARK_FILE_ERROR_READ,
  G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
  G_BOOKMARK_FILE_ERROR_WRITE,
  G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
} GBookmarkFileError;

extern
GQuark g_bookmark_file_error_quark (void);







typedef struct _GBookmarkFile GBookmarkFile;

extern
GBookmarkFile *g_bookmark_file_new                 (void);
extern
void           g_bookmark_file_free                (GBookmarkFile  *bookmark);

extern
gboolean       g_bookmark_file_load_from_file      (GBookmarkFile  *bookmark,
						    const gchar    *filename,
						    GError        **error);
extern
gboolean       g_bookmark_file_load_from_data      (GBookmarkFile  *bookmark,
						    const gchar    *data,
						    gsize           length,
						    GError        **error);
extern
gboolean       g_bookmark_file_load_from_data_dirs (GBookmarkFile  *bookmark,
						    const gchar    *file,
						    gchar         **full_path,
						    GError        **error);
extern
gchar *        g_bookmark_file_to_data             (GBookmarkFile  *bookmark,
						    gsize          *length,
						    GError        **error) ;
extern
gboolean       g_bookmark_file_to_file             (GBookmarkFile  *bookmark,
						    const gchar    *filename,
						    GError        **error);

extern
void           g_bookmark_file_set_title           (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *title);
extern
gchar *        g_bookmark_file_get_title           (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error) ;
extern
void           g_bookmark_file_set_description     (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *description);
extern
gchar *        g_bookmark_file_get_description     (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error) ;
extern
void           g_bookmark_file_set_mime_type       (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *mime_type);
extern
gchar *        g_bookmark_file_get_mime_type       (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error) ;
extern
void           g_bookmark_file_set_groups          (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar   **groups,
						    gsize           length);
extern
void           g_bookmark_file_add_group           (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *group);
extern
gboolean       g_bookmark_file_has_group           (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *group,
						    GError        **error);
extern
gchar **       g_bookmark_file_get_groups          (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    gsize          *length,
						    GError        **error) ;
extern
void           g_bookmark_file_add_application     (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *name,
						    const gchar    *exec);
extern
gboolean       g_bookmark_file_has_application     (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *name,
						    GError        **error);
extern
gchar **       g_bookmark_file_get_applications    (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    gsize          *length,
						    GError        **error) ;
extern
gboolean       g_bookmark_file_set_app_info        (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *name,
						    const gchar    *exec,
						    gint            count,
						    time_t          stamp,
						    GError        **error);
extern
gboolean       g_bookmark_file_get_app_info        (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *name,
						    gchar         **exec,
						    guint          *count,
						    time_t         *stamp,
						    GError        **error);
extern
void           g_bookmark_file_set_is_private      (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    gboolean        is_private);
extern
gboolean       g_bookmark_file_get_is_private      (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error);
extern
void           g_bookmark_file_set_icon            (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *href,
						    const gchar    *mime_type);
extern
gboolean       g_bookmark_file_get_icon            (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    gchar         **href,
						    gchar         **mime_type,
						    GError        **error);
extern
void           g_bookmark_file_set_added           (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    time_t          added);
extern
time_t         g_bookmark_file_get_added           (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error);
extern
void           g_bookmark_file_set_modified        (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    time_t          modified);
extern
time_t         g_bookmark_file_get_modified        (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error);
extern
void           g_bookmark_file_set_visited         (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    time_t          visited);
extern
time_t         g_bookmark_file_get_visited         (GBookmarkFile  *bookmark,
						    const gchar    *uri, 
						    GError        **error);
extern
gboolean       g_bookmark_file_has_item            (GBookmarkFile  *bookmark,
						    const gchar    *uri);
extern
gint           g_bookmark_file_get_size            (GBookmarkFile  *bookmark);
extern
gchar **       g_bookmark_file_get_uris            (GBookmarkFile  *bookmark,
						    gsize          *length) ;
extern
gboolean       g_bookmark_file_remove_group        (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *group,
						    GError        **error);
extern
gboolean       g_bookmark_file_remove_application  (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    const gchar    *name,
						    GError        **error);
extern
gboolean       g_bookmark_file_remove_item         (GBookmarkFile  *bookmark,
						    const gchar    *uri,
						    GError        **error);
extern
gboolean       g_bookmark_file_move_item           (GBookmarkFile  *bookmark,
						    const gchar    *old_uri,
						    const gchar    *new_uri,
						    GError        **error);



#line 255 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbookmarkfile.h"
#line 38 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbytes.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbytes.h"






extern
GBytes *        g_bytes_new                     (gconstpointer   data,
                                                 gsize           size);

extern
GBytes *        g_bytes_new_take                (gpointer        data,
                                                 gsize           size);

extern
GBytes *        g_bytes_new_static              (gconstpointer   data,
                                                 gsize           size);

extern
GBytes *        g_bytes_new_with_free_func      (gconstpointer   data,
                                                 gsize           size,
                                                 GDestroyNotify  free_func,
                                                 gpointer        user_data);

extern
GBytes *        g_bytes_new_from_bytes          (GBytes         *bytes,
                                                 gsize           offset,
                                                 gsize           length);

extern
gconstpointer   g_bytes_get_data                (GBytes         *bytes,
                                                 gsize          *size);

extern
gsize           g_bytes_get_size                (GBytes         *bytes);

extern
GBytes *        g_bytes_ref                     (GBytes         *bytes);

extern
void            g_bytes_unref                   (GBytes         *bytes);

extern
gpointer        g_bytes_unref_to_data           (GBytes         *bytes,
                                                 gsize          *size);

extern
GByteArray *    g_bytes_unref_to_array          (GBytes         *bytes);

extern
guint           g_bytes_hash                    (gconstpointer   bytes);

extern
gboolean        g_bytes_equal                   (gconstpointer   bytes1,
                                                 gconstpointer   bytes2);

extern
gint            g_bytes_compare                 (gconstpointer   bytes1,
                                                 gconstpointer   bytes2);



#line 91 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gbytes.h"
#line 39 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gcharset.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gcharset.h"





extern
gboolean              g_get_charset         (const char **charset);
extern
gchar *               g_get_codeset         (void);

extern
const gchar * const * g_get_language_names  (void);
extern
gchar **              g_get_locale_variants (const gchar *locale);



#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gcharset.h"
#line 40 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gchecksum.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gchecksum.h"






















typedef enum {
  G_CHECKSUM_MD5,
  G_CHECKSUM_SHA1,
  G_CHECKSUM_SHA256,
  G_CHECKSUM_SHA512,
  G_CHECKSUM_SHA384
} GChecksumType;










typedef struct _GChecksum       GChecksum;

extern
gssize                g_checksum_type_get_length    (GChecksumType    checksum_type);

extern
GChecksum *           g_checksum_new                (GChecksumType    checksum_type);
extern
void                  g_checksum_reset              (GChecksum       *checksum);
extern
GChecksum *           g_checksum_copy               (const GChecksum *checksum);
extern
void                  g_checksum_free               (GChecksum       *checksum);
extern
void                  g_checksum_update             (GChecksum       *checksum,
                                                     const guchar    *data,
                                                     gssize           length);
extern
const gchar *         g_checksum_get_string         (GChecksum       *checksum);
extern
void                  g_checksum_get_digest         (GChecksum       *checksum,
                                                     guint8          *buffer,
                                                     gsize           *digest_len);

extern
gchar                *g_compute_checksum_for_data   (GChecksumType    checksum_type,
                                                     const guchar    *data,
                                                     gsize            length);
extern
gchar                *g_compute_checksum_for_string (GChecksumType    checksum_type,
                                                     const gchar     *str,
                                                     gssize           length);

extern
gchar                *g_compute_checksum_for_bytes  (GChecksumType    checksum_type,
                                                     GBytes          *data);



#line 104 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gchecksum.h"
#line 41 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gconvert.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gconvert.h"


















typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
  G_CONVERT_ERROR_NO_MEMORY
} GConvertError;









extern
GQuark g_convert_error_quark (void);







typedef struct _GIConv *GIConv;

extern
GIConv g_iconv_open   (const gchar  *to_codeset,
		       const gchar  *from_codeset);
extern
gsize  g_iconv        (GIConv        converter,
		       gchar       **inbuf,
		       gsize        *inbytes_left,
		       gchar       **outbuf,
		       gsize        *outbytes_left);
extern
gint   g_iconv_close  (GIConv        converter);


extern
gchar* g_convert               (const gchar  *str,
				gssize        len,            
				const gchar  *to_codeset,
				const gchar  *from_codeset,
				gsize        *bytes_read,     
				gsize        *bytes_written,  
				GError      **error) ;
extern
gchar* g_convert_with_iconv    (const gchar  *str,
				gssize        len,
				GIConv        converter,
				gsize        *bytes_read,     
				gsize        *bytes_written,  
				GError      **error) ;
extern
gchar* g_convert_with_fallback (const gchar  *str,
				gssize        len,            
				const gchar  *to_codeset,
				const gchar  *from_codeset,
				const gchar  *fallback,
				gsize        *bytes_read,     
				gsize        *bytes_written,  
				GError      **error) ;




extern
gchar* g_locale_to_utf8   (const gchar  *opsysstring,
			   gssize        len,            
			   gsize        *bytes_read,     
			   gsize        *bytes_written,  
			   GError      **error) ;
extern
gchar* g_locale_from_utf8 (const gchar  *utf8string,
			   gssize        len,            
			   gsize        *bytes_read,     
			   gsize        *bytes_written,  
			   GError      **error) ;




extern
gchar* g_filename_to_utf8   (const gchar  *opsysstring,
			     gssize        len,            
			     gsize        *bytes_read,     
			     gsize        *bytes_written,  
			     GError      **error) ;
extern
gchar* g_filename_from_utf8 (const gchar  *utf8string,
			     gssize        len,            
			     gsize        *bytes_read,     
			     gsize        *bytes_written,  
			     GError      **error) ;

extern
gchar *g_filename_from_uri (const gchar *uri,
			    gchar      **hostname,
			    GError     **error) ;
  
extern
gchar *g_filename_to_uri   (const gchar *filename,
			    const gchar *hostname,
			    GError     **error) ;
extern
gchar *g_filename_display_name (const gchar *filename) ;
extern
gboolean g_get_filename_charsets (const gchar ***charsets);

extern
gchar *g_filename_display_basename (const gchar *filename) ;

extern
gchar **g_uri_list_extract_uris (const gchar *uri_list) ;








extern
gchar* g_filename_to_utf8_utf8   (const gchar  *opsysstring,
                                  gssize        len,
                                  gsize        *bytes_read,
                                  gsize        *bytes_written,
                                  GError      **error) ;
extern
gchar* g_filename_from_utf8_utf8 (const gchar  *utf8string,
                                  gssize        len,
                                  gsize        *bytes_read,
                                  gsize        *bytes_written,
                                  GError      **error) ;
extern
gchar *g_filename_from_uri_utf8  (const gchar  *uri,
                                  gchar       **hostname,
                                  GError      **error) ;
extern
gchar *g_filename_to_uri_utf8    (const gchar  *filename,
                                  const gchar  *hostname,
                                  GError      **error) ;
#line 197 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gconvert.h"
#line 198 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gconvert.h"



#line 202 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gconvert.h"
#line 42 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdataset.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdataset.h"





typedef struct _GData           GData;

typedef void            (*GDataForeachFunc)     (GQuark         key_id,
                                                 gpointer       data,
                                                 gpointer       user_data);



extern
void     g_datalist_init                (GData            **datalist);
extern
void     g_datalist_clear               (GData            **datalist);
extern
gpointer g_datalist_id_get_data         (GData            **datalist,
					 GQuark             key_id);
extern
void     g_datalist_id_set_data_full    (GData            **datalist,
					 GQuark             key_id,
					 gpointer           data,
					 GDestroyNotify     destroy_func);

typedef gpointer (*GDuplicateFunc) (gpointer data, gpointer user_data);

extern
gpointer g_datalist_id_dup_data         (GData            **datalist,
                                         GQuark             key_id,
                                         GDuplicateFunc     dup_func,
					 gpointer           user_data);
extern
gboolean g_datalist_id_replace_data     (GData            **datalist,
                                         GQuark             key_id,
                                         gpointer           oldval,
                                         gpointer           newval,
                                         GDestroyNotify     destroy,
					 GDestroyNotify    *old_destroy);

extern
gpointer g_datalist_id_remove_no_notify (GData            **datalist,
					 GQuark             key_id);
extern
void     g_datalist_foreach             (GData            **datalist,
					 GDataForeachFunc   func,
					 gpointer           user_data);










extern
void     g_datalist_set_flags           (GData            **datalist,
					 guint              flags);
extern
void     g_datalist_unset_flags         (GData            **datalist,
					 guint              flags);
extern
guint    g_datalist_get_flags           (GData            **datalist);
















extern
void      g_dataset_destroy             (gconstpointer    dataset_location);
extern
gpointer  g_dataset_id_get_data         (gconstpointer    dataset_location,
                                         GQuark           key_id);
extern
gpointer  g_datalist_get_data            (GData	 **datalist,
					  const gchar *key);
extern
void      g_dataset_id_set_data_full    (gconstpointer    dataset_location,
                                         GQuark           key_id,
                                         gpointer         data,
                                         GDestroyNotify   destroy_func);
extern
gpointer  g_dataset_id_remove_no_notify (gconstpointer    dataset_location,
                                         GQuark           key_id);
extern
void      g_dataset_foreach             (gconstpointer    dataset_location,
                                         GDataForeachFunc func,
                                         gpointer         user_data);

















#line 151 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdataset.h"
#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdate.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdate.h"

















typedef gint32  GTime;
typedef guint16 GDateYear;
typedef guint8  GDateDay;   
typedef struct _GDate GDate;


typedef enum
{
  G_DATE_DAY   = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR  = 2
} GDateDMY;


typedef enum
{
  G_DATE_BAD_WEEKDAY  = 0,
  G_DATE_MONDAY       = 1,
  G_DATE_TUESDAY      = 2,
  G_DATE_WEDNESDAY    = 3,
  G_DATE_THURSDAY     = 4,
  G_DATE_FRIDAY       = 5,
  G_DATE_SATURDAY     = 6,
  G_DATE_SUNDAY       = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY   = 1,
  G_DATE_FEBRUARY  = 2,
  G_DATE_MARCH     = 3,
  G_DATE_APRIL     = 4,
  G_DATE_MAY       = 5,
  G_DATE_JUNE      = 6,
  G_DATE_JULY      = 7,
  G_DATE_AUGUST    = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER   = 10,
  G_DATE_NOVEMBER  = 11,
  G_DATE_DECEMBER  = 12
} GDateMonth;










struct _GDate
{
  guint julian_days : 32; 





  guint julian : 1;    
  guint dmy    : 1;    

  
  guint day    : 6;
  guint month  : 4;
  guint year   : 16;
};





extern
GDate*       g_date_new                   (void);
extern
GDate*       g_date_new_dmy               (GDateDay     day,
                                           GDateMonth   month,
                                           GDateYear    year);
extern
GDate*       g_date_new_julian            (guint32      julian_day);
extern
void         g_date_free                  (GDate       *date);






extern
gboolean     g_date_valid                 (const GDate *date);
extern
gboolean     g_date_valid_day             (GDateDay     day) ;
extern
gboolean     g_date_valid_month           (GDateMonth month) ;
extern
gboolean     g_date_valid_year            (GDateYear  year) ;
extern
gboolean     g_date_valid_weekday         (GDateWeekday weekday) ;
extern
gboolean     g_date_valid_julian          (guint32 julian_date) ;
extern
gboolean     g_date_valid_dmy             (GDateDay     day,
                                           GDateMonth   month,
                                           GDateYear    year) ;

extern
GDateWeekday g_date_get_weekday           (const GDate *date);
extern
GDateMonth   g_date_get_month             (const GDate *date);
extern
GDateYear    g_date_get_year              (const GDate *date);
extern
GDateDay     g_date_get_day               (const GDate *date);
extern
guint32      g_date_get_julian            (const GDate *date);
extern
guint        g_date_get_day_of_year       (const GDate *date);






extern
guint        g_date_get_monday_week_of_year (const GDate *date);
extern
guint        g_date_get_sunday_week_of_year (const GDate *date);
extern
guint        g_date_get_iso8601_week_of_year (const GDate *date);





extern
void         g_date_clear                 (GDate       *date,
                                           guint        n_dates);





extern
void         g_date_set_parse             (GDate       *date,
                                           const gchar *str);
extern
void         g_date_set_time_t            (GDate       *date,
					   time_t       timet);
extern
void         g_date_set_time_val          (GDate       *date,
					   GTimeVal    *timeval);

__declspec(deprecated("is deprecated. Use '" "g_date_set_time_t" "' instead")) extern
void         g_date_set_time              (GDate       *date,
                                           GTime        time_);
#line 204 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdate.h"
extern
void         g_date_set_month             (GDate       *date,
                                           GDateMonth   month);
extern
void         g_date_set_day               (GDate       *date,
                                           GDateDay     day);
extern
void         g_date_set_year              (GDate       *date,
                                           GDateYear    year);
extern
void         g_date_set_dmy               (GDate       *date,
                                           GDateDay     day,
                                           GDateMonth   month,
                                           GDateYear    y);
extern
void         g_date_set_julian            (GDate       *date,
                                           guint32      julian_date);
extern
gboolean     g_date_is_first_of_month     (const GDate *date);
extern
gboolean     g_date_is_last_of_month      (const GDate *date);


extern
void         g_date_add_days              (GDate       *date,
                                           guint        n_days);
extern
void         g_date_subtract_days         (GDate       *date,
                                           guint        n_days);


extern
void         g_date_add_months            (GDate       *date,
                                           guint        n_months);
extern
void         g_date_subtract_months       (GDate       *date,
                                           guint        n_months);


extern
void         g_date_add_years             (GDate       *date,
                                           guint        n_years);
extern
void         g_date_subtract_years        (GDate       *date,
                                           guint        n_years);
extern
gboolean     g_date_is_leap_year          (GDateYear    year) ;
extern
guint8       g_date_get_days_in_month     (GDateMonth   month,
                                           GDateYear    year) ;
extern
guint8       g_date_get_monday_weeks_in_year  (GDateYear    year) ;
extern
guint8       g_date_get_sunday_weeks_in_year  (GDateYear    year) ;



extern
gint         g_date_days_between          (const GDate *date1,
					   const GDate *date2);


extern
gint         g_date_compare               (const GDate *lhs,
                                           const GDate *rhs);
extern
void         g_date_to_struct_tm          (const GDate *date,
                                           struct tm   *tm);

extern
void         g_date_clamp                 (GDate *date,
					   const GDate *min_date,
					   const GDate *max_date);


extern
void         g_date_order                 (GDate *date1, GDate *date2);




extern
gsize        g_date_strftime              (gchar       *s,
                                           gsize        slen,
                                           const gchar *format,
                                           const GDate *date);















#line 306 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdate.h"



#line 310 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdate.h"
#line 44 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdatetime.h"




























#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdatetime.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtimezone.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtimezone.h"





typedef struct _GTimeZone GTimeZone;
















typedef enum
{
  G_TIME_TYPE_STANDARD,
  G_TIME_TYPE_DAYLIGHT,
  G_TIME_TYPE_UNIVERSAL
} GTimeType;

extern
GTimeZone *             g_time_zone_new                                 (const gchar *identifier);
extern
GTimeZone *             g_time_zone_new_utc                             (void);
extern
GTimeZone *             g_time_zone_new_local                           (void);

extern
GTimeZone *             g_time_zone_ref                                 (GTimeZone   *tz);
extern
void                    g_time_zone_unref                               (GTimeZone   *tz);

extern
gint                    g_time_zone_find_interval                       (GTimeZone   *tz,
                                                                         GTimeType    type,
                                                                         gint64       time_);

extern
gint                    g_time_zone_adjust_time                         (GTimeZone   *tz,
                                                                         GTimeType    type,
                                                                         gint64      *time_);

extern
const gchar *           g_time_zone_get_abbreviation                    (GTimeZone   *tz,
                                                                         gint         interval);
extern
gint32                  g_time_zone_get_offset                          (GTimeZone   *tz,
                                                                         gint         interval);
extern
gboolean                g_time_zone_is_dst                              (GTimeZone   *tz,
                                                                         gint         interval);



#line 90 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtimezone.h"
#line 32 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdatetime.h"























































typedef gint64 GTimeSpan;









typedef struct _GDateTime GDateTime;

extern
void                    g_date_time_unref                               (GDateTime      *datetime);
extern
GDateTime *             g_date_time_ref                                 (GDateTime      *datetime);

extern
GDateTime *             g_date_time_new_now                             (GTimeZone      *tz);
extern
GDateTime *             g_date_time_new_now_local                       (void);
extern
GDateTime *             g_date_time_new_now_utc                         (void);

extern
GDateTime *             g_date_time_new_from_unix_local                 (gint64          t);
extern
GDateTime *             g_date_time_new_from_unix_utc                   (gint64          t);

extern
GDateTime *             g_date_time_new_from_timeval_local              (const GTimeVal *tv);
extern
GDateTime *             g_date_time_new_from_timeval_utc                (const GTimeVal *tv);

extern
GDateTime *             g_date_time_new                                 (GTimeZone      *tz,
                                                                         gint            year,
                                                                         gint            month,
                                                                         gint            day,
                                                                         gint            hour,
                                                                         gint            minute,
                                                                         gdouble         seconds);
extern
GDateTime *             g_date_time_new_local                           (gint            year,
                                                                         gint            month,
                                                                         gint            day,
                                                                         gint            hour,
                                                                         gint            minute,
                                                                         gdouble         seconds);
extern
GDateTime *             g_date_time_new_utc                             (gint            year,
                                                                         gint            month,
                                                                         gint            day,
                                                                         gint            hour,
                                                                         gint            minute,
                                                                         gdouble         seconds);

extern

GDateTime *             g_date_time_add                                 (GDateTime      *datetime,
                                                                         GTimeSpan       timespan);

extern

GDateTime *             g_date_time_add_years                           (GDateTime      *datetime,
                                                                         gint            years);
extern

GDateTime *             g_date_time_add_months                          (GDateTime      *datetime,
                                                                         gint            months);
extern

GDateTime *             g_date_time_add_weeks                           (GDateTime      *datetime,
                                                                         gint            weeks);
extern

GDateTime *             g_date_time_add_days                            (GDateTime      *datetime,
                                                                         gint            days);

extern

GDateTime *             g_date_time_add_hours                           (GDateTime      *datetime,
                                                                         gint            hours);
extern

GDateTime *             g_date_time_add_minutes                         (GDateTime      *datetime,
                                                                         gint            minutes);
extern

GDateTime *             g_date_time_add_seconds                         (GDateTime      *datetime,
                                                                         gdouble         seconds);

extern

GDateTime *             g_date_time_add_full                            (GDateTime      *datetime,
                                                                         gint            years,
                                                                         gint            months,
                                                                         gint            days,
                                                                         gint            hours,
                                                                         gint            minutes,
                                                                         gdouble         seconds);

extern
gint                    g_date_time_compare                             (gconstpointer   dt1,
                                                                         gconstpointer   dt2);
extern
GTimeSpan               g_date_time_difference                          (GDateTime      *end,
                                                                         GDateTime      *begin);
extern
guint                   g_date_time_hash                                (gconstpointer   datetime);
extern
gboolean                g_date_time_equal                               (gconstpointer   dt1,
                                                                         gconstpointer   dt2);

extern
void                    g_date_time_get_ymd                             (GDateTime      *datetime,
                                                                         gint           *year,
                                                                         gint           *month,
                                                                         gint           *day);

extern
gint                    g_date_time_get_year                            (GDateTime      *datetime);
extern
gint                    g_date_time_get_month                           (GDateTime      *datetime);
extern
gint                    g_date_time_get_day_of_month                    (GDateTime      *datetime);

extern
gint                    g_date_time_get_week_numbering_year             (GDateTime      *datetime);
extern
gint                    g_date_time_get_week_of_year                    (GDateTime      *datetime);
extern
gint                    g_date_time_get_day_of_week                     (GDateTime      *datetime);

extern
gint                    g_date_time_get_day_of_year                     (GDateTime      *datetime);

extern
gint                    g_date_time_get_hour                            (GDateTime      *datetime);
extern
gint                    g_date_time_get_minute                          (GDateTime      *datetime);
extern
gint                    g_date_time_get_second                          (GDateTime      *datetime);
extern
gint                    g_date_time_get_microsecond                     (GDateTime      *datetime);
extern
gdouble                 g_date_time_get_seconds                         (GDateTime      *datetime);

extern
gint64                  g_date_time_to_unix                             (GDateTime      *datetime);
extern
gboolean                g_date_time_to_timeval                          (GDateTime      *datetime,
                                                                         GTimeVal       *tv);

extern
GTimeSpan               g_date_time_get_utc_offset                      (GDateTime      *datetime);
extern
const gchar *           g_date_time_get_timezone_abbreviation           (GDateTime      *datetime);
extern
gboolean                g_date_time_is_daylight_savings                 (GDateTime      *datetime);

extern
GDateTime *             g_date_time_to_timezone                         (GDateTime      *datetime,
                                                                         GTimeZone      *tz);
extern
GDateTime *             g_date_time_to_local                            (GDateTime      *datetime);
extern
GDateTime *             g_date_time_to_utc                              (GDateTime      *datetime);

extern
gchar *                 g_date_time_format                              (GDateTime      *datetime,
                                                                         const gchar    *format) ;



#line 263 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdatetime.h"
#line 45 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdir.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdir.h"









typedef struct _GDir GDir;

extern
GDir    *                g_dir_open           (const gchar  *path,
					       guint         flags,
					       GError      **error);
extern
const gchar *            g_dir_read_name      (GDir         *dir);
extern
void                     g_dir_rewind         (GDir         *dir);
extern
void                     g_dir_close          (GDir         *dir);






extern
GDir        *g_dir_open_utf8      (const gchar  *path,
                                   guint         flags,
                                   GError      **error);
extern
const gchar *g_dir_read_name_utf8 (GDir         *dir);
#line 62 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdir.h"
#line 63 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdir.h"



#line 67 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gdir.h"
#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/genviron.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/genviron.h"





extern
const gchar * g_getenv           (const gchar  *variable);
extern
gboolean      g_setenv           (const gchar  *variable,
                                  const gchar  *value,
                                  gboolean      overwrite);
extern
void          g_unsetenv         (const gchar  *variable);
extern
gchar **      g_listenv          (void);

extern
gchar **      g_get_environ      (void);
extern
const gchar * g_environ_getenv   (gchar       **envp,
                                  const gchar  *variable);
extern
gchar **      g_environ_setenv   (gchar       **envp,
                                  const gchar  *variable,
                                  const gchar  *value,
                                  gboolean      overwrite) ;
extern
gchar **      g_environ_unsetenv (gchar       **envp,
                                  const gchar  *variable) ;







extern
const gchar *g_getenv_utf8   (const gchar  *variable);
extern
gboolean     g_setenv_utf8   (const gchar  *variable,
                              const gchar  *value,
                              gboolean      overwrite);
extern
void         g_unsetenv_utf8 (const gchar  *variable);
#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/genviron.h"
#line 77 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/genviron.h"


#line 80 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/genviron.h"
#line 47 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"







typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_NOSYS,
  G_FILE_ERROR_FAILED
} GFileError;





typedef enum
{
  G_FILE_TEST_IS_REGULAR    = 1 << 0,
  G_FILE_TEST_IS_SYMLINK    = 1 << 1,
  G_FILE_TEST_IS_DIR        = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS        = 1 << 4
} GFileTest;

extern
GQuark     g_file_error_quark      (void);

extern
GFileError g_file_error_from_errno (gint err_no);

extern
gboolean g_file_test         (const gchar  *filename,
                              GFileTest     test);
extern
gboolean g_file_get_contents (const gchar  *filename,
                              gchar       **contents,
                              gsize        *length,
                              GError      **error);
extern
gboolean g_file_set_contents (const gchar *filename,
                              const gchar *contents,
                              gssize         length,
                              GError       **error);
extern
gchar   *g_file_read_link    (const gchar  *filename,
                              GError      **error);


extern
gchar   *g_mkdtemp            (gchar        *tmpl);
extern
gchar   *g_mkdtemp_full       (gchar        *tmpl,
                               gint          mode);


extern
gint     g_mkstemp            (gchar        *tmpl);
extern
gint     g_mkstemp_full       (gchar        *tmpl,
                               gint          flags,
                               gint          mode);


extern
gint     g_file_open_tmp      (const gchar  *tmpl,
                               gchar       **name_used,
                               GError      **error);
extern
gchar   *g_dir_make_tmp       (const gchar  *tmpl,
                               GError      **error);

extern
gchar   *g_build_path         (const gchar *separator,
                               const gchar *first_element,
                               ...)  ;
extern
gchar   *g_build_pathv        (const gchar  *separator,
                               gchar       **args) ;

extern
gchar   *g_build_filename     (const gchar *first_element,
                               ...)  ;
extern
gchar   *g_build_filenamev    (gchar      **args) ;

extern
gint     g_mkdir_with_parents (const gchar *pathname,
                               gint         mode);





















#line 160 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"

extern
gboolean     g_path_is_absolute (const gchar *file_name);
extern
const gchar *g_path_skip_root   (const gchar *file_name);

__declspec(deprecated("is deprecated. Use '" "g_path_get_basename" "' instead")) extern
const gchar *g_basename         (const gchar *file_name);


#line 171 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"

extern
gchar *g_get_current_dir   (void);
extern
gchar *g_path_get_basename (const gchar *file_name) ;
extern
gchar *g_path_get_dirname  (const gchar *file_name) ;









extern
gboolean g_file_test_utf8         (const gchar  *filename,
                                   GFileTest     test);
extern
gboolean g_file_get_contents_utf8 (const gchar  *filename,
                                   gchar       **contents,
                                   gsize        *length,
                                   GError      **error);
extern
gint     g_mkstemp_utf8           (gchar        *tmpl);
extern
gint     g_file_open_tmp_utf8     (const gchar  *tmpl,
                                   gchar       **name_used,
                                   GError      **error);
extern
gchar   *g_get_current_dir_utf8   (void);
#line 204 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"
#line 205 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"



#line 209 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gfileutils.h"
#line 49 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ggettext.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ggettext.h"





extern
const gchar *g_strip_context (const gchar *msgid,
                              const gchar *msgval) ;

extern
const gchar *g_dgettext      (const gchar *domain,
                              const gchar *msgid) ;
extern
const gchar *g_dcgettext     (const gchar *domain,
                              const gchar *msgid,
                              gint         category) ;
extern
const gchar *g_dngettext     (const gchar *domain,
                              const gchar *msgid,
                              const gchar *msgid_plural,
                              gulong       n) ;
extern
const gchar *g_dpgettext     (const gchar *domain,
                              const gchar *msgctxtid,
                              gsize        msgidoffset) ;
extern
const gchar *g_dpgettext2    (const gchar *domain,
                              const gchar *context,
                              const gchar *msgid) ;



#line 64 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ggettext.h"
#line 50 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghash.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghash.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glist.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glist.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmem.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmem.h"




















typedef struct _GMemVTable GMemVTable;












#line 65 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmem.h"





extern
void	 g_free	          (gpointer	 mem);

extern
void     g_clear_pointer  (gpointer      *pp,
                           GDestroyNotify destroy);

extern
gpointer g_malloc         (gsize	 n_bytes)  ;
extern
gpointer g_malloc0        (gsize	 n_bytes)  ;
extern
gpointer g_realloc        (gpointer	 mem,
			   gsize	 n_bytes) ;
extern
gpointer g_try_malloc     (gsize	 n_bytes)  ;
extern
gpointer g_try_malloc0    (gsize	 n_bytes)  ;
extern
gpointer g_try_realloc    (gpointer	 mem,
			   gsize	 n_bytes) ;

extern
gpointer g_malloc_n       (gsize	 n_blocks,
			   gsize	 n_block_bytes)  ;
extern
gpointer g_malloc0_n      (gsize	 n_blocks,
			   gsize	 n_block_bytes)  ;
extern
gpointer g_realloc_n      (gpointer	 mem,
			   gsize	 n_blocks,
			   gsize	 n_block_bytes) ;
extern
gpointer g_try_malloc_n   (gsize	 n_blocks,
			   gsize	 n_block_bytes)  ;
extern
gpointer g_try_malloc0_n  (gsize	 n_blocks,
			   gsize	 n_block_bytes)  ;
extern
gpointer g_try_realloc_n  (gpointer	 mem,
			   gsize	 n_blocks,
			   gsize	 n_block_bytes) ;









































































static inline gpointer
g_steal_pointer (gpointer pp)
{
  gpointer *ptr = (gpointer *) pp;
  gpointer ref;

  ref = *ptr;
  *ptr = ((void *)0);

  return ref;
}






































#line 235 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmem.h"








#line 244 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmem.h"




































































































struct _GMemVTable {
  gpointer (*malloc)      (gsize    n_bytes);
  gpointer (*realloc)     (gpointer mem,
			   gsize    n_bytes);
  void     (*free)        (gpointer mem);
  
  gpointer (*calloc)      (gsize    n_blocks,
			   gsize    n_block_bytes);
  gpointer (*try_malloc)  (gsize    n_bytes);
  gpointer (*try_realloc) (gpointer mem,
			   gsize    n_bytes);
};
__declspec(deprecated) extern
void	 g_mem_set_vtable (GMemVTable	*vtable);
__declspec(deprecated) extern
gboolean g_mem_is_system_malloc (void);

extern __declspec(dllimport) gboolean g_mem_gc_friendly;



extern __declspec(dllimport) GMemVTable	*glib_mem_profiler_table;
__declspec(deprecated) extern
void	g_mem_profile	(void);



#line 372 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmem.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glist.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gnode.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gnode.h"





typedef struct _GNode		GNode;


typedef enum
{
  G_TRAVERSE_LEAVES     = 1 << 0,
  G_TRAVERSE_NON_LEAVES = 1 << 1,
  G_TRAVERSE_ALL        = G_TRAVERSE_LEAVES | G_TRAVERSE_NON_LEAVES,
  G_TRAVERSE_MASK       = 0x03,
  G_TRAVERSE_LEAFS      = G_TRAVERSE_LEAVES,
  G_TRAVERSE_NON_LEAFS  = G_TRAVERSE_NON_LEAVES
} GTraverseFlags;


typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;

typedef gboolean	(*GNodeTraverseFunc)	(GNode	       *node,
						 gpointer	data);
typedef void		(*GNodeForeachFunc)	(GNode	       *node,
						 gpointer	data);













typedef gpointer	(*GCopyFunc)            (gconstpointer  src,
                                                 gpointer       data);



struct _GNode
{
  gpointer data;
  GNode	  *next;
  GNode	  *prev;
  GNode	  *parent;
  GNode	  *children;
};

























extern
GNode*	 g_node_new		(gpointer	   data);
extern
void	 g_node_destroy		(GNode		  *root);
extern
void	 g_node_unlink		(GNode		  *node);
extern
GNode*   g_node_copy_deep       (GNode            *node,
				 GCopyFunc         copy_func,
				 gpointer          data);
extern
GNode*   g_node_copy            (GNode            *node);
extern
GNode*	 g_node_insert		(GNode		  *parent,
				 gint		   position,
				 GNode		  *node);
extern
GNode*	 g_node_insert_before	(GNode		  *parent,
				 GNode		  *sibling,
				 GNode		  *node);
extern
GNode*   g_node_insert_after    (GNode            *parent,
				 GNode            *sibling,
				 GNode            *node); 
extern
GNode*	 g_node_prepend		(GNode		  *parent,
				 GNode		  *node);
extern
guint	 g_node_n_nodes		(GNode		  *root,
				 GTraverseFlags	   flags);
extern
GNode*	 g_node_get_root	(GNode		  *node);
extern
gboolean g_node_is_ancestor	(GNode		  *node,
				 GNode		  *descendant);
extern
guint	 g_node_depth		(GNode		  *node);
extern
GNode*	 g_node_find		(GNode		  *root,
				 GTraverseType	   order,
				 GTraverseFlags	   flags,
				 gpointer	   data);



















































































extern
void	 g_node_traverse	(GNode		  *root,
				 GTraverseType	   order,
				 GTraverseFlags	   flags,
				 gint		   max_depth,
				 GNodeTraverseFunc func,
				 gpointer	   data);






extern
guint	 g_node_max_height	 (GNode *root);

extern
void	 g_node_children_foreach (GNode		  *node,
				  GTraverseFlags   flags,
				  GNodeForeachFunc func,
				  gpointer	   data);
extern
void	 g_node_reverse_children (GNode		  *node);
extern
guint	 g_node_n_children	 (GNode		  *node);
extern
GNode*	 g_node_nth_child	 (GNode		  *node,
				  guint		   n);
extern
GNode*	 g_node_last_child	 (GNode		  *node);
extern
GNode*	 g_node_find_child	 (GNode		  *node,
				  GTraverseFlags   flags,
				  gpointer	   data);
extern
gint	 g_node_child_position	 (GNode		  *node,
				  GNode		  *child);
extern
gint	 g_node_child_index	 (GNode		  *node,
				  gpointer	   data);

extern
GNode*	 g_node_first_sibling	 (GNode		  *node);
extern
GNode*	 g_node_last_sibling	 (GNode		  *node);







































#line 323 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gnode.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glist.h"



typedef struct _GList GList;

struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};



extern
GList*   g_list_alloc                   (void) ;
extern
void     g_list_free                    (GList            *list);
extern
void     g_list_free_1                  (GList            *list);

extern
void     g_list_free_full               (GList            *list,
					 GDestroyNotify    free_func);
extern
GList*   g_list_append                  (GList            *list,
					 gpointer          data) ;
extern
GList*   g_list_prepend                 (GList            *list,
					 gpointer          data) ;
extern
GList*   g_list_insert                  (GList            *list,
					 gpointer          data,
					 gint              position) ;
extern
GList*   g_list_insert_sorted           (GList            *list,
					 gpointer          data,
					 GCompareFunc      func) ;
extern
GList*   g_list_insert_sorted_with_data (GList            *list,
					 gpointer          data,
					 GCompareDataFunc  func,
					 gpointer          user_data) ;
extern
GList*   g_list_insert_before           (GList            *list,
					 GList            *sibling,
					 gpointer          data) ;
extern
GList*   g_list_concat                  (GList            *list1,
					 GList            *list2) ;
extern
GList*   g_list_remove                  (GList            *list,
					 gconstpointer     data) ;
extern
GList*   g_list_remove_all              (GList            *list,
					 gconstpointer     data) ;
extern
GList*   g_list_remove_link             (GList            *list,
					 GList            *llink) ;
extern
GList*   g_list_delete_link             (GList            *list,
					 GList            *link_) ;
extern
GList*   g_list_reverse                 (GList            *list) ;
extern
GList*   g_list_copy                    (GList            *list) ;

extern
GList*   g_list_copy_deep               (GList            *list,
					 GCopyFunc         func,
					 gpointer          user_data) ;

extern
GList*   g_list_nth                     (GList            *list,
					 guint             n);
extern
GList*   g_list_nth_prev                (GList            *list,
					 guint             n);
extern
GList*   g_list_find                    (GList            *list,
					 gconstpointer     data);
extern
GList*   g_list_find_custom             (GList            *list,
					 gconstpointer     data,
					 GCompareFunc      func);
extern
gint     g_list_position                (GList            *list,
					 GList            *llink);
extern
gint     g_list_index                   (GList            *list,
					 gconstpointer     data);
extern
GList*   g_list_last                    (GList            *list);
extern
GList*   g_list_first                   (GList            *list);
extern
guint    g_list_length                  (GList            *list);
extern
void     g_list_foreach                 (GList            *list,
					 GFunc             func,
					 gpointer          user_data);
extern
GList*   g_list_sort                    (GList            *list,
					 GCompareFunc      compare_func) ;
extern
GList*   g_list_sort_with_data          (GList            *list,
					 GCompareDataFunc  compare_func,
					 gpointer          user_data)  ;
extern
gpointer g_list_nth_data                (GList            *list,
					 guint             n);







#line 153 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glist.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghash.h"



typedef struct _GHashTable  GHashTable;

typedef gboolean  (*GHRFunc)  (gpointer  key,
                               gpointer  value,
                               gpointer  user_data);

typedef struct _GHashTableIter GHashTableIter;

struct _GHashTableIter
{
  
  gpointer      dummy1;
  gpointer      dummy2;
  gpointer      dummy3;
  int           dummy4;
  gboolean      dummy5;
  gpointer      dummy6;
};

extern
GHashTable* g_hash_table_new               (GHashFunc       hash_func,
                                            GEqualFunc      key_equal_func);
extern
GHashTable* g_hash_table_new_full          (GHashFunc       hash_func,
                                            GEqualFunc      key_equal_func,
                                            GDestroyNotify  key_destroy_func,
                                            GDestroyNotify  value_destroy_func);
extern
void        g_hash_table_destroy           (GHashTable     *hash_table);
extern
gboolean    g_hash_table_insert            (GHashTable     *hash_table,
                                            gpointer        key,
                                            gpointer        value);
extern
gboolean    g_hash_table_replace           (GHashTable     *hash_table,
                                            gpointer        key,
                                            gpointer        value);
extern
gboolean    g_hash_table_add               (GHashTable     *hash_table,
                                            gpointer        key);
extern
gboolean    g_hash_table_remove            (GHashTable     *hash_table,
                                            gconstpointer   key);
extern
void        g_hash_table_remove_all        (GHashTable     *hash_table);
extern
gboolean    g_hash_table_steal             (GHashTable     *hash_table,
                                            gconstpointer   key);
extern
void        g_hash_table_steal_all         (GHashTable     *hash_table);
extern
gpointer    g_hash_table_lookup            (GHashTable     *hash_table,
                                            gconstpointer   key);
extern
gboolean    g_hash_table_contains          (GHashTable     *hash_table,
                                            gconstpointer   key);
extern
gboolean    g_hash_table_lookup_extended   (GHashTable     *hash_table,
                                            gconstpointer   lookup_key,
                                            gpointer       *orig_key,
                                            gpointer       *value);
extern
void        g_hash_table_foreach           (GHashTable     *hash_table,
                                            GHFunc          func,
                                            gpointer        user_data);
extern
gpointer    g_hash_table_find              (GHashTable     *hash_table,
                                            GHRFunc         predicate,
                                            gpointer        user_data);
extern
guint       g_hash_table_foreach_remove    (GHashTable     *hash_table,
                                            GHRFunc         func,
                                            gpointer        user_data);
extern
guint       g_hash_table_foreach_steal     (GHashTable     *hash_table,
                                            GHRFunc         func,
                                            gpointer        user_data);
extern
guint       g_hash_table_size              (GHashTable     *hash_table);
extern
GList *     g_hash_table_get_keys          (GHashTable     *hash_table);
extern
GList *     g_hash_table_get_values        (GHashTable     *hash_table);
extern
gpointer *  g_hash_table_get_keys_as_array (GHashTable     *hash_table,
                                            guint          *length);

extern
void        g_hash_table_iter_init         (GHashTableIter *iter,
                                            GHashTable     *hash_table);
extern
gboolean    g_hash_table_iter_next         (GHashTableIter *iter,
                                            gpointer       *key,
                                            gpointer       *value);
extern
GHashTable* g_hash_table_iter_get_hash_table (GHashTableIter *iter);
extern
void        g_hash_table_iter_remove       (GHashTableIter *iter);
extern
void        g_hash_table_iter_replace      (GHashTableIter *iter,
                                            gpointer        value);
extern
void        g_hash_table_iter_steal        (GHashTableIter *iter);

extern
GHashTable* g_hash_table_ref               (GHashTable     *hash_table);
extern
void        g_hash_table_unref             (GHashTable     *hash_table);




#line 150 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghash.h"



extern
gboolean g_str_equal    (gconstpointer  v1,
                         gconstpointer  v2);
extern
guint    g_str_hash     (gconstpointer  v);

extern
gboolean g_int_equal    (gconstpointer  v1,
                         gconstpointer  v2);
extern
guint    g_int_hash     (gconstpointer  v);

extern
gboolean g_int64_equal  (gconstpointer  v1,
                         gconstpointer  v2);
extern
guint    g_int64_hash   (gconstpointer  v);

extern
gboolean g_double_equal (gconstpointer  v1,
                         gconstpointer  v2);
extern
guint    g_double_hash  (gconstpointer  v);

extern
guint    g_direct_hash  (gconstpointer  v) ;
extern
gboolean g_direct_equal (gconstpointer  v1,
                         gconstpointer  v2) ;



#line 186 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghash.h"
#line 51 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghmac.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghmac.h"















typedef struct _GHmac       GHmac;

extern
GHmac *               g_hmac_new                    (GChecksumType  digest_type,
                                                     const guchar  *key,
                                                     gsize          key_len);
extern
GHmac *               g_hmac_copy                   (const GHmac   *hmac);
extern
GHmac *               g_hmac_ref                    (GHmac         *hmac);
extern
void                  g_hmac_unref                  (GHmac         *hmac);
extern
void                  g_hmac_update                 (GHmac         *hmac,
                                                     const guchar  *data,
                                                     gssize         length);
extern
const gchar *         g_hmac_get_string             (GHmac         *hmac);
extern
void                  g_hmac_get_digest             (GHmac         *hmac,
                                                     guint8        *buffer,
                                                     gsize         *digest_len);

extern
gchar                *g_compute_hmac_for_data       (GChecksumType  digest_type,
                                                     const guchar  *key,
                                                     gsize          key_len,
                                                     const guchar  *data,
                                                     gsize          length);
extern
gchar                *g_compute_hmac_for_string     (GChecksumType  digest_type,
                                                     const guchar  *key,
                                                     gsize          key_len,
                                                     const gchar   *str,
                                                     gssize         length);
extern
gchar               *g_compute_hmac_for_bytes       (GChecksumType  digest_type,
                                                     GBytes        *key,
                                                     GBytes        *data);




#line 84 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghmac.h"
#line 52 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghook.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghook.h"







typedef struct _GHook		GHook;
typedef struct _GHookList	GHookList;

typedef gint		(*GHookCompareFunc)	(GHook		*new_hook,
						 GHook		*sibling);
typedef gboolean	(*GHookFindFunc)	(GHook		*hook,
						 gpointer	 data);
typedef void		(*GHookMarshaller)	(GHook		*hook,
						 gpointer	 marshal_data);
typedef gboolean	(*GHookCheckMarshaller)	(GHook		*hook,
						 gpointer	 marshal_data);
typedef void		(*GHookFunc)		(gpointer	 data);
typedef gboolean	(*GHookCheckFunc)	(gpointer	 data);
typedef void		(*GHookFinalizeFunc)	(GHookList      *hook_list,
						 GHook          *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE	    = 1 << 0,
  G_HOOK_FLAG_IN_CALL	    = 1 << 1,
  G_HOOK_FLAG_MASK	    = 0x0f
} GHookFlagMask;




struct _GHookList
{
  gulong	    seq_id;
  guint		    hook_size : 16;
  guint		    is_setup : 1;
  GHook		   *hooks;
  gpointer	    dummy3;
  GHookFinalizeFunc finalize_hook;
  gpointer	    dummy[2];
};
struct _GHook
{
  gpointer	 data;
  GHook		*next;
  GHook		*prev;
  guint		 ref_count;
  gulong	 hook_id;
  guint		 flags;
  gpointer	 func;
  GDestroyNotify destroy;
};




















extern
void	 g_hook_list_init		(GHookList		*hook_list,
					 guint			 hook_size);
extern
void	 g_hook_list_clear		(GHookList		*hook_list);
extern
GHook*	 g_hook_alloc			(GHookList		*hook_list);
extern
void	 g_hook_free			(GHookList		*hook_list,
					 GHook			*hook);
extern
GHook *	 g_hook_ref			(GHookList		*hook_list,
					 GHook			*hook);
extern
void	 g_hook_unref			(GHookList		*hook_list,
					 GHook			*hook);
extern
gboolean g_hook_destroy			(GHookList		*hook_list,
					 gulong			 hook_id);
extern
void	 g_hook_destroy_link		(GHookList		*hook_list,
					 GHook			*hook);
extern
void	 g_hook_prepend			(GHookList		*hook_list,
					 GHook			*hook);
extern
void	 g_hook_insert_before		(GHookList		*hook_list,
					 GHook			*sibling,
					 GHook			*hook);
extern
void	 g_hook_insert_sorted		(GHookList		*hook_list,
					 GHook			*hook,
					 GHookCompareFunc	 func);
extern
GHook*	 g_hook_get			(GHookList		*hook_list,
					 gulong			 hook_id);
extern
GHook*	 g_hook_find			(GHookList		*hook_list,
					 gboolean		 need_valids,
					 GHookFindFunc		 func,
					 gpointer		 data);
extern
GHook*	 g_hook_find_data		(GHookList		*hook_list,
					 gboolean		 need_valids,
					 gpointer		 data);
extern
GHook*	 g_hook_find_func		(GHookList		*hook_list,
					 gboolean		 need_valids,
					 gpointer		 func);
extern
GHook*	 g_hook_find_func_data		(GHookList		*hook_list,
					 gboolean		 need_valids,
					 gpointer		 func,
					 gpointer		 data);

extern
GHook*	 g_hook_first_valid		(GHookList		*hook_list,
					 gboolean		 may_be_in_call);



extern
GHook*	 g_hook_next_valid		(GHookList		*hook_list,
					 GHook			*hook,
					 gboolean		 may_be_in_call);

extern
gint	 g_hook_compare_ids		(GHook			*new_hook,
					 GHook			*sibling);





extern
void	 g_hook_list_invoke		(GHookList		*hook_list,
					 gboolean		 may_recurse);



extern
void	 g_hook_list_invoke_check	(GHookList		*hook_list,
					 gboolean		 may_recurse);


extern
void	 g_hook_list_marshal		(GHookList		*hook_list,
					 gboolean		 may_recurse,
					 GHookMarshaller	 marshaller,
					 gpointer		 marshal_data);
extern
void	 g_hook_list_marshal_check	(GHookList		*hook_list,
					 gboolean		 may_recurse,
					 GHookCheckMarshaller	 marshaller,
					 gpointer		 marshal_data);



#line 203 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghook.h"
#line 53 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghostutils.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghostutils.h"





extern
gboolean  g_hostname_is_non_ascii     (const gchar *hostname);
extern
gboolean  g_hostname_is_ascii_encoded (const gchar *hostname);
extern
gboolean  g_hostname_is_ip_address    (const gchar *hostname);

extern
gchar    *g_hostname_to_ascii         (const gchar *hostname);
extern
gchar    *g_hostname_to_unicode       (const gchar *hostname);



#line 44 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/ghostutils.h"
#line 54 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmain.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmain.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpoll.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpoll.h"



































typedef struct _GPollFD GPollFD;














typedef gint    (*GPollFunc)    (GPollFD *ufds,
                                 guint    nfsd,
                                 gint     timeout_);














struct _GPollFD
{


  gint64	fd;
#line 97 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpoll.h"


#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpoll.h"
  gushort 	events;
  gushort 	revents;
};









extern
gint
g_poll (GPollFD *fds,
	guint    nfds,
	gint     timeout);



#line 121 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpoll.h"
#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmain.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gslist.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gslist.h"






typedef struct _GSList GSList;

struct _GSList
{
  gpointer data;
  GSList *next;
};



extern
GSList*  g_slist_alloc                   (void) ;
extern
void     g_slist_free                    (GSList           *list);
extern
void     g_slist_free_1                  (GSList           *list);

extern
void     g_slist_free_full               (GSList           *list,
					  GDestroyNotify    free_func);
extern
GSList*  g_slist_append                  (GSList           *list,
					  gpointer          data) ;
extern
GSList*  g_slist_prepend                 (GSList           *list,
					  gpointer          data) ;
extern
GSList*  g_slist_insert                  (GSList           *list,
					  gpointer          data,
					  gint              position) ;
extern
GSList*  g_slist_insert_sorted           (GSList           *list,
					  gpointer          data,
					  GCompareFunc      func) ;
extern
GSList*  g_slist_insert_sorted_with_data (GSList           *list,
					  gpointer          data,
					  GCompareDataFunc  func,
					  gpointer          user_data) ;
extern
GSList*  g_slist_insert_before           (GSList           *slist,
					  GSList           *sibling,
					  gpointer          data) ;
extern
GSList*  g_slist_concat                  (GSList           *list1,
					  GSList           *list2) ;
extern
GSList*  g_slist_remove                  (GSList           *list,
					  gconstpointer     data) ;
extern
GSList*  g_slist_remove_all              (GSList           *list,
					  gconstpointer     data) ;
extern
GSList*  g_slist_remove_link             (GSList           *list,
					  GSList           *link_) ;
extern
GSList*  g_slist_delete_link             (GSList           *list,
					  GSList           *link_) ;
extern
GSList*  g_slist_reverse                 (GSList           *list) ;
extern
GSList*  g_slist_copy                    (GSList           *list) ;

extern
GSList*  g_slist_copy_deep               (GSList            *list,
					  GCopyFunc         func,
					  gpointer          user_data) ;
extern
GSList*  g_slist_nth                     (GSList           *list,
					  guint             n);
extern
GSList*  g_slist_find                    (GSList           *list,
					  gconstpointer     data);
extern
GSList*  g_slist_find_custom             (GSList           *list,
					  gconstpointer     data,
					  GCompareFunc      func);
extern
gint     g_slist_position                (GSList           *list,
					  GSList           *llink);
extern
gint     g_slist_index                   (GSList           *list,
					  gconstpointer     data);
extern
GSList*  g_slist_last                    (GSList           *list);
extern
guint    g_slist_length                  (GSList           *list);
extern
void     g_slist_foreach                 (GSList           *list,
					  GFunc             func,
					  gpointer          user_data);
extern
GSList*  g_slist_sort                    (GSList           *list,
					  GCompareFunc      compare_func) ;
extern
GSList*  g_slist_sort_with_data          (GSList           *list,
					  GCompareDataFunc  compare_func,
					  gpointer          user_data) ;
extern
gpointer g_slist_nth_data                (GSList           *list,
					  guint             n);





#line 144 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gslist.h"
#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmain.h"




typedef enum 
{
  G_IO_IN	=1,
  G_IO_OUT	=4,
  G_IO_PRI	=2,
  G_IO_ERR	=8,
  G_IO_HUP	=16,
  G_IO_NVAL	=32
} GIOCondition;








typedef struct _GMainContext            GMainContext;







typedef struct _GMainLoop               GMainLoop;







typedef struct _GSource                 GSource;
typedef struct _GSourcePrivate          GSourcePrivate;











typedef struct _GSourceCallbackFuncs    GSourceCallbackFuncs;























































typedef struct _GSourceFuncs            GSourceFuncs;



































typedef gboolean (*GSourceFunc)       (gpointer user_data);












typedef void     (*GChildWatchFunc)   (GPid     pid,
                                       gint     status,
                                       gpointer user_data);
struct _GSource
{
  
  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;

  const GSourceFuncs *source_funcs;
  guint ref_count;

  GMainContext *context;

  gint priority;
  guint flags;
  guint source_id;

  GSList *poll_fds;
  
  GSource *prev;
  GSource *next;

  char    *name;

  GSourcePrivate *priv;
};

struct _GSourceCallbackFuncs
{
  void (*ref)   (gpointer     cb_data);
  void (*unref) (gpointer     cb_data);
  void (*get)   (gpointer     cb_data,
                 GSource     *source, 
                 GSourceFunc *func,
                 gpointer    *data);
};







typedef void (*GSourceDummyMarshal) (void);

struct _GSourceFuncs
{
  gboolean (*prepare)  (GSource    *source,
                        gint       *timeout_);
  gboolean (*check)    (GSource    *source);
  gboolean (*dispatch) (GSource    *source,
                        GSourceFunc callback,
                        gpointer    user_data);
  void     (*finalize) (GSource    *source); 

  
  
  GSourceFunc     closure_callback;        
  GSourceDummyMarshal closure_marshal; 
};












































































extern
GMainContext *g_main_context_new       (void);
extern
GMainContext *g_main_context_ref       (GMainContext *context);
extern
void          g_main_context_unref     (GMainContext *context);
extern
GMainContext *g_main_context_default   (void);

extern
gboolean      g_main_context_iteration (GMainContext *context,
                                        gboolean      may_block);
extern
gboolean      g_main_context_pending   (GMainContext *context);



extern
GSource      *g_main_context_find_source_by_id              (GMainContext *context,
                                                             guint         source_id);
extern
GSource      *g_main_context_find_source_by_user_data       (GMainContext *context,
                                                             gpointer      user_data);
extern
GSource      *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
                                                             GSourceFuncs *funcs,
                                                             gpointer      user_data);



extern
void     g_main_context_wakeup  (GMainContext *context);
extern
gboolean g_main_context_acquire (GMainContext *context);
extern
void     g_main_context_release (GMainContext *context);
extern
gboolean g_main_context_is_owner (GMainContext *context);
extern
gboolean g_main_context_wait    (GMainContext *context,
                                 GCond        *cond,
                                 GMutex       *mutex);

extern
gboolean g_main_context_prepare  (GMainContext *context,
                                  gint         *priority);
extern
gint     g_main_context_query    (GMainContext *context,
                                  gint          max_priority,
                                  gint         *timeout_,
                                  GPollFD      *fds,
                                  gint          n_fds);
extern
gboolean     g_main_context_check    (GMainContext *context,
                                      gint          max_priority,
                                      GPollFD      *fds,
                                      gint          n_fds);
extern
void     g_main_context_dispatch (GMainContext *context);

extern
void     g_main_context_set_poll_func (GMainContext *context,
                                       GPollFunc     func);
extern
GPollFunc g_main_context_get_poll_func (GMainContext *context);



extern
void     g_main_context_add_poll    (GMainContext *context,
                                     GPollFD      *fd,
                                     gint          priority);
extern
void     g_main_context_remove_poll (GMainContext *context,
                                     GPollFD      *fd);

extern
gint     g_main_depth               (void);
extern
GSource *g_main_current_source      (void);



extern
void          g_main_context_push_thread_default (GMainContext *context);
extern
void          g_main_context_pop_thread_default  (GMainContext *context);
extern
GMainContext *g_main_context_get_thread_default  (void);
extern
GMainContext *g_main_context_ref_thread_default  (void);



extern
GMainLoop *g_main_loop_new        (GMainContext *context,
                                   gboolean      is_running);
extern
void       g_main_loop_run        (GMainLoop    *loop);
extern
void       g_main_loop_quit       (GMainLoop    *loop);
extern
GMainLoop *g_main_loop_ref        (GMainLoop    *loop);
extern
void       g_main_loop_unref      (GMainLoop    *loop);
extern
gboolean   g_main_loop_is_running (GMainLoop    *loop);
extern
GMainContext *g_main_loop_get_context (GMainLoop    *loop);



extern
GSource *g_source_new             (GSourceFuncs   *source_funcs,
                                   guint           struct_size);
extern
GSource *g_source_ref             (GSource        *source);
extern
void     g_source_unref           (GSource        *source);

extern
guint    g_source_attach          (GSource        *source,
                                   GMainContext   *context);
extern
void     g_source_destroy         (GSource        *source);

extern
void     g_source_set_priority    (GSource        *source,
                                   gint            priority);
extern
gint     g_source_get_priority    (GSource        *source);
extern
void     g_source_set_can_recurse (GSource        *source,
                                   gboolean        can_recurse);
extern
gboolean g_source_get_can_recurse (GSource        *source);
extern
guint    g_source_get_id          (GSource        *source);

extern
GMainContext *g_source_get_context (GSource       *source);

extern
void     g_source_set_callback    (GSource        *source,
                                   GSourceFunc     func,
                                   gpointer        data,
                                   GDestroyNotify  notify);

extern
void     g_source_set_funcs       (GSource        *source,
                                   GSourceFuncs   *funcs);
extern
gboolean g_source_is_destroyed    (GSource        *source);

extern
void                 g_source_set_name       (GSource        *source,
                                              const char     *name);
extern
const char *         g_source_get_name       (GSource        *source);
extern
void                 g_source_set_name_by_id (guint           tag,
                                              const char     *name);

extern
void                 g_source_set_ready_time (GSource        *source,
                                              gint64          ready_time);
extern
gint64               g_source_get_ready_time (GSource        *source);



















extern
void g_source_set_callback_indirect (GSource              *source,
                                     gpointer              callback_data,
                                     GSourceCallbackFuncs *callback_funcs);

extern
void     g_source_add_poll            (GSource        *source,
				       GPollFD        *fd);
extern
void     g_source_remove_poll         (GSource        *source,
				       GPollFD        *fd);

extern
void     g_source_add_child_source    (GSource        *source,
				       GSource        *child_source);
extern
void     g_source_remove_child_source (GSource        *source,
				       GSource        *child_source);

__declspec(deprecated("is deprecated. Use '" "g_source_get_time" "' instead")) extern
void     g_source_get_current_time (GSource        *source,
                                    GTimeVal       *timeval);

extern
gint64   g_source_get_time         (GSource        *source);

 





extern
GSource *g_idle_source_new        (void);
extern
GSource *g_child_watch_source_new (GPid pid);
extern
GSource *g_timeout_source_new     (guint interval);
extern
GSource *g_timeout_source_new_seconds (guint interval);



extern
void   g_get_current_time                 (GTimeVal       *result);
extern
gint64 g_get_monotonic_time               (void);
extern
gint64 g_get_real_time                    (void);



extern
gboolean g_source_remove                     (guint          tag);
extern
gboolean g_source_remove_by_user_data        (gpointer       user_data);
extern
gboolean g_source_remove_by_funcs_user_data  (GSourceFuncs  *funcs,
                                              gpointer       user_data);


extern
guint    g_timeout_add_full         (gint            priority,
                                     guint           interval,
                                     GSourceFunc     function,
                                     gpointer        data,
                                     GDestroyNotify  notify);
extern
guint    g_timeout_add              (guint           interval,
                                     GSourceFunc     function,
                                     gpointer        data);
extern
guint    g_timeout_add_seconds_full (gint            priority,
                                     guint           interval,
                                     GSourceFunc     function,
                                     gpointer        data,
                                     GDestroyNotify  notify);
extern
guint    g_timeout_add_seconds      (guint           interval,
                                     GSourceFunc     function,
                                     gpointer        data);
extern
guint    g_child_watch_add_full     (gint            priority,
                                     GPid            pid,
                                     GChildWatchFunc function,
                                     gpointer        data,
                                     GDestroyNotify  notify);
extern
guint    g_child_watch_add          (GPid            pid,
                                     GChildWatchFunc function,
                                     gpointer        data);
extern
guint    g_idle_add                 (GSourceFunc     function,
                                     gpointer        data);
extern
guint    g_idle_add_full            (gint            priority,
                                     GSourceFunc     function,
                                     gpointer        data,
                                     GDestroyNotify  notify);
extern
gboolean g_idle_remove_by_data      (gpointer        data);

extern
void     g_main_context_invoke_full (GMainContext   *context,
                                     gint            priority,
                                     GSourceFunc     function,
                                     gpointer        data,
                                     GDestroyNotify  notify);
extern
void     g_main_context_invoke      (GMainContext   *context,
                                     GSourceFunc     function,
                                     gpointer        data);


extern __declspec(dllimport) GSourceFuncs g_timeout_funcs;
extern __declspec(dllimport) GSourceFuncs g_child_watch_funcs;
extern __declspec(dllimport) GSourceFuncs g_idle_funcs;







#line 631 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmain.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstring.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstring.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gunicode.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gunicode.h"

































typedef guint32 gunichar;

















typedef guint16 gunichar2;






































typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_SPACING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;










#line 160 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gunicode.h"






















































typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN,
  G_UNICODE_BREAK_NEXT_LINE,
  G_UNICODE_BREAK_WORD_JOINER,
  G_UNICODE_BREAK_HANGUL_L_JAMO,
  G_UNICODE_BREAK_HANGUL_V_JAMO,
  G_UNICODE_BREAK_HANGUL_T_JAMO,
  G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
  G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
  G_UNICODE_BREAK_CLOSE_PARANTHESIS,
  G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
  G_UNICODE_BREAK_HEBREW_LETTER,
  G_UNICODE_BREAK_REGIONAL_INDICATOR,
  G_UNICODE_BREAK_EMOJI_BASE,
  G_UNICODE_BREAK_EMOJI_MODIFIER,
  G_UNICODE_BREAK_ZERO_WIDTH_JOINER
} GUnicodeBreakType;




































































































































































typedef enum
{                         
  G_UNICODE_SCRIPT_INVALID_CODE = -1,
  G_UNICODE_SCRIPT_COMMON       = 0,   
  G_UNICODE_SCRIPT_INHERITED,          
  G_UNICODE_SCRIPT_ARABIC,             
  G_UNICODE_SCRIPT_ARMENIAN,           
  G_UNICODE_SCRIPT_BENGALI,            
  G_UNICODE_SCRIPT_BOPOMOFO,           
  G_UNICODE_SCRIPT_CHEROKEE,           
  G_UNICODE_SCRIPT_COPTIC,             
  G_UNICODE_SCRIPT_CYRILLIC,           
  G_UNICODE_SCRIPT_DESERET,            
  G_UNICODE_SCRIPT_DEVANAGARI,         
  G_UNICODE_SCRIPT_ETHIOPIC,           
  G_UNICODE_SCRIPT_GEORGIAN,           
  G_UNICODE_SCRIPT_GOTHIC,             
  G_UNICODE_SCRIPT_GREEK,              
  G_UNICODE_SCRIPT_GUJARATI,           
  G_UNICODE_SCRIPT_GURMUKHI,           
  G_UNICODE_SCRIPT_HAN,                
  G_UNICODE_SCRIPT_HANGUL,             
  G_UNICODE_SCRIPT_HEBREW,             
  G_UNICODE_SCRIPT_HIRAGANA,           
  G_UNICODE_SCRIPT_KANNADA,            
  G_UNICODE_SCRIPT_KATAKANA,           
  G_UNICODE_SCRIPT_KHMER,              
  G_UNICODE_SCRIPT_LAO,                
  G_UNICODE_SCRIPT_LATIN,              
  G_UNICODE_SCRIPT_MALAYALAM,          
  G_UNICODE_SCRIPT_MONGOLIAN,          
  G_UNICODE_SCRIPT_MYANMAR,            
  G_UNICODE_SCRIPT_OGHAM,              
  G_UNICODE_SCRIPT_OLD_ITALIC,         
  G_UNICODE_SCRIPT_ORIYA,              
  G_UNICODE_SCRIPT_RUNIC,              
  G_UNICODE_SCRIPT_SINHALA,            
  G_UNICODE_SCRIPT_SYRIAC,             
  G_UNICODE_SCRIPT_TAMIL,              
  G_UNICODE_SCRIPT_TELUGU,             
  G_UNICODE_SCRIPT_THAANA,             
  G_UNICODE_SCRIPT_THAI,               
  G_UNICODE_SCRIPT_TIBETAN,            
  G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL, 
  G_UNICODE_SCRIPT_YI,                 
  G_UNICODE_SCRIPT_TAGALOG,            
  G_UNICODE_SCRIPT_HANUNOO,            
  G_UNICODE_SCRIPT_BUHID,              
  G_UNICODE_SCRIPT_TAGBANWA,           

  
  G_UNICODE_SCRIPT_BRAILLE,            
  G_UNICODE_SCRIPT_CYPRIOT,            
  G_UNICODE_SCRIPT_LIMBU,              
  G_UNICODE_SCRIPT_OSMANYA,            
  G_UNICODE_SCRIPT_SHAVIAN,            
  G_UNICODE_SCRIPT_LINEAR_B,           
  G_UNICODE_SCRIPT_TAI_LE,             
  G_UNICODE_SCRIPT_UGARITIC,           

  
  G_UNICODE_SCRIPT_NEW_TAI_LUE,        
  G_UNICODE_SCRIPT_BUGINESE,           
  G_UNICODE_SCRIPT_GLAGOLITIC,         
  G_UNICODE_SCRIPT_TIFINAGH,           
  G_UNICODE_SCRIPT_SYLOTI_NAGRI,       
  G_UNICODE_SCRIPT_OLD_PERSIAN,        
  G_UNICODE_SCRIPT_KHAROSHTHI,         

  
  G_UNICODE_SCRIPT_UNKNOWN,            
  G_UNICODE_SCRIPT_BALINESE,           
  G_UNICODE_SCRIPT_CUNEIFORM,          
  G_UNICODE_SCRIPT_PHOENICIAN,         
  G_UNICODE_SCRIPT_PHAGS_PA,           
  G_UNICODE_SCRIPT_NKO,                

  
  G_UNICODE_SCRIPT_KAYAH_LI,           
  G_UNICODE_SCRIPT_LEPCHA,             
  G_UNICODE_SCRIPT_REJANG,             
  G_UNICODE_SCRIPT_SUNDANESE,          
  G_UNICODE_SCRIPT_SAURASHTRA,         
  G_UNICODE_SCRIPT_CHAM,               
  G_UNICODE_SCRIPT_OL_CHIKI,           
  G_UNICODE_SCRIPT_VAI,                
  G_UNICODE_SCRIPT_CARIAN,             
  G_UNICODE_SCRIPT_LYCIAN,             
  G_UNICODE_SCRIPT_LYDIAN,             

  
  G_UNICODE_SCRIPT_AVESTAN,                
  G_UNICODE_SCRIPT_BAMUM,                  
  G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,   
  G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,       
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,  
  G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN, 
  G_UNICODE_SCRIPT_JAVANESE,               
  G_UNICODE_SCRIPT_KAITHI,                 
  G_UNICODE_SCRIPT_LISU,                   
  G_UNICODE_SCRIPT_MEETEI_MAYEK,           
  G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,      
  G_UNICODE_SCRIPT_OLD_TURKIC,             
  G_UNICODE_SCRIPT_SAMARITAN,              
  G_UNICODE_SCRIPT_TAI_THAM,               
  G_UNICODE_SCRIPT_TAI_VIET,               

  
  G_UNICODE_SCRIPT_BATAK,                  
  G_UNICODE_SCRIPT_BRAHMI,                 
  G_UNICODE_SCRIPT_MANDAIC,                

  
  G_UNICODE_SCRIPT_CHAKMA,                 
  G_UNICODE_SCRIPT_MEROITIC_CURSIVE,       
  G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,   
  G_UNICODE_SCRIPT_MIAO,                   
  G_UNICODE_SCRIPT_SHARADA,                
  G_UNICODE_SCRIPT_SORA_SOMPENG,           
  G_UNICODE_SCRIPT_TAKRI,                  

  
  G_UNICODE_SCRIPT_BASSA_VAH,              
  G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,     
  G_UNICODE_SCRIPT_DUPLOYAN,               
  G_UNICODE_SCRIPT_ELBASAN,                
  G_UNICODE_SCRIPT_GRANTHA,                
  G_UNICODE_SCRIPT_KHOJKI,                 
  G_UNICODE_SCRIPT_KHUDAWADI,              
  G_UNICODE_SCRIPT_LINEAR_A,               
  G_UNICODE_SCRIPT_MAHAJANI,               
  G_UNICODE_SCRIPT_MANICHAEAN,             
  G_UNICODE_SCRIPT_MENDE_KIKAKUI,          
  G_UNICODE_SCRIPT_MODI,                   
  G_UNICODE_SCRIPT_MRO,                    
  G_UNICODE_SCRIPT_NABATAEAN,              
  G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,      
  G_UNICODE_SCRIPT_OLD_PERMIC,             
  G_UNICODE_SCRIPT_PAHAWH_HMONG,           
  G_UNICODE_SCRIPT_PALMYRENE,              
  G_UNICODE_SCRIPT_PAU_CIN_HAU,            
  G_UNICODE_SCRIPT_PSALTER_PAHLAVI,        
  G_UNICODE_SCRIPT_SIDDHAM,                
  G_UNICODE_SCRIPT_TIRHUTA,                
  G_UNICODE_SCRIPT_WARANG_CITI,            

  
  G_UNICODE_SCRIPT_AHOM,                   
  G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,  
  G_UNICODE_SCRIPT_HATRAN,                 
  G_UNICODE_SCRIPT_MULTANI,                
  G_UNICODE_SCRIPT_OLD_HUNGARIAN,          
  G_UNICODE_SCRIPT_SIGNWRITING,            

  
  G_UNICODE_SCRIPT_ADLAM,                  
  G_UNICODE_SCRIPT_BHAIKSUKI,              
  G_UNICODE_SCRIPT_MARCHEN,                
  G_UNICODE_SCRIPT_NEWA,                   
  G_UNICODE_SCRIPT_OSAGE,                  
  G_UNICODE_SCRIPT_TANGUT                  
} GUnicodeScript;

extern
guint32        g_unicode_script_to_iso15924   (GUnicodeScript script);
extern
GUnicodeScript g_unicode_script_from_iso15924 (guint32        iso15924);



extern
gboolean g_unichar_isalnum   (gunichar c) ;
extern
gboolean g_unichar_isalpha   (gunichar c) ;
extern
gboolean g_unichar_iscntrl   (gunichar c) ;
extern
gboolean g_unichar_isdigit   (gunichar c) ;
extern
gboolean g_unichar_isgraph   (gunichar c) ;
extern
gboolean g_unichar_islower   (gunichar c) ;
extern
gboolean g_unichar_isprint   (gunichar c) ;
extern
gboolean g_unichar_ispunct   (gunichar c) ;
extern
gboolean g_unichar_isspace   (gunichar c) ;
extern
gboolean g_unichar_isupper   (gunichar c) ;
extern
gboolean g_unichar_isxdigit  (gunichar c) ;
extern
gboolean g_unichar_istitle   (gunichar c) ;
extern
gboolean g_unichar_isdefined (gunichar c) ;
extern
gboolean g_unichar_iswide    (gunichar c) ;
extern
gboolean g_unichar_iswide_cjk(gunichar c) ;
extern
gboolean g_unichar_iszerowidth(gunichar c) ;
extern
gboolean g_unichar_ismark    (gunichar c) ;



extern
gunichar g_unichar_toupper (gunichar c) ;
extern
gunichar g_unichar_tolower (gunichar c) ;
extern
gunichar g_unichar_totitle (gunichar c) ;



extern
gint g_unichar_digit_value (gunichar c) ;

extern
gint g_unichar_xdigit_value (gunichar c) ;


extern
GUnicodeType g_unichar_type (gunichar c) ;


extern
GUnicodeBreakType g_unichar_break_type (gunichar c) ;


extern
gint g_unichar_combining_class (gunichar uc) ;

extern
gboolean g_unichar_get_mirror_char (gunichar ch,
                                    gunichar *mirrored_ch);

extern
GUnicodeScript g_unichar_get_script (gunichar ch) ;


extern
gboolean g_unichar_validate (gunichar ch) ;


extern
gboolean g_unichar_compose (gunichar  a,
                            gunichar  b,
                            gunichar *ch);
extern
gboolean g_unichar_decompose (gunichar  ch,
                              gunichar *a,
                              gunichar *b);

extern
gsize g_unichar_fully_decompose (gunichar  ch,
                                 gboolean  compat,
                                 gunichar *result,
                                 gsize     result_len);
















extern
void g_unicode_canonical_ordering (gunichar *string,
                                   gsize     len);


__declspec(deprecated) extern
gunichar *g_unicode_canonical_decomposition (gunichar  ch,
                                             gsize    *result_len) ;



extern __declspec(dllimport) const gchar * const g_utf8_skip;














extern
gunichar g_utf8_get_char           (const gchar  *p) ;
extern
gunichar g_utf8_get_char_validated (const  gchar *p,
                                    gssize        max_len) ;

extern
gchar*   g_utf8_offset_to_pointer (const gchar *str,
                                   glong        offset) ;
extern
glong    g_utf8_pointer_to_offset (const gchar *str,
                                   const gchar *pos) ;
extern
gchar*   g_utf8_prev_char         (const gchar *p) ;
extern
gchar*   g_utf8_find_next_char    (const gchar *p,
                                   const gchar *end) ;
extern
gchar*   g_utf8_find_prev_char    (const gchar *str,
                                   const gchar *p) ;

extern
glong    g_utf8_strlen            (const gchar *p,
                                   gssize       max) ;

extern
gchar   *g_utf8_substring         (const gchar *str,
                                   glong        start_pos,
                                   glong        end_pos) ;

extern
gchar   *g_utf8_strncpy           (gchar       *dest,
                                   const gchar *src,
                                   gsize        n);



extern
gchar* g_utf8_strchr  (const gchar *p,
                       gssize       len,
                       gunichar     c);
extern
gchar* g_utf8_strrchr (const gchar *p,
                       gssize       len,
                       gunichar     c);
extern
gchar* g_utf8_strreverse (const gchar *str,
                          gssize len);

extern
gunichar2 *g_utf8_to_utf16     (const gchar      *str,
                                glong             len,
                                glong            *items_read,
                                glong            *items_written,
                                GError          **error) ;
extern
gunichar * g_utf8_to_ucs4      (const gchar      *str,
                                glong             len,
                                glong            *items_read,
                                glong            *items_written,
                                GError          **error) ;
extern
gunichar * g_utf8_to_ucs4_fast (const gchar      *str,
                                glong             len,
                                glong            *items_written) ;
extern
gunichar * g_utf16_to_ucs4     (const gunichar2  *str,
                                glong             len,
                                glong            *items_read,
                                glong            *items_written,
                                GError          **error) ;
extern
gchar*     g_utf16_to_utf8     (const gunichar2  *str,
                                glong             len,
                                glong            *items_read,
                                glong            *items_written,
                                GError          **error) ;
extern
gunichar2 *g_ucs4_to_utf16     (const gunichar   *str,
                                glong             len,
                                glong            *items_read,
                                glong            *items_written,
                                GError          **error) ;
extern
gchar*     g_ucs4_to_utf8      (const gunichar   *str,
                                glong             len,
                                glong            *items_read,
                                glong            *items_written,
                                GError          **error) ;

extern
gint      g_unichar_to_utf8 (gunichar    c,
                             gchar      *outbuf);

extern
gboolean g_utf8_validate (const gchar  *str,
                          gssize        max_len,
                          const gchar **end);

extern
gchar *g_utf8_strup   (const gchar *str,
                       gssize       len) ;
extern
gchar *g_utf8_strdown (const gchar *str,
                       gssize       len) ;
extern
gchar *g_utf8_casefold (const gchar *str,
                        gssize       len) ;

























typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;

extern
gchar *g_utf8_normalize (const gchar   *str,
                         gssize         len,
                         GNormalizeMode mode) ;

extern
gint   g_utf8_collate     (const gchar *str1,
                           const gchar *str2) ;
extern
gchar *g_utf8_collate_key (const gchar *str,
                           gssize       len) ;
extern
gchar *g_utf8_collate_key_for_filename (const gchar *str,
                                        gssize       len) ;

extern
gchar *g_utf8_make_valid (const gchar *str,
                          gssize       len) ;



#line 892 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gunicode.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstring.h"





typedef struct _GString         GString;

struct _GString
{
  gchar  *str;
  gsize len;
  gsize allocated_len;
};

extern
GString*     g_string_new               (const gchar     *init);
extern
GString*     g_string_new_len           (const gchar     *init,
                                         gssize           len);
extern
GString*     g_string_sized_new         (gsize            dfl_size);
extern
gchar*       g_string_free              (GString         *string,
                                         gboolean         free_segment);
extern
GBytes*      g_string_free_to_bytes     (GString         *string);
extern
gboolean     g_string_equal             (const GString   *v,
                                         const GString   *v2);
extern
guint        g_string_hash              (const GString   *str);
extern
GString*     g_string_assign            (GString         *string,
                                         const gchar     *rval);
extern
GString*     g_string_truncate          (GString         *string,
                                         gsize            len);
extern
GString*     g_string_set_size          (GString         *string,
                                         gsize            len);
extern
GString*     g_string_insert_len        (GString         *string,
                                         gssize           pos,
                                         const gchar     *val,
                                         gssize           len);
extern
GString*     g_string_append            (GString         *string,
                                         const gchar     *val);
extern
GString*     g_string_append_len        (GString         *string,
                                         const gchar     *val,
                                         gssize           len);
extern
GString*     g_string_append_c          (GString         *string,
                                         gchar            c);
extern
GString*     g_string_append_unichar    (GString         *string,
                                         gunichar         wc);
extern
GString*     g_string_prepend           (GString         *string,
                                         const gchar     *val);
extern
GString*     g_string_prepend_c         (GString         *string,
                                         gchar            c);
extern
GString*     g_string_prepend_unichar   (GString         *string,
                                         gunichar         wc);
extern
GString*     g_string_prepend_len       (GString         *string,
                                         const gchar     *val,
                                         gssize           len);
extern
GString*     g_string_insert            (GString         *string,
                                         gssize           pos,
                                         const gchar     *val);
extern
GString*     g_string_insert_c          (GString         *string,
                                         gssize           pos,
                                         gchar            c);
extern
GString*     g_string_insert_unichar    (GString         *string,
                                         gssize           pos,
                                         gunichar         wc);
extern
GString*     g_string_overwrite         (GString         *string,
                                         gsize            pos,
                                         const gchar     *val);
extern
GString*     g_string_overwrite_len     (GString         *string,
                                         gsize            pos,
                                         const gchar     *val,
                                         gssize           len);
extern
GString*     g_string_erase             (GString         *string,
                                         gssize           pos,
                                         gssize           len);
extern
GString*     g_string_ascii_down        (GString         *string);
extern
GString*     g_string_ascii_up          (GString         *string);
extern
void         g_string_vprintf           (GString         *string,
                                         const gchar     *format,
                                         va_list          args)
                                         ;
extern
void         g_string_printf            (GString         *string,
                                         const gchar     *format,
                                         ...) ;
extern
void         g_string_append_vprintf    (GString         *string,
                                         const gchar     *format,
                                         va_list          args)
                                         ;
extern
void         g_string_append_printf     (GString         *string,
                                         const gchar     *format,
                                         ...) ;
extern
GString*     g_string_append_uri_escaped (GString         *string,
                                          const gchar     *unescaped,
                                          const gchar     *reserved_chars_allowed,
                                          gboolean         allow_utf8);



static inline GString*
g_string_append_c_inline (GString *gstring,
                          gchar    c)
{
  if (gstring->len + 1 < gstring->allocated_len)
    {
      gstring->str[gstring->len++] = c;
      gstring->str[gstring->len] = 0;
    }
  else
    g_string_insert_c (gstring, -1, c);
  return gstring;
}

#line 175 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstring.h"


__declspec(deprecated) extern
GString *g_string_down (GString *string);
__declspec(deprecated) extern
GString *g_string_up   (GString *string);




#line 186 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstring.h"



#line 190 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstring.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"






typedef struct _GIOChannel	GIOChannel;
typedef struct _GIOFuncs        GIOFuncs;

typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;



typedef enum
{
  
  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,
  
  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;

typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;

typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;

typedef enum
{
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,	
  G_IO_FLAG_IS_WRITABLE = 1 << 3,	
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,      
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,	
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;

struct _GIOChannel
{
  
  gint ref_count;
  GIOFuncs *funcs;

  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;		
  guint line_term_len;		

  gsize buf_size;
  GString *read_buf;		
  GString *encoded_read_buf;    
  GString *write_buf;		
  gchar partial_write_buf[6];	

  

  guint use_buffer     : 1;	
  guint do_encode      : 1;	
  guint close_on_unref : 1;	
  guint is_readable    : 1;	
  guint is_writeable   : 1;	
  guint is_seekable    : 1;	

  gpointer reserved1;	
  gpointer reserved2;	
};

typedef gboolean (*GIOFunc) (GIOChannel   *source,
			     GIOCondition  condition,
			     gpointer      data);
struct _GIOFuncs
{
  GIOStatus (*io_read)           (GIOChannel   *channel, 
			          gchar        *buf, 
				  gsize         count,
				  gsize        *bytes_read,
				  GError      **err);
  GIOStatus (*io_write)          (GIOChannel   *channel, 
				  const gchar  *buf, 
				  gsize         count,
				  gsize        *bytes_written,
				  GError      **err);
  GIOStatus (*io_seek)           (GIOChannel   *channel, 
				  gint64        offset, 
				  GSeekType     type,
				  GError      **err);
  GIOStatus  (*io_close)         (GIOChannel   *channel,
				  GError      **err);
  GSource*   (*io_create_watch)  (GIOChannel   *channel,
				  GIOCondition  condition);
  void       (*io_free)          (GIOChannel   *channel);
  GIOStatus  (*io_set_flags)     (GIOChannel   *channel,
                                  GIOFlags      flags,
				  GError      **err);
  GIOFlags   (*io_get_flags)     (GIOChannel   *channel);
};

extern
void        g_io_channel_init   (GIOChannel    *channel);
extern
GIOChannel *g_io_channel_ref    (GIOChannel    *channel);
extern
void        g_io_channel_unref  (GIOChannel    *channel);

__declspec(deprecated("is deprecated. Use '" "g_io_channel_read_chars" "' instead")) extern
GIOError    g_io_channel_read   (GIOChannel    *channel,
                                 gchar         *buf,
                                 gsize          count,
                                 gsize         *bytes_read);

__declspec(deprecated("is deprecated. Use '" "g_io_channel_write_chars" "' instead")) extern
GIOError  g_io_channel_write    (GIOChannel    *channel,
                                 const gchar   *buf,
                                 gsize          count,
                                 gsize         *bytes_written);

__declspec(deprecated("is deprecated. Use '" "g_io_channel_seek_position" "' instead")) extern
GIOError  g_io_channel_seek     (GIOChannel    *channel,
                                 gint64         offset,
                                 GSeekType      type);

__declspec(deprecated("is deprecated. Use '" "g_io_channel_shutdown" "' instead")) extern
void      g_io_channel_close    (GIOChannel    *channel);

extern
GIOStatus g_io_channel_shutdown (GIOChannel      *channel,
				 gboolean         flush,
				 GError         **err);
extern
guint     g_io_add_watch_full   (GIOChannel      *channel,
				 gint             priority,
				 GIOCondition     condition,
				 GIOFunc          func,
				 gpointer         user_data,
				 GDestroyNotify   notify);
extern
GSource * g_io_create_watch     (GIOChannel      *channel,
				 GIOCondition     condition);
extern
guint     g_io_add_watch        (GIOChannel      *channel,
				 GIOCondition     condition,
				 GIOFunc          func,
				 gpointer         user_data);




extern
void                  g_io_channel_set_buffer_size      (GIOChannel   *channel,
							 gsize         size);
extern
gsize                 g_io_channel_get_buffer_size      (GIOChannel   *channel);
extern
GIOCondition          g_io_channel_get_buffer_condition (GIOChannel   *channel);
extern
GIOStatus             g_io_channel_set_flags            (GIOChannel   *channel,
							 GIOFlags      flags,
							 GError      **error);
extern
GIOFlags              g_io_channel_get_flags            (GIOChannel   *channel);
extern
void                  g_io_channel_set_line_term        (GIOChannel   *channel,
							 const gchar  *line_term,
							 gint          length);
extern
const gchar *         g_io_channel_get_line_term        (GIOChannel   *channel,
							 gint         *length);
extern
void		      g_io_channel_set_buffered		(GIOChannel   *channel,
							 gboolean      buffered);
extern
gboolean	      g_io_channel_get_buffered		(GIOChannel   *channel);
extern
GIOStatus             g_io_channel_set_encoding         (GIOChannel   *channel,
							 const gchar  *encoding,
							 GError      **error);
extern
const gchar *         g_io_channel_get_encoding         (GIOChannel   *channel);
extern
void                  g_io_channel_set_close_on_unref	(GIOChannel   *channel,
							 gboolean      do_close);
extern
gboolean              g_io_channel_get_close_on_unref	(GIOChannel   *channel);


extern
GIOStatus   g_io_channel_flush            (GIOChannel   *channel,
					   GError      **error);
extern
GIOStatus   g_io_channel_read_line        (GIOChannel   *channel,
					   gchar       **str_return,
					   gsize        *length,
					   gsize        *terminator_pos,
					   GError      **error);
extern
GIOStatus   g_io_channel_read_line_string (GIOChannel   *channel,
					   GString      *buffer,
					   gsize        *terminator_pos,
					   GError      **error);
extern
GIOStatus   g_io_channel_read_to_end      (GIOChannel   *channel,
					   gchar       **str_return,
					   gsize        *length,
					   GError      **error);
extern
GIOStatus   g_io_channel_read_chars       (GIOChannel   *channel,
					   gchar        *buf,
					   gsize         count,
					   gsize        *bytes_read,
					   GError      **error);
extern
GIOStatus   g_io_channel_read_unichar     (GIOChannel   *channel,
					   gunichar     *thechar,
					   GError      **error);
extern
GIOStatus   g_io_channel_write_chars      (GIOChannel   *channel,
					   const gchar  *buf,
					   gssize        count,
					   gsize        *bytes_written,
					   GError      **error);
extern
GIOStatus   g_io_channel_write_unichar    (GIOChannel   *channel,
					   gunichar      thechar,
					   GError      **error);
extern
GIOStatus   g_io_channel_seek_position    (GIOChannel   *channel,
					   gint64        offset,
					   GSeekType     type,
					   GError      **error);
extern
GIOChannel* g_io_channel_new_file         (const gchar  *filename,
					   const gchar  *mode,
					   GError      **error);



extern
GQuark          g_io_channel_error_quark      (void);
extern
GIOChannelError g_io_channel_error_from_errno (gint en);



















extern
GIOChannel* g_io_channel_unix_new    (int         fd);
extern
gint        g_io_channel_unix_get_fd (GIOChannel *channel);



extern __declspec(dllimport) GSourceFuncs g_io_watch_funcs;















extern
void        g_io_channel_win32_make_pollfd (GIOChannel   *channel,
					    GIOCondition  condition,
					    GPollFD      *fd);




extern
gint        g_io_channel_win32_poll   (GPollFD    *fds,
				       gint        n_fds,
				       gint        timeout_);







extern
GIOChannel *g_io_channel_win32_new_messages (gsize hwnd);



#line 368 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"










extern
GIOChannel* g_io_channel_win32_new_fd (gint         fd);


extern
gint        g_io_channel_win32_get_fd (GIOChannel *channel);






extern
GIOChannel *g_io_channel_win32_new_socket (gint socket);

__declspec(deprecated("is deprecated. Use '" "g_io_channel_win32_new_socket" "' instead")) extern
GIOChannel *g_io_channel_win32_new_stream_socket (gint socket);

extern
void        g_io_channel_win32_set_debug (GIOChannel *channel,
                                          gboolean    flag);

#line 401 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"





extern
GIOChannel *g_io_channel_new_file_utf8 (const gchar  *filename,
                                        const gchar  *mode,
                                        GError      **error);
#line 411 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"
#line 412 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"



#line 416 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/giochannel.h"
#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gkeyfile.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gkeyfile.h"






typedef enum
{
  G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
  G_KEY_FILE_ERROR_PARSE,
  G_KEY_FILE_ERROR_NOT_FOUND,
  G_KEY_FILE_ERROR_KEY_NOT_FOUND,
  G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
  G_KEY_FILE_ERROR_INVALID_VALUE
} GKeyFileError;



extern
GQuark g_key_file_error_quark (void);

typedef struct _GKeyFile GKeyFile;

typedef enum
{
  G_KEY_FILE_NONE              = 0,
  G_KEY_FILE_KEEP_COMMENTS     = 1 << 0,
  G_KEY_FILE_KEEP_TRANSLATIONS = 1 << 1
} GKeyFileFlags;

extern
GKeyFile *g_key_file_new                    (void);
extern
GKeyFile *g_key_file_ref                    (GKeyFile             *key_file);
extern
void      g_key_file_unref                  (GKeyFile             *key_file);
extern
void      g_key_file_free                   (GKeyFile             *key_file);
extern
void      g_key_file_set_list_separator     (GKeyFile             *key_file,
					     gchar                 separator);
extern
gboolean  g_key_file_load_from_file         (GKeyFile             *key_file,
					     const gchar          *file,
					     GKeyFileFlags         flags,
					     GError              **error);
extern
gboolean  g_key_file_load_from_data         (GKeyFile             *key_file,
					     const gchar          *data,
					     gsize                 length,
					     GKeyFileFlags         flags,
					     GError              **error);
extern
gboolean  g_key_file_load_from_bytes        (GKeyFile             *key_file,
                                             GBytes               *bytes,
                                             GKeyFileFlags         flags,
                                             GError              **error);
extern
gboolean g_key_file_load_from_dirs          (GKeyFile             *key_file,
					     const gchar	  *file,
					     const gchar	 **search_dirs,
					     gchar		 **full_path,
					     GKeyFileFlags         flags,
					     GError              **error);
extern
gboolean g_key_file_load_from_data_dirs     (GKeyFile             *key_file,
					     const gchar          *file,
					     gchar               **full_path,
					     GKeyFileFlags         flags,
					     GError              **error);
extern
gchar    *g_key_file_to_data                (GKeyFile             *key_file,
					     gsize                *length,
					     GError              **error) ;
extern
gboolean  g_key_file_save_to_file           (GKeyFile             *key_file,
                                             const gchar          *filename,
                                             GError              **error);
extern
gchar    *g_key_file_get_start_group        (GKeyFile             *key_file) ;
extern
gchar   **g_key_file_get_groups             (GKeyFile             *key_file,
					     gsize                *length) ;
extern
gchar   **g_key_file_get_keys               (GKeyFile             *key_file,
					     const gchar          *group_name,
					     gsize                *length,
					     GError              **error) ;
extern
gboolean  g_key_file_has_group              (GKeyFile             *key_file,
					     const gchar          *group_name);
extern
gboolean  g_key_file_has_key                (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error);
extern
gchar    *g_key_file_get_value              (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error) ;
extern
void      g_key_file_set_value              (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar          *value);
extern
gchar    *g_key_file_get_string             (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error) ;
extern
void      g_key_file_set_string             (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar          *string);
extern
gchar    *g_key_file_get_locale_string      (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar          *locale,
					     GError              **error) ;
extern
void      g_key_file_set_locale_string      (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar          *locale,
					     const gchar          *string);
extern
gboolean  g_key_file_get_boolean            (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error);
extern
void      g_key_file_set_boolean            (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gboolean              value);
extern
gint      g_key_file_get_integer            (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error);
extern
void      g_key_file_set_integer            (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gint                  value);
extern
gint64    g_key_file_get_int64              (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error);
extern
void      g_key_file_set_int64              (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gint64                value);
extern
guint64   g_key_file_get_uint64             (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error);
extern
void      g_key_file_set_uint64             (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     guint64               value);
extern
gdouble   g_key_file_get_double             (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
                                             GError              **error);
extern
void      g_key_file_set_double             (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
                                             gdouble               value);
extern
gchar   **g_key_file_get_string_list        (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gsize                *length,
					     GError              **error) ;
extern
void      g_key_file_set_string_list        (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar * const   list[],
					     gsize                 length);
extern
gchar   **g_key_file_get_locale_string_list (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar          *locale,
					     gsize                *length,
					     GError              **error) ;
extern
void      g_key_file_set_locale_string_list (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     const gchar          *locale,
					     const gchar * const   list[],
					     gsize                 length);
extern
gboolean *g_key_file_get_boolean_list       (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gsize                *length,
					     GError              **error) ;
extern
void      g_key_file_set_boolean_list       (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gboolean              list[],
					     gsize                 length);
extern
gint     *g_key_file_get_integer_list       (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gsize                *length,
					     GError              **error) ;
extern
void      g_key_file_set_double_list        (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
                                             gdouble               list[],
                                             gsize                 length);
extern
gdouble  *g_key_file_get_double_list        (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
                                             gsize                *length,
                                             GError              **error) ;
extern
void      g_key_file_set_integer_list       (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     gint                  list[],
					     gsize                 length);
extern
gboolean  g_key_file_set_comment            (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
                                             const gchar          *comment,
                                             GError              **error);
extern
gchar    *g_key_file_get_comment            (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
                                             GError              **error) ;

extern
gboolean  g_key_file_remove_comment         (GKeyFile             *key_file,
                                             const gchar          *group_name,
                                             const gchar          *key,
					     GError              **error);
extern
gboolean  g_key_file_remove_key             (GKeyFile             *key_file,
					     const gchar          *group_name,
					     const gchar          *key,
					     GError              **error);
extern
gboolean  g_key_file_remove_group           (GKeyFile             *key_file,
					     const gchar          *group_name,
					     GError              **error);
































#line 326 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gkeyfile.h"
#line 56 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"



#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmappedfile.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmappedfile.h"






typedef struct _GMappedFile GMappedFile;

extern
GMappedFile *g_mapped_file_new          (const gchar  *filename,
				         gboolean      writable,
				         GError      **error) ;
extern
GMappedFile *g_mapped_file_new_from_fd  (gint          fd,
					 gboolean      writable,
					 GError      **error) ;
extern
gsize        g_mapped_file_get_length   (GMappedFile  *file);
extern
gchar       *g_mapped_file_get_contents (GMappedFile  *file);
extern
GBytes *     g_mapped_file_get_bytes    (GMappedFile  *file);
extern
GMappedFile *g_mapped_file_ref          (GMappedFile  *file);
extern
void         g_mapped_file_unref        (GMappedFile  *file);

__declspec(deprecated("is deprecated. Use '" "g_mapped_file_unref" "' instead")) extern
void         g_mapped_file_free         (GMappedFile  *file);



#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmappedfile.h"
#line 60 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmarkup.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmarkup.h"
























typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,
  


  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT,
  G_MARKUP_ERROR_MISSING_ATTRIBUTE
} GMarkupError;










extern
GQuark g_markup_error_quark (void);





















typedef enum
{
  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0,
  G_MARKUP_TREAT_CDATA_AS_TEXT              = 1 << 1,
  G_MARKUP_PREFIX_ERROR_POSITION            = 1 << 2,
  G_MARKUP_IGNORE_QUALIFIED                 = 1 << 3
} GMarkupParseFlags;










typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;





























struct _GMarkupParser
{
  
  void (*start_element)  (GMarkupParseContext *context,
                          const gchar         *element_name,
                          const gchar        **attribute_names,
                          const gchar        **attribute_values,
                          gpointer             user_data,
                          GError             **error);

  
  void (*end_element)    (GMarkupParseContext *context,
                          const gchar         *element_name,
                          gpointer             user_data,
                          GError             **error);

  
  
  void (*text)           (GMarkupParseContext *context,
                          const gchar         *text,
                          gsize                text_len,
                          gpointer             user_data,
                          GError             **error);

  



  
  void (*passthrough)    (GMarkupParseContext *context,
                          const gchar         *passthrough_text,
                          gsize                text_len,
                          gpointer             user_data,
                          GError             **error);

  


  void (*error)          (GMarkupParseContext *context,
                          GError              *error,
                          gpointer             user_data);
};

extern
GMarkupParseContext *g_markup_parse_context_new   (const GMarkupParser *parser,
                                                   GMarkupParseFlags    flags,
                                                   gpointer             user_data,
                                                   GDestroyNotify       user_data_dnotify);
extern
GMarkupParseContext *g_markup_parse_context_ref   (GMarkupParseContext *context);
extern
void                 g_markup_parse_context_unref (GMarkupParseContext *context);
extern
void                 g_markup_parse_context_free  (GMarkupParseContext *context);
extern
gboolean             g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar         *text,
                                                   gssize               text_len,
                                                   GError             **error);
extern
void                 g_markup_parse_context_push  (GMarkupParseContext *context,
                                                   const GMarkupParser *parser,
                                                   gpointer             user_data);
extern
gpointer             g_markup_parse_context_pop   (GMarkupParseContext *context);

extern
gboolean             g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError             **error);
extern
const gchar *        g_markup_parse_context_get_element (GMarkupParseContext *context);
extern
const GSList *       g_markup_parse_context_get_element_stack (GMarkupParseContext *context);


extern
void                 g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint                *line_number,
                                                          gint                *char_number);
extern
gpointer             g_markup_parse_context_get_user_data (GMarkupParseContext *context);


extern
gchar* g_markup_escape_text (const gchar *text,
                             gssize       length);

extern
gchar *g_markup_printf_escaped (const char *format,
				...) ;
extern
gchar *g_markup_vprintf_escaped (const char *format,
				 va_list     args) ;

typedef enum
{
  G_MARKUP_COLLECT_INVALID,
  G_MARKUP_COLLECT_STRING,
  G_MARKUP_COLLECT_STRDUP,
  G_MARKUP_COLLECT_BOOLEAN,
  G_MARKUP_COLLECT_TRISTATE,

  G_MARKUP_COLLECT_OPTIONAL = (1 << 16)
} GMarkupCollectType;



extern
gboolean   g_markup_collect_attributes (const gchar         *element_name,
                                        const gchar        **attribute_names,
                                        const gchar        **attribute_values,
                                        GError             **error,
                                        GMarkupCollectType   first_type,
                                        const gchar         *first_attr,
                                        ...);



#line 262 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmarkup.h"
#line 61 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"




#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvariant.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvariant.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvarianttype.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvarianttype.h"














typedef struct _GVariantType GVariantType;

























































































































































































































































#line 292 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvarianttype.h"


extern
gboolean                        g_variant_type_string_is_valid          (const gchar         *type_string);
extern
gboolean                        g_variant_type_string_scan              (const gchar         *string,
                                                                         const gchar         *limit,
                                                                         const gchar        **endptr);


extern
void                            g_variant_type_free                     (GVariantType        *type);
extern
GVariantType *                  g_variant_type_copy                     (const GVariantType  *type);
extern
GVariantType *                  g_variant_type_new                      (const gchar         *type_string);


extern
gsize                           g_variant_type_get_string_length        (const GVariantType  *type);
extern
const gchar *                   g_variant_type_peek_string              (const GVariantType  *type);
extern
gchar *                         g_variant_type_dup_string               (const GVariantType  *type);


extern
gboolean                        g_variant_type_is_definite              (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_container             (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_basic                 (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_maybe                 (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_array                 (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_tuple                 (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_dict_entry            (const GVariantType  *type);
extern
gboolean                        g_variant_type_is_variant               (const GVariantType  *type);


extern
guint                           g_variant_type_hash                     (gconstpointer        type);
extern
gboolean                        g_variant_type_equal                    (gconstpointer        type1,
                                                                         gconstpointer        type2);


extern
gboolean                        g_variant_type_is_subtype_of            (const GVariantType  *type,
                                                                         const GVariantType  *supertype);


extern
const GVariantType *            g_variant_type_element                  (const GVariantType  *type);
extern
const GVariantType *            g_variant_type_first                    (const GVariantType  *type);
extern
const GVariantType *            g_variant_type_next                     (const GVariantType  *type);
extern
gsize                           g_variant_type_n_items                  (const GVariantType  *type);
extern
const GVariantType *            g_variant_type_key                      (const GVariantType  *type);
extern
const GVariantType *            g_variant_type_value                    (const GVariantType  *type);


extern
GVariantType *                  g_variant_type_new_array                (const GVariantType  *element);
extern
GVariantType *                  g_variant_type_new_maybe                (const GVariantType  *element);
extern
GVariantType *                  g_variant_type_new_tuple                (const GVariantType * const *items,
                                                                         gint                 length);
extern
GVariantType *                  g_variant_type_new_dict_entry           (const GVariantType  *key,
                                                                         const GVariantType  *value);


extern
const GVariantType *            g_variant_type_checked_                 (const gchar *);



#line 380 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvarianttype.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvariant.h"





typedef struct _GVariant        GVariant;

typedef enum
{
  G_VARIANT_CLASS_BOOLEAN       = 'b',
  G_VARIANT_CLASS_BYTE          = 'y',
  G_VARIANT_CLASS_INT16         = 'n',
  G_VARIANT_CLASS_UINT16        = 'q',
  G_VARIANT_CLASS_INT32         = 'i',
  G_VARIANT_CLASS_UINT32        = 'u',
  G_VARIANT_CLASS_INT64         = 'x',
  G_VARIANT_CLASS_UINT64        = 't',
  G_VARIANT_CLASS_HANDLE        = 'h',
  G_VARIANT_CLASS_DOUBLE        = 'd',
  G_VARIANT_CLASS_STRING        = 's',
  G_VARIANT_CLASS_OBJECT_PATH   = 'o',
  G_VARIANT_CLASS_SIGNATURE     = 'g',
  G_VARIANT_CLASS_VARIANT       = 'v',
  G_VARIANT_CLASS_MAYBE         = 'm',
  G_VARIANT_CLASS_ARRAY         = 'a',
  G_VARIANT_CLASS_TUPLE         = '(',
  G_VARIANT_CLASS_DICT_ENTRY    = '{'
} GVariantClass;

extern
void                            g_variant_unref                         (GVariant             *value);
extern
GVariant *                      g_variant_ref                           (GVariant             *value);
extern
GVariant *                      g_variant_ref_sink                      (GVariant             *value);
extern
gboolean                        g_variant_is_floating                   (GVariant             *value);
extern
GVariant *                      g_variant_take_ref                      (GVariant             *value);

extern
const GVariantType *            g_variant_get_type                      (GVariant             *value);
extern
const gchar *                   g_variant_get_type_string               (GVariant             *value);
extern
gboolean                        g_variant_is_of_type                    (GVariant             *value,
                                                                         const GVariantType   *type);
extern
gboolean                        g_variant_is_container                  (GVariant             *value);
extern
GVariantClass                   g_variant_classify                      (GVariant             *value);
extern
GVariant *                      g_variant_new_boolean                   (gboolean              value);
extern
GVariant *                      g_variant_new_byte                      (guchar                value);
extern
GVariant *                      g_variant_new_int16                     (gint16                value);
extern
GVariant *                      g_variant_new_uint16                    (guint16               value);
extern
GVariant *                      g_variant_new_int32                     (gint32                value);
extern
GVariant *                      g_variant_new_uint32                    (guint32               value);
extern
GVariant *                      g_variant_new_int64                     (gint64                value);
extern
GVariant *                      g_variant_new_uint64                    (guint64               value);
extern
GVariant *                      g_variant_new_handle                    (gint32                value);
extern
GVariant *                      g_variant_new_double                    (gdouble               value);
extern
GVariant *                      g_variant_new_string                    (const gchar          *string);
extern
GVariant *                      g_variant_new_take_string               (gchar                *string);
extern
GVariant *                      g_variant_new_printf                    (const gchar          *format_string,
                                                                         ...) ;
extern
GVariant *                      g_variant_new_object_path               (const gchar          *object_path);
extern
gboolean                        g_variant_is_object_path                (const gchar          *string);
extern
GVariant *                      g_variant_new_signature                 (const gchar          *signature);
extern
gboolean                        g_variant_is_signature                  (const gchar          *string);
extern
GVariant *                      g_variant_new_variant                   (GVariant             *value);
extern
GVariant *                      g_variant_new_strv                      (const gchar * const  *strv,
                                                                         gssize                length);
extern
GVariant *                      g_variant_new_objv                      (const gchar * const  *strv,
                                                                         gssize                length);
extern
GVariant *                      g_variant_new_bytestring                (const gchar          *string);
extern
GVariant *                      g_variant_new_bytestring_array          (const gchar * const  *strv,
                                                                         gssize                length);
extern
GVariant *                      g_variant_new_fixed_array               (const GVariantType   *element_type,
                                                                         gconstpointer         elements,
                                                                         gsize                 n_elements,
                                                                         gsize                 element_size);
extern
gboolean                        g_variant_get_boolean                   (GVariant             *value);
extern
guchar                          g_variant_get_byte                      (GVariant             *value);
extern
gint16                          g_variant_get_int16                     (GVariant             *value);
extern
guint16                         g_variant_get_uint16                    (GVariant             *value);
extern
gint32                          g_variant_get_int32                     (GVariant             *value);
extern
guint32                         g_variant_get_uint32                    (GVariant             *value);
extern
gint64                          g_variant_get_int64                     (GVariant             *value);
extern
guint64                         g_variant_get_uint64                    (GVariant             *value);
extern
gint32                          g_variant_get_handle                    (GVariant             *value);
extern
gdouble                         g_variant_get_double                    (GVariant             *value);
extern
GVariant *                      g_variant_get_variant                   (GVariant             *value);
extern
const gchar *                   g_variant_get_string                    (GVariant             *value,
                                                                         gsize                *length);
extern
gchar *                         g_variant_dup_string                    (GVariant             *value,
                                                                         gsize                *length);
extern
const gchar **                  g_variant_get_strv                      (GVariant             *value,
                                                                         gsize                *length);
extern
gchar **                        g_variant_dup_strv                      (GVariant             *value,
                                                                         gsize                *length);
extern
const gchar **                  g_variant_get_objv                      (GVariant             *value,
                                                                         gsize                *length);
extern
gchar **                        g_variant_dup_objv                      (GVariant             *value,
                                                                         gsize                *length);
extern
const gchar *                   g_variant_get_bytestring                (GVariant             *value);
extern
gchar *                         g_variant_dup_bytestring                (GVariant             *value,
                                                                         gsize                *length);
extern
const gchar **                  g_variant_get_bytestring_array          (GVariant             *value,
                                                                         gsize                *length);
extern
gchar **                        g_variant_dup_bytestring_array          (GVariant             *value,
                                                                         gsize                *length);

extern
GVariant *                      g_variant_new_maybe                     (const GVariantType   *child_type,
                                                                         GVariant             *child);
extern
GVariant *                      g_variant_new_array                     (const GVariantType   *child_type,
                                                                         GVariant * const     *children,
                                                                         gsize                 n_children);
extern
GVariant *                      g_variant_new_tuple                     (GVariant * const     *children,
                                                                         gsize                 n_children);
extern
GVariant *                      g_variant_new_dict_entry                (GVariant             *key,
                                                                         GVariant             *value);

extern
GVariant *                      g_variant_get_maybe                     (GVariant             *value);
extern
gsize                           g_variant_n_children                    (GVariant             *value);
extern
void                            g_variant_get_child                     (GVariant             *value,
                                                                         gsize                 index_,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
GVariant *                      g_variant_get_child_value               (GVariant             *value,
                                                                         gsize                 index_);
extern
gboolean                        g_variant_lookup                        (GVariant             *dictionary,
                                                                         const gchar          *key,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
GVariant *                      g_variant_lookup_value                  (GVariant             *dictionary,
                                                                         const gchar          *key,
                                                                         const GVariantType   *expected_type);
extern
gconstpointer                   g_variant_get_fixed_array               (GVariant             *value,
                                                                         gsize                *n_elements,
                                                                         gsize                 element_size);

extern
gsize                           g_variant_get_size                      (GVariant             *value);
extern
gconstpointer                   g_variant_get_data                      (GVariant             *value);
extern
GBytes *                        g_variant_get_data_as_bytes             (GVariant             *value);
extern
void                            g_variant_store                         (GVariant             *value,
                                                                         gpointer              data);

extern
gchar *                         g_variant_print                         (GVariant             *value,
                                                                         gboolean              type_annotate);
extern
GString *                       g_variant_print_string                  (GVariant             *value,
                                                                         GString              *string,
                                                                         gboolean              type_annotate);

extern
guint                           g_variant_hash                          (gconstpointer         value);
extern
gboolean                        g_variant_equal                         (gconstpointer         one,
                                                                         gconstpointer         two);

extern
GVariant *                      g_variant_get_normal_form               (GVariant             *value);
extern
gboolean                        g_variant_is_normal_form                (GVariant             *value);
extern
GVariant *                      g_variant_byteswap                      (GVariant             *value);

extern
GVariant *                      g_variant_new_from_bytes                (const GVariantType   *type,
                                                                         GBytes               *bytes,
                                                                         gboolean              trusted);
extern
GVariant *                      g_variant_new_from_data                 (const GVariantType   *type,
                                                                         gconstpointer         data,
                                                                         gsize                 size,
                                                                         gboolean              trusted,
                                                                         GDestroyNotify        notify,
                                                                         gpointer              user_data);

typedef struct _GVariantIter GVariantIter;
struct _GVariantIter {
  
  gsize x[16];
};

extern
GVariantIter *                  g_variant_iter_new                      (GVariant             *value);
extern
gsize                           g_variant_iter_init                     (GVariantIter         *iter,
                                                                         GVariant             *value);
extern
GVariantIter *                  g_variant_iter_copy                     (GVariantIter         *iter);
extern
gsize                           g_variant_iter_n_children               (GVariantIter         *iter);
extern
void                            g_variant_iter_free                     (GVariantIter         *iter);
extern
GVariant *                      g_variant_iter_next_value               (GVariantIter         *iter);
extern
gboolean                        g_variant_iter_next                     (GVariantIter         *iter,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
gboolean                        g_variant_iter_loop                     (GVariantIter         *iter,
                                                                         const gchar          *format_string,
                                                                         ...);


typedef struct _GVariantBuilder GVariantBuilder;
struct _GVariantBuilder {
  
  union
  {
    struct {
      gsize partial_magic;
      const GVariantType *type;
      gsize y[14];
    } s;
    gsize x[16];
  } u;
};

typedef enum
{
  G_VARIANT_PARSE_ERROR_FAILED,
  G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
  G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
  G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
  G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
  G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
  G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
  G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
  G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
  G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
  G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
  G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
  G_VARIANT_PARSE_ERROR_TYPE_ERROR,
  G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
  G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
  G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
  G_VARIANT_PARSE_ERROR_VALUE_EXPECTED
} GVariantParseError;


__declspec(deprecated("is deprecated. Use '" "g_variant_parse_error_quark" "' instead")) extern
GQuark                          g_variant_parser_get_error_quark        (void);

extern
GQuark                          g_variant_parse_error_quark             (void);

























extern
GVariantBuilder *               g_variant_builder_new                   (const GVariantType   *type);
extern
void                            g_variant_builder_unref                 (GVariantBuilder      *builder);
extern
GVariantBuilder *               g_variant_builder_ref                   (GVariantBuilder      *builder);
extern
void                            g_variant_builder_init                  (GVariantBuilder      *builder,
                                                                         const GVariantType   *type);
extern
GVariant *                      g_variant_builder_end                   (GVariantBuilder      *builder);
extern
void                            g_variant_builder_clear                 (GVariantBuilder      *builder);
extern
void                            g_variant_builder_open                  (GVariantBuilder      *builder,
                                                                         const GVariantType   *type);
extern
void                            g_variant_builder_close                 (GVariantBuilder      *builder);
extern
void                            g_variant_builder_add_value             (GVariantBuilder      *builder,
                                                                         GVariant             *value);
extern
void                            g_variant_builder_add                   (GVariantBuilder      *builder,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
void                            g_variant_builder_add_parsed            (GVariantBuilder      *builder,
                                                                         const gchar          *format,
                                                                         ...);

extern
GVariant *                      g_variant_new                           (const gchar          *format_string,
                                                                         ...);
extern
void                            g_variant_get                           (GVariant             *value,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
GVariant *                      g_variant_new_va                        (const gchar          *format_string,
                                                                         const gchar         **endptr,
                                                                         va_list              *app);
extern
void                            g_variant_get_va                        (GVariant             *value,
                                                                         const gchar          *format_string,
                                                                         const gchar         **endptr,
                                                                         va_list              *app);
extern
gboolean                        g_variant_check_format_string           (GVariant             *value,
                                                                         const gchar          *format_string,
                                                                         gboolean              copy_only);

extern
GVariant *                      g_variant_parse                         (const GVariantType   *type,
                                                                         const gchar          *text,
                                                                         const gchar          *limit,
                                                                         const gchar         **endptr,
                                                                         GError              **error);
extern
GVariant *                      g_variant_new_parsed                    (const gchar          *format,
                                                                         ...);
extern
GVariant *                      g_variant_new_parsed_va                 (const gchar          *format,
                                                                         va_list              *app);

extern
gchar *                         g_variant_parse_error_print_context     (GError               *error,
                                                                         const gchar          *source_str);

extern
gint                            g_variant_compare                       (gconstpointer one,
                                                                         gconstpointer two);

typedef struct _GVariantDict GVariantDict;
struct _GVariantDict {
  
  union
  {
    struct {
      GVariant *asv;
      gsize partial_magic;
      gsize y[14];
    } s;
    gsize x[16];
  } u;
};






























extern
GVariantDict *                  g_variant_dict_new                      (GVariant             *from_asv);

extern
void                            g_variant_dict_init                     (GVariantDict         *dict,
                                                                         GVariant             *from_asv);

extern
gboolean                        g_variant_dict_lookup                   (GVariantDict         *dict,
                                                                         const gchar          *key,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
GVariant *                      g_variant_dict_lookup_value             (GVariantDict         *dict,
                                                                         const gchar          *key,
                                                                         const GVariantType   *expected_type);
extern
gboolean                        g_variant_dict_contains                 (GVariantDict         *dict,
                                                                         const gchar          *key);
extern
void                            g_variant_dict_insert                   (GVariantDict         *dict,
                                                                         const gchar          *key,
                                                                         const gchar          *format_string,
                                                                         ...);
extern
void                            g_variant_dict_insert_value             (GVariantDict         *dict,
                                                                         const gchar          *key,
                                                                         GVariant             *value);
extern
gboolean                        g_variant_dict_remove                   (GVariantDict         *dict,
                                                                         const gchar          *key);
extern
void                            g_variant_dict_clear                    (GVariantDict         *dict);
extern
GVariant *                      g_variant_dict_end                      (GVariantDict         *dict);
extern
GVariantDict *                  g_variant_dict_ref                      (GVariantDict         *dict);
extern
void                            g_variant_dict_unref                    (GVariantDict         *dict);



#line 522 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gvariant.h"
#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"





extern
gsize	g_printf_string_upper_bound (const gchar* format,
				     va_list	  args) ;








typedef enum
{
  
  G_LOG_FLAG_RECURSION          = 1 << 0,
  G_LOG_FLAG_FATAL              = 1 << 1,

  
  G_LOG_LEVEL_ERROR             = 1 << 2,       
  G_LOG_LEVEL_CRITICAL          = 1 << 3,
  G_LOG_LEVEL_WARNING           = 1 << 4,
  G_LOG_LEVEL_MESSAGE           = 1 << 5,
  G_LOG_LEVEL_INFO              = 1 << 6,
  G_LOG_LEVEL_DEBUG             = 1 << 7,

  G_LOG_LEVEL_MASK              = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;




typedef void            (*GLogFunc)             (const gchar   *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar   *message,
                                                 gpointer       user_data);



extern
guint           g_log_set_handler       (const gchar    *log_domain,
                                         GLogLevelFlags  log_levels,
                                         GLogFunc        log_func,
                                         gpointer        user_data);
extern
guint           g_log_set_handler_full  (const gchar    *log_domain,
                                         GLogLevelFlags  log_levels,
                                         GLogFunc        log_func,
                                         gpointer        user_data,
                                         GDestroyNotify  destroy);
extern
void            g_log_remove_handler    (const gchar    *log_domain,
                                         guint           handler_id);
extern
void            g_log_default_handler   (const gchar    *log_domain,
                                         GLogLevelFlags  log_level,
                                         const gchar    *message,
                                         gpointer        unused_data);
extern
GLogFunc        g_log_set_default_handler (GLogFunc      log_func,
					   gpointer      user_data);
extern
void            g_log                   (const gchar    *log_domain,
                                         GLogLevelFlags  log_level,
                                         const gchar    *format,
                                         ...) ;
extern
void            g_logv                  (const gchar    *log_domain,
                                         GLogLevelFlags  log_level,
                                         const gchar    *format,
                                         va_list         args) ;
extern
GLogLevelFlags  g_log_set_fatal_mask    (const gchar    *log_domain,
                                         GLogLevelFlags  fatal_mask);
extern
GLogLevelFlags  g_log_set_always_fatal  (GLogLevelFlags  fatal_mask);

















typedef enum
{
  G_LOG_WRITER_HANDLED = 1,
  G_LOG_WRITER_UNHANDLED = 0,
} GLogWriterOutput;

















typedef struct _GLogField GLogField;
struct _GLogField
{
  const gchar *key;
  gconstpointer value;
  gssize length;
};
























typedef GLogWriterOutput (*GLogWriterFunc)     (GLogLevelFlags   log_level,
                                                const GLogField *fields,
                                                gsize            n_fields,
                                                gpointer         user_data);

extern
void             g_log_structured              (const gchar     *log_domain,
                                                GLogLevelFlags   log_level,
                                                ...);
extern
void             g_log_structured_array        (GLogLevelFlags   log_level,
                                                const GLogField *fields,
                                                gsize            n_fields);

extern
void             g_log_variant                 (const gchar     *log_domain,
                                                GLogLevelFlags   log_level,
                                                GVariant        *fields);

extern
void             g_log_set_writer_func         (GLogWriterFunc   func,
                                                gpointer         user_data,
                                                GDestroyNotify   user_data_free);

extern
gboolean         g_log_writer_supports_color   (gint             output_fd);
extern
gboolean         g_log_writer_is_journald      (gint             output_fd);

extern
gchar           *g_log_writer_format_fields    (GLogLevelFlags   log_level,
                                                const GLogField *fields,
                                                gsize            n_fields,
                                                gboolean         use_color);

extern
GLogWriterOutput g_log_writer_journald         (GLogLevelFlags   log_level,
                                                const GLogField *fields,
                                                gsize            n_fields,
                                                gpointer         user_data);
extern
GLogWriterOutput g_log_writer_standard_streams (GLogLevelFlags   log_level,
                                                const GLogField *fields,
                                                gsize            n_fields,
                                                gpointer         user_data);
extern
GLogWriterOutput g_log_writer_default          (GLogLevelFlags   log_level,
                                                const GLogField *fields,
                                                gsize            n_fields,
                                                gpointer         user_data);



















void	_g_log_fallback_handler	(const gchar   *log_domain,
						 GLogLevelFlags log_level,
						 const gchar   *message,
						 gpointer       unused_data);


extern
void g_return_if_fail_warning (const char *log_domain,
			       const char *pretty_function,
			       const char *expression) ;
extern
void g_warn_message           (const char     *domain,
                               const char     *file,
                               int             line,
                               const char     *func,
                               const char     *warnexpr) ;
__declspec(deprecated) extern
void g_assert_warning         (const char *log_domain,
			       const char *file,
			       const int   line,
		               const char *pretty_function,
		               const char *expression) ;




#line 282 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"





























































#line 344 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"























































































































#line 464 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"








typedef void    (*GPrintFunc)           (const gchar    *string);
extern
void            g_print                 (const gchar    *format,
                                         ...) ;
extern
GPrintFunc      g_set_print_handler     (GPrintFunc      func);
extern
void            g_printerr              (const gchar    *format,
                                         ...) ;
extern
GPrintFunc      g_set_printerr_handler  (GPrintFunc      func);

































































































































#line 613 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"



#line 617 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gmessages.h"
#line 63 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/goption.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/goption.h"













typedef struct _GOptionContext GOptionContext;












typedef struct _GOptionGroup   GOptionGroup;
typedef struct _GOptionEntry   GOptionEntry;




























typedef enum
{
  G_OPTION_FLAG_NONE            = 0,
  G_OPTION_FLAG_HIDDEN		= 1 << 0,
  G_OPTION_FLAG_IN_MAIN		= 1 << 1,
  G_OPTION_FLAG_REVERSE		= 1 << 2,
  G_OPTION_FLAG_NO_ARG		= 1 << 3,
  G_OPTION_FLAG_FILENAME	= 1 << 4,
  G_OPTION_FLAG_OPTIONAL_ARG    = 1 << 5,
  G_OPTION_FLAG_NOALIAS	        = 1 << 6
} GOptionFlags;


























typedef enum
{
  G_OPTION_ARG_NONE,
  G_OPTION_ARG_STRING,
  G_OPTION_ARG_INT,
  G_OPTION_ARG_CALLBACK,
  G_OPTION_ARG_FILENAME,
  G_OPTION_ARG_STRING_ARRAY,
  G_OPTION_ARG_FILENAME_ARRAY,
  G_OPTION_ARG_DOUBLE,
  G_OPTION_ARG_INT64
} GOptionArg;


















typedef gboolean (*GOptionArgFunc) (const gchar    *option_name,
				    const gchar    *value,
				    gpointer        data,
				    GError        **error);














typedef gboolean (*GOptionParseFunc) (GOptionContext *context,
				      GOptionGroup   *group,
				      gpointer	      data,
				      GError        **error);











typedef void (*GOptionErrorFunc) (GOptionContext *context,
				  GOptionGroup   *group,
				  gpointer        data,
				  GError        **error);




















typedef enum
{
  G_OPTION_ERROR_UNKNOWN_OPTION,
  G_OPTION_ERROR_BAD_VALUE,
  G_OPTION_ERROR_FAILED
} GOptionError;

extern
GQuark g_option_error_quark (void);











































struct _GOptionEntry
{
  const gchar *long_name;
  gchar        short_name;
  gint         flags;

  GOptionArg   arg;
  gpointer     arg_data;
  
  const gchar *description;
  const gchar *arg_description;
};



















extern
GOptionContext *g_option_context_new              (const gchar         *parameter_string);
extern
void            g_option_context_set_summary      (GOptionContext      *context,
                                                   const gchar         *summary);
extern
const gchar *   g_option_context_get_summary      (GOptionContext     *context);
extern
void            g_option_context_set_description  (GOptionContext      *context,
                                                   const gchar         *description);
extern
const gchar *   g_option_context_get_description  (GOptionContext     *context);
extern
void            g_option_context_free             (GOptionContext      *context);
extern
void		g_option_context_set_help_enabled (GOptionContext      *context,
						   gboolean		help_enabled);
extern
gboolean	g_option_context_get_help_enabled (GOptionContext      *context);
extern
void		g_option_context_set_ignore_unknown_options (GOptionContext *context,
							     gboolean	     ignore_unknown);
extern
gboolean        g_option_context_get_ignore_unknown_options (GOptionContext *context);

extern
void            g_option_context_set_strict_posix           (GOptionContext *context,
                                                             gboolean        strict_posix);
extern
gboolean        g_option_context_get_strict_posix           (GOptionContext *context);

extern
void            g_option_context_add_main_entries (GOptionContext      *context,
						   const GOptionEntry  *entries,
						   const gchar         *translation_domain);
extern
gboolean        g_option_context_parse            (GOptionContext      *context,
						   gint                *argc,
						   gchar             ***argv,
						   GError             **error);
extern
gboolean        g_option_context_parse_strv       (GOptionContext      *context,
                                                   gchar             ***arguments,
                                                   GError             **error);
extern
void            g_option_context_set_translate_func (GOptionContext     *context,
						     GTranslateFunc      func,
						     gpointer            data,
						     GDestroyNotify      destroy_notify);
extern
void            g_option_context_set_translation_domain (GOptionContext  *context,
							 const gchar     *domain);

extern
void            g_option_context_add_group      (GOptionContext *context,
						 GOptionGroup   *group);
extern
void          g_option_context_set_main_group (GOptionContext *context,
					       GOptionGroup   *group);
extern
GOptionGroup *g_option_context_get_main_group (GOptionContext *context);
extern
gchar        *g_option_context_get_help       (GOptionContext *context,
                                               gboolean        main_help,
                                               GOptionGroup   *group);

extern
GOptionGroup *g_option_group_new                    (const gchar        *name,
						     const gchar        *description,
						     const gchar        *help_description,
						     gpointer            user_data,
						     GDestroyNotify      destroy);
extern
void	      g_option_group_set_parse_hooks	    (GOptionGroup       *group,
						     GOptionParseFunc    pre_parse_func,
						     GOptionParseFunc	 post_parse_func);
extern
void	      g_option_group_set_error_hook	    (GOptionGroup       *group,
						     GOptionErrorFunc	 error_func);
__declspec(deprecated) extern
void          g_option_group_free                   (GOptionGroup       *group);
extern
GOptionGroup *g_option_group_ref                    (GOptionGroup       *group);
extern
void          g_option_group_unref                  (GOptionGroup       *group);
extern
void          g_option_group_add_entries            (GOptionGroup       *group,
						     const GOptionEntry *entries);
extern
void          g_option_group_set_translate_func     (GOptionGroup       *group,
						     GTranslateFunc      func,
						     gpointer            data,
						     GDestroyNotify      destroy_notify);
extern
void          g_option_group_set_translation_domain (GOptionGroup       *group,
						     const gchar        *domain);



#line 388 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/goption.h"
#line 65 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpattern.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpattern.h"






typedef struct _GPatternSpec    GPatternSpec;

extern
GPatternSpec* g_pattern_spec_new       (const gchar  *pattern);
extern
void          g_pattern_spec_free      (GPatternSpec *pspec);
extern
gboolean      g_pattern_spec_equal     (GPatternSpec *pspec1,
					GPatternSpec *pspec2);
extern
gboolean      g_pattern_match          (GPatternSpec *pspec,
					guint         string_length,
					const gchar  *string,
					const gchar  *string_reversed);
extern
gboolean      g_pattern_match_string   (GPatternSpec *pspec,
					const gchar  *string);
extern
gboolean      g_pattern_match_simple   (const gchar  *pattern,
					const gchar  *string);



#line 54 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gpattern.h"
#line 66 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gprimes.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gprimes.h"














extern
guint	   g_spaced_primes_closest (guint num) ;



#line 51 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gprimes.h"
#line 68 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gqsort.h"
 




























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gqsort.h"





extern
void g_qsort_with_data (gconstpointer    pbase,
			gint             total_elems,
			gsize            size,
			GCompareDataFunc compare_func,
			gpointer         user_data);



#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gqsort.h"
#line 69 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gqueue.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gqueue.h"





typedef struct _GQueue GQueue;










struct _GQueue
{
  GList *head;
  GList *tail;
  guint  length;
};



















extern
GQueue*  g_queue_new            (void);
extern
void     g_queue_free           (GQueue           *queue);
extern
void     g_queue_free_full      (GQueue           *queue,
				GDestroyNotify    free_func);
extern
void     g_queue_init           (GQueue           *queue);
extern
void     g_queue_clear          (GQueue           *queue);
extern
gboolean g_queue_is_empty       (GQueue           *queue);
extern
guint    g_queue_get_length     (GQueue           *queue);
extern
void     g_queue_reverse        (GQueue           *queue);
extern
GQueue * g_queue_copy           (GQueue           *queue);
extern
void     g_queue_foreach        (GQueue           *queue,
                                 GFunc             func,
                                 gpointer          user_data);
extern
GList *  g_queue_find           (GQueue           *queue,
                                 gconstpointer     data);
extern
GList *  g_queue_find_custom    (GQueue           *queue,
                                 gconstpointer     data,
                                 GCompareFunc      func);
extern
void     g_queue_sort           (GQueue           *queue,
                                 GCompareDataFunc  compare_func,
                                 gpointer          user_data);

extern
void     g_queue_push_head      (GQueue           *queue,
                                 gpointer          data);
extern
void     g_queue_push_tail      (GQueue           *queue,
                                 gpointer          data);
extern
void     g_queue_push_nth       (GQueue           *queue,
                                 gpointer          data,
                                 gint              n);
extern
gpointer g_queue_pop_head       (GQueue           *queue);
extern
gpointer g_queue_pop_tail       (GQueue           *queue);
extern
gpointer g_queue_pop_nth        (GQueue           *queue,
                                 guint             n);
extern
gpointer g_queue_peek_head      (GQueue           *queue);
extern
gpointer g_queue_peek_tail      (GQueue           *queue);
extern
gpointer g_queue_peek_nth       (GQueue           *queue,
                                 guint             n);
extern
gint     g_queue_index          (GQueue           *queue,
                                 gconstpointer     data);
extern
gboolean g_queue_remove         (GQueue           *queue,
                                 gconstpointer     data);
extern
guint    g_queue_remove_all     (GQueue           *queue,
                                 gconstpointer     data);
extern
void     g_queue_insert_before  (GQueue           *queue,
                                 GList            *sibling,
                                 gpointer          data);
extern
void     g_queue_insert_after   (GQueue           *queue,
                                 GList            *sibling,
                                 gpointer          data);
extern
void     g_queue_insert_sorted  (GQueue           *queue,
                                 gpointer          data,
                                 GCompareDataFunc  func,
                                 gpointer          user_data);

extern
void     g_queue_push_head_link (GQueue           *queue,
                                 GList            *link_);
extern
void     g_queue_push_tail_link (GQueue           *queue,
                                 GList            *link_);
extern
void     g_queue_push_nth_link  (GQueue           *queue,
                                 gint              n,
                                 GList            *link_);
extern
GList*   g_queue_pop_head_link  (GQueue           *queue);
extern
GList*   g_queue_pop_tail_link  (GQueue           *queue);
extern
GList*   g_queue_pop_nth_link   (GQueue           *queue,
                                 guint             n);
extern
GList*   g_queue_peek_head_link (GQueue           *queue);
extern
GList*   g_queue_peek_tail_link (GQueue           *queue);
extern
GList*   g_queue_peek_nth_link  (GQueue           *queue,
                                 guint             n);
extern
gint     g_queue_link_index     (GQueue           *queue,
                                 GList            *link_);
extern
void     g_queue_unlink         (GQueue           *queue,
                                 GList            *link_);
extern
void     g_queue_delete_link    (GQueue           *queue,
                                 GList            *link_);



#line 191 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gqueue.h"
#line 71 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/grand.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/grand.h"





typedef struct _GRand           GRand;










extern
GRand*  g_rand_new_with_seed  (guint32  seed);
extern
GRand*  g_rand_new_with_seed_array (const guint32 *seed,
				    guint seed_length);
extern
GRand*  g_rand_new            (void);
extern
void    g_rand_free           (GRand   *rand_);
extern
GRand*  g_rand_copy           (GRand   *rand_);
extern
void    g_rand_set_seed       (GRand   *rand_,
			       guint32  seed);
extern
void	g_rand_set_seed_array (GRand   *rand_,
			       const guint32 *seed,
			       guint    seed_length);



extern
guint32 g_rand_int            (GRand   *rand_);
extern
gint32  g_rand_int_range      (GRand   *rand_,
			       gint32   begin,
			       gint32   end);
extern
gdouble g_rand_double         (GRand   *rand_);
extern
gdouble g_rand_double_range   (GRand   *rand_,
			       gdouble  begin,
			       gdouble  end);
extern
void    g_random_set_seed     (guint32  seed);



extern
guint32 g_random_int          (void);
extern
gint32  g_random_int_range    (gint32   begin,
			       gint32   end);
extern
gdouble g_random_double       (void);
extern
gdouble g_random_double_range (gdouble  begin,
			       gdouble  end);




#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/grand.h"
#line 72 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gregex.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gregex.h"

















































































































typedef enum
{
  G_REGEX_ERROR_COMPILE,
  G_REGEX_ERROR_OPTIMIZE,
  G_REGEX_ERROR_REPLACE,
  G_REGEX_ERROR_MATCH,
  G_REGEX_ERROR_INTERNAL,

  
  G_REGEX_ERROR_STRAY_BACKSLASH = 101,
  G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102,
  G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103,
  G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104,
  G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105,
  G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106,
  G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107,
  G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108,
  G_REGEX_ERROR_NOTHING_TO_REPEAT = 109,
  G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112,
  G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113,
  G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114,
  G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115,
  G_REGEX_ERROR_UNTERMINATED_COMMENT = 118,
  G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120,
  G_REGEX_ERROR_MEMORY_ERROR = 121,
  G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125,
  G_REGEX_ERROR_MALFORMED_CONDITION = 126,
  G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127,
  G_REGEX_ERROR_ASSERTION_EXPECTED = 128,
  G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130,
  G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131,
  G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134,
  G_REGEX_ERROR_INVALID_CONDITION = 135,
  G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136,
  G_REGEX_ERROR_INFINITE_LOOP = 140,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142,
  G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143,
  G_REGEX_ERROR_MALFORMED_PROPERTY = 146,
  G_REGEX_ERROR_UNKNOWN_PROPERTY = 147,
  G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148,
  G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149,
  G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151,
  G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154,
  G_REGEX_ERROR_DEFINE_REPETION = 155,
  G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156,
  G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157,
  G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159,
  G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB  = 160,
  G_REGEX_ERROR_NUMBER_TOO_BIG = 161,
  G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162,
  G_REGEX_ERROR_MISSING_DIGIT = 163,
  G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164,
  G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165,
  G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166,
  G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168,
  G_REGEX_ERROR_MISSING_NAME = 169,
  G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171,
  G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172,
  G_REGEX_ERROR_NAME_TOO_LONG = 175,
  G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
} GRegexError;












extern
GQuark g_regex_error_quark (void);
















































































typedef enum
{
  G_REGEX_CASELESS          = 1 << 0,
  G_REGEX_MULTILINE         = 1 << 1,
  G_REGEX_DOTALL            = 1 << 2,
  G_REGEX_EXTENDED          = 1 << 3,
  G_REGEX_ANCHORED          = 1 << 4,
  G_REGEX_DOLLAR_ENDONLY    = 1 << 5,
  G_REGEX_UNGREEDY          = 1 << 9,
  G_REGEX_RAW               = 1 << 11,
  G_REGEX_NO_AUTO_CAPTURE   = 1 << 12,
  G_REGEX_OPTIMIZE          = 1 << 13,
  G_REGEX_FIRSTLINE         = 1 << 18,
  G_REGEX_DUPNAMES          = 1 << 19,
  G_REGEX_NEWLINE_CR        = 1 << 20,
  G_REGEX_NEWLINE_LF        = 1 << 21,
  G_REGEX_NEWLINE_CRLF      = G_REGEX_NEWLINE_CR | G_REGEX_NEWLINE_LF,
  G_REGEX_NEWLINE_ANYCRLF   = G_REGEX_NEWLINE_CR | 1 << 22,
  G_REGEX_BSR_ANYCRLF       = 1 << 23,
  G_REGEX_JAVASCRIPT_COMPAT = 1 << 25
} GRegexCompileFlags;





































































typedef enum
{
  G_REGEX_MATCH_ANCHORED         = 1 << 4,
  G_REGEX_MATCH_NOTBOL           = 1 << 7,
  G_REGEX_MATCH_NOTEOL           = 1 << 8,
  G_REGEX_MATCH_NOTEMPTY         = 1 << 10,
  G_REGEX_MATCH_PARTIAL          = 1 << 15,
  G_REGEX_MATCH_NEWLINE_CR       = 1 << 20,
  G_REGEX_MATCH_NEWLINE_LF       = 1 << 21,
  G_REGEX_MATCH_NEWLINE_CRLF     = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_LF,
  G_REGEX_MATCH_NEWLINE_ANY      = 1 << 22,
  G_REGEX_MATCH_NEWLINE_ANYCRLF  = G_REGEX_MATCH_NEWLINE_CR | G_REGEX_MATCH_NEWLINE_ANY,
  G_REGEX_MATCH_BSR_ANYCRLF      = 1 << 23,
  G_REGEX_MATCH_BSR_ANY          = 1 << 24,
  G_REGEX_MATCH_PARTIAL_SOFT     = G_REGEX_MATCH_PARTIAL,
  G_REGEX_MATCH_PARTIAL_HARD     = 1 << 27,
  G_REGEX_MATCH_NOTEMPTY_ATSTART = 1 << 28
} GRegexMatchFlags;









typedef struct _GRegex		GRegex;








typedef struct _GMatchInfo	GMatchInfo;


















typedef gboolean (*GRegexEvalCallback)		(const GMatchInfo *match_info,
						 GString          *result,
						 gpointer          user_data);


extern
GRegex		 *g_regex_new			(const gchar         *pattern,
						 GRegexCompileFlags   compile_options,
						 GRegexMatchFlags     match_options,
						 GError             **error);
extern
GRegex           *g_regex_ref			(GRegex              *regex);
extern
void		  g_regex_unref			(GRegex              *regex);
extern
const gchar	 *g_regex_get_pattern		(const GRegex        *regex);
extern
gint		  g_regex_get_max_backref	(const GRegex        *regex);
extern
gint		  g_regex_get_capture_count	(const GRegex        *regex);
extern
gboolean          g_regex_get_has_cr_or_lf      (const GRegex        *regex);
extern
gint              g_regex_get_max_lookbehind    (const GRegex        *regex);
extern
gint		  g_regex_get_string_number	(const GRegex        *regex, 
						 const gchar         *name);
extern
gchar		 *g_regex_escape_string		(const gchar         *string,
						 gint                 length);
extern
gchar		 *g_regex_escape_nul		(const gchar         *string,
						 gint                 length);

extern
GRegexCompileFlags g_regex_get_compile_flags    (const GRegex        *regex);
extern
GRegexMatchFlags   g_regex_get_match_flags      (const GRegex        *regex);


extern
gboolean	  g_regex_match_simple		(const gchar         *pattern,
						 const gchar         *string,
						 GRegexCompileFlags   compile_options,
						 GRegexMatchFlags     match_options);
extern
gboolean	  g_regex_match			(const GRegex        *regex,
						 const gchar         *string,
						 GRegexMatchFlags     match_options,
						 GMatchInfo         **match_info);
extern
gboolean	  g_regex_match_full		(const GRegex        *regex,
						 const gchar         *string,
						 gssize               string_len,
						 gint                 start_position,
						 GRegexMatchFlags     match_options,
						 GMatchInfo         **match_info,
						 GError             **error);
extern
gboolean	  g_regex_match_all		(const GRegex        *regex,
						 const gchar         *string,
						 GRegexMatchFlags     match_options,
						 GMatchInfo         **match_info);
extern
gboolean	  g_regex_match_all_full	(const GRegex        *regex,
						 const gchar         *string,
						 gssize               string_len,
						 gint                 start_position,
						 GRegexMatchFlags     match_options,
						 GMatchInfo         **match_info,
						 GError             **error);


extern
gchar		**g_regex_split_simple		(const gchar         *pattern,
						 const gchar         *string,
						 GRegexCompileFlags   compile_options,
						 GRegexMatchFlags     match_options);
extern
gchar		**g_regex_split			(const GRegex        *regex,
						 const gchar         *string,
						 GRegexMatchFlags     match_options);
extern
gchar		**g_regex_split_full		(const GRegex        *regex,
						 const gchar         *string,
						 gssize               string_len,
						 gint                 start_position,
						 GRegexMatchFlags     match_options,
						 gint                 max_tokens,
						 GError             **error);


extern
gchar		 *g_regex_replace		(const GRegex        *regex,
						 const gchar         *string,
						 gssize               string_len,
						 gint                 start_position,
						 const gchar         *replacement,
						 GRegexMatchFlags     match_options,
						 GError             **error);
extern
gchar		 *g_regex_replace_literal	(const GRegex        *regex,
						 const gchar         *string,
						 gssize               string_len,
						 gint                 start_position,
						 const gchar         *replacement,
						 GRegexMatchFlags     match_options,
						 GError             **error);
extern
gchar		 *g_regex_replace_eval		(const GRegex        *regex,
						 const gchar         *string,
						 gssize               string_len,
						 gint                 start_position,
						 GRegexMatchFlags     match_options,
						 GRegexEvalCallback   eval,
						 gpointer             user_data,
						 GError             **error);
extern
gboolean	  g_regex_check_replacement	(const gchar         *replacement,
						 gboolean            *has_references,
						 GError             **error);


extern
GRegex		 *g_match_info_get_regex	(const GMatchInfo    *match_info);
extern
const gchar      *g_match_info_get_string       (const GMatchInfo    *match_info);

extern
GMatchInfo       *g_match_info_ref              (GMatchInfo          *match_info);
extern
void              g_match_info_unref            (GMatchInfo          *match_info);
extern
void		  g_match_info_free		(GMatchInfo          *match_info);
extern
gboolean	  g_match_info_next		(GMatchInfo          *match_info,
						 GError             **error);
extern
gboolean	  g_match_info_matches		(const GMatchInfo    *match_info);
extern
gint		  g_match_info_get_match_count	(const GMatchInfo    *match_info);
extern
gboolean	  g_match_info_is_partial_match	(const GMatchInfo    *match_info);
extern
gchar		 *g_match_info_expand_references(const GMatchInfo    *match_info,
						 const gchar         *string_to_expand,
						 GError             **error);
extern
gchar		 *g_match_info_fetch		(const GMatchInfo    *match_info,
						 gint                 match_num);
extern
gboolean	  g_match_info_fetch_pos	(const GMatchInfo    *match_info,
						 gint                 match_num,
						 gint                *start_pos,
						 gint                *end_pos);
extern
gchar		 *g_match_info_fetch_named	(const GMatchInfo    *match_info,
						 const gchar         *name);
extern
gboolean	  g_match_info_fetch_named_pos	(const GMatchInfo    *match_info,
						 const gchar         *name,
						 gint                *start_pos,
						 gint                *end_pos);
extern
gchar		**g_match_info_fetch_all	(const GMatchInfo    *match_info);



#line 610 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gregex.h"
#line 73 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gscanner.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gscanner.h"






typedef struct _GScanner	GScanner;
typedef struct _GScannerConfig	GScannerConfig;
typedef union  _GTokenValue     GTokenValue;

typedef void		(*GScannerMsgFunc)	(GScanner      *scanner,
						 gchar	       *message,
						 gboolean	error);


















typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;


typedef enum
{
  G_TOKEN_EOF			=   0,
  
  G_TOKEN_LEFT_PAREN		= '(',
  G_TOKEN_RIGHT_PAREN		= ')',
  G_TOKEN_LEFT_CURLY		= '{',
  G_TOKEN_RIGHT_CURLY		= '}',
  G_TOKEN_LEFT_BRACE		= '[',
  G_TOKEN_RIGHT_BRACE		= ']',
  G_TOKEN_EQUAL_SIGN		= '=',
  G_TOKEN_COMMA			= ',',
  
  G_TOKEN_NONE			= 256,
  
  G_TOKEN_ERROR,
  
  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,
  
  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,
  
  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,

  
  G_TOKEN_LAST
} GTokenType;

union	_GTokenValue
{
  gpointer	v_symbol;
  gchar		*v_identifier;
  gulong	v_binary;
  gulong	v_octal;
  gulong	v_int;
  guint64       v_int64;
  gdouble	v_float;
  gulong	v_hex;
  gchar		*v_string;
  gchar		*v_comment;
  guchar	v_char;
  guint		v_error;
};

struct	_GScannerConfig
{
  

  gchar		*cset_skip_characters;		
  gchar		*cset_identifier_first;
  gchar		*cset_identifier_nth;
  gchar		*cpair_comment_single;		
  
  

  guint		case_sensitive : 1;
  
  


  guint		skip_comment_multi : 1;		
  guint		skip_comment_single : 1;	
  guint		scan_comment_multi : 1;		
  guint		scan_identifier : 1;
  guint		scan_identifier_1char : 1;
  guint		scan_identifier_NULL : 1;
  guint		scan_symbols : 1;
  guint		scan_binary : 1;
  guint		scan_octal : 1;
  guint		scan_float : 1;
  guint		scan_hex : 1;			
  guint		scan_hex_dollar : 1;		
  guint		scan_string_sq : 1;		
  guint		scan_string_dq : 1;		
  guint		numbers_2_int : 1;		
  guint		int_2_float : 1;		
  guint		identifier_2_string : 1;
  guint		char_2_token : 1;		
  guint		symbol_2_token : 1;
  guint		scope_0_fallback : 1;		
  guint		store_int64 : 1; 		

  
  guint		padding_dummy;
};

struct	_GScanner
{
  
  gpointer		user_data;
  guint			max_parse_errors;
  
  
  guint			parse_errors;
  
  
  const gchar		*input_name;
  
  
  GData			*qdata;
  
  
  GScannerConfig	*config;
  
  
  GTokenType		token;
  GTokenValue		value;
  guint			line;
  guint			position;
  
  
  GTokenType		next_token;
  GTokenValue		next_value;
  guint			next_line;
  guint			next_position;

  
  
  GHashTable		*symbol_table;
  gint			input_fd;
  const gchar		*text;
  const gchar		*text_end;
  gchar			*buffer;
  guint			scope_id;

  
  
  GScannerMsgFunc	msg_handler;
};

extern
GScanner*	g_scanner_new			(const GScannerConfig *config_templ);
extern
void		g_scanner_destroy		(GScanner	*scanner);
extern
void		g_scanner_input_file		(GScanner	*scanner,
						 gint		input_fd);
extern
void		g_scanner_sync_file_offset	(GScanner	*scanner);
extern
void		g_scanner_input_text		(GScanner	*scanner,
						 const	gchar	*text,
						 guint		text_len);
extern
GTokenType	g_scanner_get_next_token	(GScanner	*scanner);
extern
GTokenType	g_scanner_peek_next_token	(GScanner	*scanner);
extern
GTokenType	g_scanner_cur_token		(GScanner	*scanner);
extern
GTokenValue	g_scanner_cur_value		(GScanner	*scanner);
extern
guint		g_scanner_cur_line		(GScanner	*scanner);
extern
guint		g_scanner_cur_position		(GScanner	*scanner);
extern
gboolean	g_scanner_eof			(GScanner	*scanner);
extern
guint		g_scanner_set_scope		(GScanner	*scanner,
						 guint		 scope_id);
extern
void		g_scanner_scope_add_symbol	(GScanner	*scanner,
						 guint		 scope_id,
						 const gchar	*symbol,
						 gpointer	value);
extern
void		g_scanner_scope_remove_symbol	(GScanner	*scanner,
						 guint		 scope_id,
						 const gchar	*symbol);
extern
gpointer	g_scanner_scope_lookup_symbol	(GScanner	*scanner,
						 guint		 scope_id,
						 const gchar	*symbol);
extern
void		g_scanner_scope_foreach_symbol	(GScanner	*scanner,
						 guint		 scope_id,
						 GHFunc		 func,
						 gpointer	 user_data);
extern
gpointer	g_scanner_lookup_symbol		(GScanner	*scanner,
						 const gchar	*symbol);
extern
void		g_scanner_unexp_token		(GScanner	*scanner,
						 GTokenType	expected_token,
						 const gchar	*identifier_spec,
						 const gchar	*symbol_spec,
						 const gchar	*symbol_name,
						 const gchar	*message,
						 gint		 is_error);
extern
void		g_scanner_error			(GScanner	*scanner,
						 const gchar	*format,
						 ...) ;
extern
void		g_scanner_warn			(GScanner	*scanner,
						 const gchar	*format,
						 ...) ;



















#line 300 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gscanner.h"



#line 304 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gscanner.h"
#line 74 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gsequence.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gsequence.h"





typedef struct _GSequence      GSequence;
typedef struct _GSequenceNode  GSequenceIter;

typedef gint (* GSequenceIterCompareFunc) (GSequenceIter *a,
                                           GSequenceIter *b,
                                           gpointer       data);



extern
GSequence *    g_sequence_new                (GDestroyNotify            data_destroy);
extern
void           g_sequence_free               (GSequence                *seq);
extern
gint           g_sequence_get_length         (GSequence                *seq);
extern
void           g_sequence_foreach            (GSequence                *seq,
                                              GFunc                     func,
                                              gpointer                  user_data);
extern
void           g_sequence_foreach_range      (GSequenceIter            *begin,
                                              GSequenceIter            *end,
                                              GFunc                     func,
                                              gpointer                  user_data);
extern
void           g_sequence_sort               (GSequence                *seq,
                                              GCompareDataFunc          cmp_func,
                                              gpointer                  cmp_data);
extern
void           g_sequence_sort_iter          (GSequence                *seq,
                                              GSequenceIterCompareFunc  cmp_func,
                                              gpointer                  cmp_data);
extern
gboolean       g_sequence_is_empty           (GSequence                *seq);



extern
GSequenceIter *g_sequence_get_begin_iter     (GSequence                *seq);
extern
GSequenceIter *g_sequence_get_end_iter       (GSequence                *seq);
extern
GSequenceIter *g_sequence_get_iter_at_pos    (GSequence                *seq,
                                              gint                      pos);
extern
GSequenceIter *g_sequence_append             (GSequence                *seq,
                                              gpointer                  data);
extern
GSequenceIter *g_sequence_prepend            (GSequence                *seq,
                                              gpointer                  data);
extern
GSequenceIter *g_sequence_insert_before      (GSequenceIter            *iter,
                                              gpointer                  data);
extern
void           g_sequence_move               (GSequenceIter            *src,
                                              GSequenceIter            *dest);
extern
void           g_sequence_swap               (GSequenceIter            *a,
                                              GSequenceIter            *b);
extern
GSequenceIter *g_sequence_insert_sorted      (GSequence                *seq,
                                              gpointer                  data,
                                              GCompareDataFunc          cmp_func,
                                              gpointer                  cmp_data);
extern
GSequenceIter *g_sequence_insert_sorted_iter (GSequence                *seq,
                                              gpointer                  data,
                                              GSequenceIterCompareFunc  iter_cmp,
                                              gpointer                  cmp_data);
extern
void           g_sequence_sort_changed       (GSequenceIter            *iter,
                                              GCompareDataFunc          cmp_func,
                                              gpointer                  cmp_data);
extern
void           g_sequence_sort_changed_iter  (GSequenceIter            *iter,
                                              GSequenceIterCompareFunc  iter_cmp,
                                              gpointer                  cmp_data);
extern
void           g_sequence_remove             (GSequenceIter            *iter);
extern
void           g_sequence_remove_range       (GSequenceIter            *begin,
                                              GSequenceIter            *end);
extern
void           g_sequence_move_range         (GSequenceIter            *dest,
                                              GSequenceIter            *begin,
                                              GSequenceIter            *end);
extern
GSequenceIter *g_sequence_search             (GSequence                *seq,
                                              gpointer                  data,
                                              GCompareDataFunc          cmp_func,
                                              gpointer                  cmp_data);
extern
GSequenceIter *g_sequence_search_iter        (GSequence                *seq,
                                              gpointer                  data,
                                              GSequenceIterCompareFunc  iter_cmp,
                                              gpointer                  cmp_data);
extern
GSequenceIter *g_sequence_lookup             (GSequence                *seq,
                                              gpointer                  data,
                                              GCompareDataFunc          cmp_func,
                                              gpointer                  cmp_data);
extern
GSequenceIter *g_sequence_lookup_iter        (GSequence                *seq,
                                              gpointer                  data,
                                              GSequenceIterCompareFunc  iter_cmp,
                                              gpointer                  cmp_data);



extern
gpointer       g_sequence_get                (GSequenceIter            *iter);
extern
void           g_sequence_set                (GSequenceIter            *iter,
                                              gpointer                  data);


extern
gboolean       g_sequence_iter_is_begin      (GSequenceIter            *iter);
extern
gboolean       g_sequence_iter_is_end        (GSequenceIter            *iter);
extern
GSequenceIter *g_sequence_iter_next          (GSequenceIter            *iter);
extern
GSequenceIter *g_sequence_iter_prev          (GSequenceIter            *iter);
extern
gint           g_sequence_iter_get_position  (GSequenceIter            *iter);
extern
GSequenceIter *g_sequence_iter_move          (GSequenceIter            *iter,
                                              gint                      delta);
extern
GSequence *    g_sequence_iter_get_sequence  (GSequenceIter            *iter);



extern
gint           g_sequence_iter_compare       (GSequenceIter            *a,
                                              GSequenceIter            *b);
extern
GSequenceIter *g_sequence_range_get_midpoint (GSequenceIter            *begin,
                                              GSequenceIter            *end);



#line 174 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gsequence.h"
#line 75 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gshell.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gshell.h"







typedef enum
{
  
  G_SHELL_ERROR_BAD_QUOTING,
  
  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;

extern
GQuark g_shell_error_quark (void);

extern
gchar*   g_shell_quote      (const gchar   *unquoted_string);
extern
gchar*   g_shell_unquote    (const gchar   *quoted_string,
                             GError       **error);
extern
gboolean g_shell_parse_argv (const gchar   *command_line,
                             gint          *argcp,
                             gchar       ***argvp,
                             GError       **error);



#line 58 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gshell.h"
#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gslice.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gslice.h"







extern
gpointer g_slice_alloc          	(gsize	       block_size)  ;
extern
gpointer g_slice_alloc0         	(gsize         block_size)  ;
extern
gpointer g_slice_copy                   (gsize         block_size,
                                         gconstpointer mem_block)  ;
extern
void     g_slice_free1          	(gsize         block_size,
					 gpointer      mem_block);
extern
void     g_slice_free_chain_with_offset (gsize         block_size,
					 gpointer      mem_chain,
					 gsize         next_offset);































typedef enum {
  G_SLICE_CONFIG_ALWAYS_MALLOC = 1,
  G_SLICE_CONFIG_BYPASS_MAGAZINES,
  G_SLICE_CONFIG_WORKING_SET_MSECS,
  G_SLICE_CONFIG_COLOR_INCREMENT,
  G_SLICE_CONFIG_CHUNK_SIZES,
  G_SLICE_CONFIG_CONTENTION_COUNTER
} GSliceConfig;

__declspec(deprecated) extern
void     g_slice_set_config	   (GSliceConfig ckey, gint64 value);
__declspec(deprecated) extern
gint64   g_slice_get_config	   (GSliceConfig ckey);
__declspec(deprecated) extern
gint64*  g_slice_get_config_state  (GSliceConfig ckey, gint64 address, guint *n_values);








#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gslice.h"
#line 77 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gspawn.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gspawn.h"











































typedef enum
{
  G_SPAWN_ERROR_FORK,   
  G_SPAWN_ERROR_READ,   
  G_SPAWN_ERROR_CHDIR,  
  G_SPAWN_ERROR_ACCES,  
  G_SPAWN_ERROR_PERM,   
  G_SPAWN_ERROR_TOO_BIG,

  G_SPAWN_ERROR_2BIG = G_SPAWN_ERROR_TOO_BIG,
#line 79 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gspawn.h"
  G_SPAWN_ERROR_NOEXEC, 
  G_SPAWN_ERROR_NAMETOOLONG, 
  G_SPAWN_ERROR_NOENT,       
  G_SPAWN_ERROR_NOMEM,       
  G_SPAWN_ERROR_NOTDIR,      
  G_SPAWN_ERROR_LOOP,        
  G_SPAWN_ERROR_TXTBUSY,     
  G_SPAWN_ERROR_IO,          
  G_SPAWN_ERROR_NFILE,       
  G_SPAWN_ERROR_MFILE,       
  G_SPAWN_ERROR_INVAL,       
  G_SPAWN_ERROR_ISDIR,       
  G_SPAWN_ERROR_LIBBAD,      
  G_SPAWN_ERROR_FAILED       


} GSpawnError;












































typedef void (* GSpawnChildSetupFunc) (gpointer user_data);





























typedef enum
{
  G_SPAWN_DEFAULT                = 0,
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD      = 1 << 1,
  
  G_SPAWN_SEARCH_PATH            = 1 << 2,
  
  G_SPAWN_STDOUT_TO_DEV_NULL     = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL     = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN   = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO     = 1 << 6,
  G_SPAWN_SEARCH_PATH_FROM_ENVP  = 1 << 7,
  G_SPAWN_CLOEXEC_PIPES          = 1 << 8
} GSpawnFlags;

extern
GQuark g_spawn_error_quark (void);
extern
GQuark g_spawn_exit_error_quark (void);

extern
gboolean g_spawn_async (const gchar           *working_directory,
                        gchar                **argv,
                        gchar                **envp,
                        GSpawnFlags            flags,
                        GSpawnChildSetupFunc   child_setup,
                        gpointer               user_data,
                        GPid                  *child_pid,
                        GError               **error);





extern
gboolean g_spawn_async_with_pipes (const gchar          *working_directory,
                                   gchar               **argv,
                                   gchar               **envp,
                                   GSpawnFlags           flags,
                                   GSpawnChildSetupFunc  child_setup,
                                   gpointer              user_data,
                                   GPid                 *child_pid,
                                   gint                 *standard_input,
                                   gint                 *standard_output,
                                   gint                 *standard_error,
                                   GError              **error);






extern
gboolean g_spawn_sync         (const gchar          *working_directory,
                               gchar               **argv,
                               gchar               **envp,
                               GSpawnFlags           flags,
                               GSpawnChildSetupFunc  child_setup,
                               gpointer              user_data,
                               gchar               **standard_output,
                               gchar               **standard_error,
                               gint                 *exit_status,
                               GError              **error);

extern
gboolean g_spawn_command_line_sync  (const gchar          *command_line,
                                     gchar               **standard_output,
                                     gchar               **standard_error,
                                     gint                 *exit_status,
                                     GError              **error);
extern
gboolean g_spawn_command_line_async (const gchar          *command_line,
                                     GError              **error);

extern
gboolean g_spawn_check_exit_status (gint      exit_status,
				    GError  **error);

extern
void g_spawn_close_pid (GPid pid);









extern
gboolean g_spawn_async_utf8              (const gchar           *working_directory,
                                          gchar                **argv,
                                          gchar                **envp,
                                          GSpawnFlags            flags,
                                          GSpawnChildSetupFunc   child_setup,
                                          gpointer               user_data,
                                          GPid                  *child_pid,
                                          GError               **error);
extern
gboolean g_spawn_async_with_pipes_utf8   (const gchar           *working_directory,
                                          gchar                **argv,
                                          gchar                **envp,
                                          GSpawnFlags            flags,
                                          GSpawnChildSetupFunc   child_setup,
                                          gpointer               user_data,
                                          GPid                  *child_pid,
                                          gint                  *standard_input,
                                          gint                  *standard_output,
                                          gint                  *standard_error,
                                          GError               **error);
extern
gboolean g_spawn_sync_utf8               (const gchar           *working_directory,
                                          gchar                **argv,
                                          gchar                **envp,
                                          GSpawnFlags            flags,
                                          GSpawnChildSetupFunc   child_setup,
                                          gpointer               user_data,
                                          gchar                **standard_output,
                                          gchar                **standard_error,
                                          gint                  *exit_status,
                                          GError               **error);

extern
gboolean g_spawn_command_line_sync_utf8  (const gchar           *command_line,
                                          gchar                **standard_output,
                                          gchar                **standard_error,
                                          gint                  *exit_status,
                                          GError               **error);
extern
gboolean g_spawn_command_line_async_utf8 (const gchar           *command_line,
                                          GError               **error);
#line 303 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gspawn.h"
#line 304 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gspawn.h"



#line 308 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gspawn.h"
#line 79 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstrfuncs.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstrfuncs.h"








typedef enum {
  G_ASCII_ALNUM  = 1 << 0,
  G_ASCII_ALPHA  = 1 << 1,
  G_ASCII_CNTRL  = 1 << 2,
  G_ASCII_DIGIT  = 1 << 3,
  G_ASCII_GRAPH  = 1 << 4,
  G_ASCII_LOWER  = 1 << 5,
  G_ASCII_PRINT  = 1 << 6,
  G_ASCII_PUNCT  = 1 << 7,
  G_ASCII_SPACE  = 1 << 8,
  G_ASCII_UPPER  = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;

extern __declspec(dllimport) const guint16 * const g_ascii_table;


































extern
gchar                 g_ascii_tolower  (gchar        c) ;
extern
gchar                 g_ascii_toupper  (gchar        c) ;

extern
gint                  g_ascii_digit_value  (gchar    c) ;
extern
gint                  g_ascii_xdigit_value (gchar    c) ;





extern
gchar*	              g_strdelimit     (gchar	     *string,
					const gchar  *delimiters,
					gchar	      new_delimiter);
extern
gchar*	              g_strcanon       (gchar        *string,
					const gchar  *valid_chars,
					gchar         substitutor);
extern
const gchar *         g_strerror       (gint	      errnum) ;
extern
const gchar *         g_strsignal      (gint	      signum) ;
extern
gchar *	              g_strreverse     (gchar	     *string);
extern
gsize	              g_strlcpy	       (gchar	     *dest,
					const gchar  *src,
					gsize         dest_size);
extern
gsize	              g_strlcat        (gchar	     *dest,
					const gchar  *src,
					gsize         dest_size);
extern
gchar *               g_strstr_len     (const gchar  *haystack,
					gssize        haystack_len,
					const gchar  *needle);
extern
gchar *               g_strrstr        (const gchar  *haystack,
					const gchar  *needle);
extern
gchar *               g_strrstr_len    (const gchar  *haystack,
					gssize        haystack_len,
					const gchar  *needle);

extern
gboolean              g_str_has_suffix (const gchar  *str,
					const gchar  *suffix);
extern
gboolean              g_str_has_prefix (const gchar  *str,
					const gchar  *prefix);



extern
gdouble	              g_strtod         (const gchar  *nptr,
					gchar	    **endptr);
extern
gdouble	              g_ascii_strtod   (const gchar  *nptr,
					gchar	    **endptr);
extern
guint64		      g_ascii_strtoull (const gchar *nptr,
					gchar      **endptr,
					guint        base);
extern
gint64		      g_ascii_strtoll  (const gchar *nptr,
					gchar      **endptr,
					guint        base);




extern
gchar *               g_ascii_dtostr   (gchar        *buffer,
					gint          buf_len,
					gdouble       d);
extern
gchar *               g_ascii_formatd  (gchar        *buffer,
					gint          buf_len,
					const gchar  *format,
					gdouble       d);


extern
gchar*                g_strchug        (gchar        *string);

extern
gchar*                g_strchomp       (gchar        *string);



extern
gint                  g_ascii_strcasecmp  (const gchar *s1,
					   const gchar *s2);
extern
gint                  g_ascii_strncasecmp (const gchar *s1,
					   const gchar *s2,
					   gsize        n);
extern
gchar*                g_ascii_strdown     (const gchar *str,
					   gssize       len) ;
extern
gchar*                g_ascii_strup       (const gchar *str,
					   gssize       len) ;

extern
gboolean              g_str_is_ascii      (const gchar *str);

__declspec(deprecated) extern
gint                  g_strcasecmp     (const gchar *s1,
                                        const gchar *s2);
__declspec(deprecated) extern
gint                  g_strncasecmp    (const gchar *s1,
                                        const gchar *s2,
                                        guint        n);
__declspec(deprecated) extern
gchar*                g_strdown        (gchar       *string);
__declspec(deprecated) extern
gchar*                g_strup          (gchar       *string);





extern
gchar*	              g_strdup	       (const gchar *str) ;
extern
gchar*	              g_strdup_printf  (const gchar *format,
					...)  ;
extern
gchar*	              g_strdup_vprintf (const gchar *format,
					va_list      args)  ;
extern
gchar*	              g_strndup	       (const gchar *str,
					gsize        n) ;  
extern
gchar*	              g_strnfill       (gsize        length,  
					gchar        fill_char) ;
extern
gchar*	              g_strconcat      (const gchar *string1,
					...)  ;
extern
gchar*                g_strjoin	       (const gchar  *separator,
					...)  ;





extern
gchar*                g_strcompress    (const gchar *source) ;









extern
gchar*                g_strescape      (const gchar *source,
					const gchar *exceptions) ;

extern
gpointer              g_memdup	       (gconstpointer mem,
					guint	       byte_size)  ;










typedef gchar** GStrv;
extern
gchar**	              g_strsplit       (const gchar  *string,
					const gchar  *delimiter,
					gint          max_tokens) ;
extern
gchar **	      g_strsplit_set   (const gchar *string,
					const gchar *delimiters,
					gint         max_tokens) ;
extern
gchar*                g_strjoinv       (const gchar  *separator,
					gchar       **str_array) ;
extern
void                  g_strfreev       (gchar       **str_array);
extern
gchar**               g_strdupv        (gchar       **str_array) ;
extern
guint                 g_strv_length    (gchar       **str_array);

extern
gchar*                g_stpcpy         (gchar        *dest,
                                        const char   *src);

extern
gchar *                 g_str_to_ascii                                  (const gchar   *str,
                                                                         const gchar   *from_locale);

extern
gchar **                g_str_tokenize_and_fold                         (const gchar   *string,
                                                                         const gchar   *translit_locale,
                                                                         gchar       ***ascii_alternates);

extern
gboolean                g_str_match_string                              (const gchar   *search_term,
                                                                         const gchar   *potential_hit,
                                                                         gboolean       accept_alternates);

extern
gboolean              g_strv_contains  (const gchar * const *strv,
                                        const gchar         *str);



#line 312 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstrfuncs.h"
#line 80 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstringchunk.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstringchunk.h"





typedef struct _GStringChunk GStringChunk;

extern
GStringChunk* g_string_chunk_new          (gsize size);
extern
void          g_string_chunk_free         (GStringChunk *chunk);
extern
void          g_string_chunk_clear        (GStringChunk *chunk);
extern
gchar*        g_string_chunk_insert       (GStringChunk *chunk,
                                           const gchar  *string);
extern
gchar*        g_string_chunk_insert_len   (GStringChunk *chunk,
                                           const gchar  *string,
                                           gssize        len);
extern
gchar*        g_string_chunk_insert_const (GStringChunk *chunk,
                                           const gchar  *string);



#line 58 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gstringchunk.h"
#line 82 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtestutils.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtestutils.h"








typedef struct GTestCase  GTestCase;
typedef struct GTestSuite GTestSuite;
typedef void (*GTestFunc)        (void);
typedef void (*GTestDataFunc)    (gconstpointer user_data);
typedef void (*GTestFixtureFunc) (gpointer      fixture,
                                  gconstpointer user_data);

















































































#line 121 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtestutils.h"

extern
int     g_strcmp0                       (const char     *str1,
                                         const char     *str2);


extern
void    g_test_minimized_result         (double          minimized_quantity,
                                         const char     *format,
                                         ...) ;
extern
void    g_test_maximized_result         (double          maximized_quantity,
                                         const char     *format,
                                         ...) ;


extern
void    g_test_init                     (int            *argc,
                                         char         ***argv,
                                         ...) ;









extern
gboolean g_test_subprocess (void);


extern
int     g_test_run                      (void);

extern
void    g_test_add_func                 (const char     *testpath,
                                         GTestFunc       test_func);

extern
void    g_test_add_data_func            (const char     *testpath,
                                         gconstpointer   test_data,
                                         GTestDataFunc   test_func);

extern
void    g_test_add_data_func_full       (const char     *testpath,
                                         gpointer        test_data,
                                         GTestDataFunc   test_func,
                                         GDestroyNotify  data_free_func);


extern
void    g_test_fail                     (void);
extern
void    g_test_incomplete               (const gchar *msg);
extern
void    g_test_skip                     (const gchar *msg);
extern
gboolean g_test_failed                  (void);
extern
void    g_test_set_nonfatal_assertions  (void);















extern
void    g_test_message                  (const char *format,
                                         ...) ;
extern
void    g_test_bug_base                 (const char *uri_pattern);
extern
void    g_test_bug                      (const char *bug_uri_snippet);

extern
void    g_test_timer_start              (void);
extern
double  g_test_timer_elapsed            (void); 
extern
double  g_test_timer_last               (void); 


extern
void    g_test_queue_free               (gpointer gfree_pointer);
extern
void    g_test_queue_destroy            (GDestroyNotify destroy_func,
                                         gpointer       destroy_data);


typedef enum {
  G_TEST_TRAP_SILENCE_STDOUT    = 1 << 7,
  G_TEST_TRAP_SILENCE_STDERR    = 1 << 8,
  G_TEST_TRAP_INHERIT_STDIN     = 1 << 9
} GTestTrapFlags;

__declspec(deprecated("is deprecated. Use '" "g_test_trap_subprocess" "' instead")) extern
gboolean g_test_trap_fork               (guint64              usec_timeout,
                                         GTestTrapFlags       test_trap_flags);

typedef enum {
  G_TEST_SUBPROCESS_INHERIT_STDIN  = 1 << 0,
  G_TEST_SUBPROCESS_INHERIT_STDOUT = 1 << 1,
  G_TEST_SUBPROCESS_INHERIT_STDERR = 1 << 2
} GTestSubprocessFlags;

extern
void     g_test_trap_subprocess         (const char           *test_path,
                                         guint64               usec_timeout,
                                         GTestSubprocessFlags  test_flags);

extern
gboolean g_test_trap_has_passed         (void);
extern
gboolean g_test_trap_reached_timeout    (void);









extern
gint32   g_test_rand_int                (void);
extern
gint32   g_test_rand_int_range          (gint32          begin,
                                         gint32          end);
extern
double   g_test_rand_double             (void);
extern
double   g_test_rand_double_range       (double          range_start,
                                         double          range_end);






extern
GTestCase*    g_test_create_case        (const char       *test_name,
                                         gsize             data_size,
                                         gconstpointer     test_data,
                                         GTestFixtureFunc  data_setup,
                                         GTestFixtureFunc  data_test,
                                         GTestFixtureFunc  data_teardown);
extern
GTestSuite*   g_test_create_suite       (const char       *suite_name);
extern
GTestSuite*   g_test_get_root           (void);
extern
void          g_test_suite_add          (GTestSuite     *suite,
                                         GTestCase      *test_case);
extern
void          g_test_suite_add_suite    (GTestSuite     *suite,
                                         GTestSuite     *nestedsuite);
extern
int           g_test_run_suite          (GTestSuite     *suite);

extern
void    g_test_trap_assertions          (const char     *domain,
                                         const char     *file,
                                         int             line,
                                         const char     *func,
                                         guint64         assertion_flags, 
                                         const char     *pattern);
extern
void    g_assertion_message             (const char     *domain,
                                         const char     *file,
                                         int             line,
                                         const char     *func,
                                         const char     *message);
extern
void    g_assertion_message_expr        (const char     *domain,
                                         const char     *file,
                                         int             line,
                                         const char     *func,
                                         const char     *expr) ;
extern
void    g_assertion_message_cmpstr      (const char     *domain,
                                         const char     *file,
                                         int             line,
                                         const char     *func,
                                         const char     *expr,
                                         const char     *arg1,
                                         const char     *cmp,
                                         const char     *arg2);
extern
void    g_assertion_message_cmpnum      (const char     *domain,
                                         const char     *file,
                                         int             line,
                                         const char     *func,
                                         const char     *expr,
                                         long double     arg1,
                                         const char     *cmp,
                                         long double     arg2,
                                         char            numtype);
extern
void    g_assertion_message_error       (const char     *domain,
                                         const char     *file,
                                         int             line,
                                         const char     *func,
                                         const char     *expr,
                                         const GError   *error,
                                         GQuark          error_domain,
                                         int             error_code);
extern
void    g_test_add_vtable               (const char     *testpath,
                                         gsize           data_size,
                                         gconstpointer   test_data,
                                         GTestFixtureFunc  data_setup,
                                         GTestFixtureFunc  data_test,
                                         GTestFixtureFunc  data_teardown);
typedef struct {
  gboolean      test_initialized;
  gboolean      test_quick;     
  gboolean      test_perf;      
  gboolean      test_verbose;   
  gboolean      test_quiet;     
  gboolean      test_undefined; 
} GTestConfig;
extern __declspec(dllimport) const GTestConfig * const g_test_config_vars;


typedef enum {
  G_TEST_LOG_NONE,
  G_TEST_LOG_ERROR,             
  G_TEST_LOG_START_BINARY,      
  G_TEST_LOG_LIST_CASE,         
  G_TEST_LOG_SKIP_CASE,         
  G_TEST_LOG_START_CASE,        
  G_TEST_LOG_STOP_CASE,         
  G_TEST_LOG_MIN_RESULT,        
  G_TEST_LOG_MAX_RESULT,        
  G_TEST_LOG_MESSAGE,           
  G_TEST_LOG_START_SUITE,
  G_TEST_LOG_STOP_SUITE
} GTestLogType;

typedef struct {
  GTestLogType  log_type;
  guint         n_strings;
  gchar       **strings; 
  guint         n_nums;
  long double  *nums;
} GTestLogMsg;
typedef struct {
  
  GString     *data;
  GSList      *msgs;
} GTestLogBuffer;

extern
const char*     g_test_log_type_name    (GTestLogType    log_type);
extern
GTestLogBuffer* g_test_log_buffer_new   (void);
extern
void            g_test_log_buffer_free  (GTestLogBuffer *tbuffer);
extern
void            g_test_log_buffer_push  (GTestLogBuffer *tbuffer,
                                         guint           n_bytes,
                                         const guint8   *bytes);
extern
GTestLogMsg*    g_test_log_buffer_pop   (GTestLogBuffer *tbuffer);
extern
void            g_test_log_msg_free     (GTestLogMsg    *tmsg);














typedef gboolean        (*GTestLogFatalFunc)    (const gchar    *log_domain,
                                                 GLogLevelFlags  log_level,
                                                 const gchar    *message,
                                                 gpointer        user_data);
extern
void
g_test_log_set_fatal_handler            (GTestLogFatalFunc log_func,
                                         gpointer          user_data);

extern
void    g_test_expect_message                    (const gchar    *log_domain,
                                                  GLogLevelFlags  log_level,
                                                  const gchar    *pattern);
extern
void    g_test_assert_expected_messages_internal (const char     *domain,
                                                  const char     *file,
                                                  int             line,
                                                  const char     *func);

typedef enum
{
  G_TEST_DIST,
  G_TEST_BUILT
} GTestFileType;

extern
gchar * g_test_build_filename                    (GTestFileType   file_type,
                                                  const gchar    *first_path,
                                                  ...) ;
extern
const gchar *g_test_get_dir                      (GTestFileType   file_type);
extern
const gchar *g_test_get_filename                 (GTestFileType   file_type,
                                                  const gchar    *first_path,
                                                  ...) ;





#line 453 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtestutils.h"
#line 83 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthreadpool.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthreadpool.h"





typedef struct _GThreadPool GThreadPool;




struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};

extern
GThreadPool *   g_thread_pool_new               (GFunc            func,
                                                 gpointer         user_data,
                                                 gint             max_threads,
                                                 gboolean         exclusive,
                                                 GError         **error);
extern
void            g_thread_pool_free              (GThreadPool     *pool,
                                                 gboolean         immediate,
                                                 gboolean         wait_);
extern
gboolean        g_thread_pool_push              (GThreadPool     *pool,
                                                 gpointer         data,
                                                 GError         **error);
extern
guint           g_thread_pool_unprocessed       (GThreadPool     *pool);
extern
void            g_thread_pool_set_sort_function (GThreadPool      *pool,
                                                 GCompareDataFunc  func,
                                                 gpointer          user_data);
extern
gboolean        g_thread_pool_move_to_front     (GThreadPool      *pool,
                                                 gpointer          data);

extern
gboolean        g_thread_pool_set_max_threads   (GThreadPool     *pool,
                                                 gint             max_threads,
                                                 GError         **error);
extern
gint            g_thread_pool_get_max_threads   (GThreadPool     *pool);
extern
guint           g_thread_pool_get_num_threads   (GThreadPool     *pool);

extern
void            g_thread_pool_set_max_unused_threads (gint  max_threads);
extern
gint            g_thread_pool_get_max_unused_threads (void);
extern
guint           g_thread_pool_get_num_unused_threads (void);
extern
void            g_thread_pool_stop_unused_threads    (void);
extern
void            g_thread_pool_set_max_idle_time      (guint interval);
extern
guint           g_thread_pool_get_max_idle_time      (void);



#line 97 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gthreadpool.h"
#line 85 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtimer.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtimer.h"









typedef struct _GTimer		GTimer;



extern
GTimer*  g_timer_new	         (void);
extern
void	 g_timer_destroy         (GTimer      *timer);
extern
void	 g_timer_start	         (GTimer      *timer);
extern
void	 g_timer_stop	         (GTimer      *timer);
extern
void	 g_timer_reset	         (GTimer      *timer);
extern
void	 g_timer_continue        (GTimer      *timer);
extern
gdouble  g_timer_elapsed         (GTimer      *timer,
				  gulong      *microseconds);

extern
void     g_usleep                (gulong       microseconds);

extern
void     g_time_val_add          (GTimeVal    *time_, 
                                  glong        microseconds);
extern
gboolean g_time_val_from_iso8601 (const gchar *iso_date,
				  GTimeVal    *time_);
extern
gchar*   g_time_val_to_iso8601   (GTimeVal    *time_) ;



#line 75 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtimer.h"
#line 86 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtrashstack.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtrashstack.h"





typedef struct _GTrashStack GTrashStack;
struct _GTrashStack
{
  GTrashStack *next;
};

__declspec(deprecated) extern
void      g_trash_stack_push   (GTrashStack **stack_p,
                                gpointer      data_p);
__declspec(deprecated) extern
gpointer  g_trash_stack_pop    (GTrashStack **stack_p);
__declspec(deprecated) extern
gpointer  g_trash_stack_peek   (GTrashStack **stack_p);
__declspec(deprecated) extern
guint     g_trash_stack_height (GTrashStack **stack_p);



#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtrashstack.h"
#line 88 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtree.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtree.h"





typedef struct _GTree  GTree;

typedef gboolean (*GTraverseFunc) (gpointer  key,
                                   gpointer  value,
                                   gpointer  data);



extern
GTree*   g_tree_new             (GCompareFunc      key_compare_func);
extern
GTree*   g_tree_new_with_data   (GCompareDataFunc  key_compare_func,
                                 gpointer          key_compare_data);
extern
GTree*   g_tree_new_full        (GCompareDataFunc  key_compare_func,
                                 gpointer          key_compare_data,
                                 GDestroyNotify    key_destroy_func,
                                 GDestroyNotify    value_destroy_func);
extern
GTree*   g_tree_ref             (GTree            *tree);
extern
void     g_tree_unref           (GTree            *tree);
extern
void     g_tree_destroy         (GTree            *tree);
extern
void     g_tree_insert          (GTree            *tree,
                                 gpointer          key,
                                 gpointer          value);
extern
void     g_tree_replace         (GTree            *tree,
                                 gpointer          key,
                                 gpointer          value);
extern
gboolean g_tree_remove          (GTree            *tree,
                                 gconstpointer     key);
extern
gboolean g_tree_steal           (GTree            *tree,
                                 gconstpointer     key);
extern
gpointer g_tree_lookup          (GTree            *tree,
                                 gconstpointer     key);
extern
gboolean g_tree_lookup_extended (GTree            *tree,
                                 gconstpointer     lookup_key,
                                 gpointer         *orig_key,
                                 gpointer         *value);
extern
void     g_tree_foreach         (GTree            *tree,
                                 GTraverseFunc	   func,
                                 gpointer	   user_data);

__declspec(deprecated) extern
void     g_tree_traverse        (GTree            *tree,
                                 GTraverseFunc     traverse_func,
                                 GTraverseType     traverse_type,
                                 gpointer          user_data);

extern
gpointer g_tree_search          (GTree            *tree,
                                 GCompareFunc      search_func,
                                 gconstpointer     user_data);
extern
gint     g_tree_height          (GTree            *tree);
extern
gint     g_tree_nnodes          (GTree            *tree);



#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gtree.h"
#line 89 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gurifuncs.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gurifuncs.h"








































extern
char *   g_uri_unescape_string       (const char *escaped_string,
				      const char *illegal_characters);
extern
char *   g_uri_unescape_segment      (const char *escaped_string,
				      const char *escaped_string_end,
				      const char *illegal_characters);
extern
char *   g_uri_parse_scheme          (const char *uri);
extern
char *   g_uri_escape_string         (const char *unescaped,
				      const char *reserved_chars_allowed,
				      gboolean    allow_utf8);



#line 84 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gurifuncs.h"
#line 92 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/guuid.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/guuid.h"





extern
gboolean      g_uuid_string_is_valid       (const gchar   *str);

extern
gchar *       g_uuid_string_random         (void);



#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/guuid.h"
#line 94 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversion.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversion.h"





extern __declspec(dllimport) const guint glib_major_version;
extern __declspec(dllimport) const guint glib_minor_version;
extern __declspec(dllimport) const guint glib_micro_version;
extern __declspec(dllimport) const guint glib_interface_age;
extern __declspec(dllimport) const guint glib_binary_age;

extern
const gchar * glib_check_version (guint required_major,
                                  guint required_minor,
                                  guint required_micro);









#line 56 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gversion.h"
#line 97 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"









#line 41 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"

























extern
gint		g_win32_ftruncate	(gint		 f,
					 guint		 size);
#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"







extern
gchar* 		g_win32_getlocale  (void);





extern
gchar*          g_win32_error_message (gint error);












extern
gchar*          g_win32_get_package_installation_directory_of_module (gpointer hmodule);

__declspec(deprecated("is deprecated. Use '" "g_win32_check_windows_version" "' instead")) extern
guint		g_win32_get_windows_version (void);

extern
gchar*          g_win32_locale_filename_from_utf8 (const gchar *utf8filename);

extern
gchar **        g_win32_get_command_line (void);










#line 120 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"

extern
gchar *g_win32_get_package_installation_directory_utf8    (const gchar *package,
                                                           const gchar *dll_name);
extern
gchar *g_win32_get_package_installation_subdirectory_utf8 (const gchar *package,
                                                           const gchar *dll_name,
                                                           const gchar *subdir);
#line 129 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"
#line 130 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"












typedef enum
{
  G_WIN32_OS_ANY,
  G_WIN32_OS_WORKSTATION,
  G_WIN32_OS_SERVER,
} GWin32OSType;

extern
gboolean g_win32_check_windows_version (const gint major,
                                        const gint minor,
                                        const gint spver,
                                        const GWin32OSType os_type);



#line 158 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"

#line 160 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/gwin32.h"
#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 101 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gallocator.h"




















#line 22 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gallocator.h"





typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk  GMemChunk;













__declspec(deprecated) extern
GMemChunk *     g_mem_chunk_new         (const gchar  *name,
                                         gint          atom_size,
                                         gsize         area_size,
                                         gint          type);
__declspec(deprecated) extern
void            g_mem_chunk_destroy     (GMemChunk    *mem_chunk);
__declspec(deprecated) extern
gpointer        g_mem_chunk_alloc       (GMemChunk    *mem_chunk);
__declspec(deprecated) extern
gpointer        g_mem_chunk_alloc0      (GMemChunk    *mem_chunk);
__declspec(deprecated) extern
void            g_mem_chunk_free        (GMemChunk    *mem_chunk,
                                         gpointer      mem);
__declspec(deprecated) extern
void            g_mem_chunk_clean       (GMemChunk    *mem_chunk);
__declspec(deprecated) extern
void            g_mem_chunk_reset       (GMemChunk    *mem_chunk);
__declspec(deprecated) extern
void            g_mem_chunk_print       (GMemChunk    *mem_chunk);
__declspec(deprecated) extern
void            g_mem_chunk_info        (void);
__declspec(deprecated) extern
void            g_blow_chunks           (void);


__declspec(deprecated) extern
GAllocator *    g_allocator_new         (const gchar  *name,
                                         guint         n_preallocs);
__declspec(deprecated) extern
void            g_allocator_free        (GAllocator   *allocator);
__declspec(deprecated) extern
void            g_list_push_allocator   (GAllocator   *allocator);
__declspec(deprecated) extern
void            g_list_pop_allocator    (void);
__declspec(deprecated) extern
void            g_slist_push_allocator  (GAllocator   *allocator);
__declspec(deprecated) extern
void            g_slist_pop_allocator   (void);
__declspec(deprecated) extern
void            g_node_push_allocator   (GAllocator   *allocator);
__declspec(deprecated) extern
void            g_node_pop_allocator    (void);



#line 89 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gallocator.h"
#line 104 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcache.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcache.h"







typedef struct _GCache          GCache;

typedef gpointer        (*GCacheNewFunc)        (gpointer       key);
typedef gpointer        (*GCacheDupFunc)        (gpointer       value);
typedef void            (*GCacheDestroyFunc)    (gpointer       value);



__declspec(deprecated) extern
GCache*  g_cache_new           (GCacheNewFunc      value_new_func,
                                GCacheDestroyFunc  value_destroy_func,
                                GCacheDupFunc      key_dup_func,
                                GCacheDestroyFunc  key_destroy_func,
                                GHashFunc          hash_key_func,
                                GHashFunc          hash_value_func,
                                GEqualFunc         key_equal_func);
__declspec(deprecated) extern
void     g_cache_destroy       (GCache            *cache);
__declspec(deprecated) extern
gpointer g_cache_insert        (GCache            *cache,
                                gpointer           key);
__declspec(deprecated) extern
void     g_cache_remove        (GCache            *cache,
                                gconstpointer      value);
__declspec(deprecated) extern
void     g_cache_key_foreach   (GCache            *cache,
                                GHFunc             func,
                                gpointer           user_data);
__declspec(deprecated) extern
void     g_cache_value_foreach (GCache            *cache,
                                GHFunc             func,
                                gpointer           user_data);

#line 72 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcache.h"



#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcache.h"
#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcompletion.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcompletion.h"





typedef struct _GCompletion     GCompletion;

typedef gchar*          (*GCompletionFunc)      (gpointer);




typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
                                        const gchar *s2,
                                        gsize        n);

struct _GCompletion
{
  GList* items;
  GCompletionFunc func;
 
  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};

__declspec(deprecated) extern
GCompletion* g_completion_new           (GCompletionFunc func);
__declspec(deprecated) extern
void         g_completion_add_items     (GCompletion*    cmp,
                                         GList*          items);
__declspec(deprecated) extern
void         g_completion_remove_items  (GCompletion*    cmp,
                                         GList*          items);
__declspec(deprecated) extern
void         g_completion_clear_items   (GCompletion*    cmp);
__declspec(deprecated) extern
GList*       g_completion_complete      (GCompletion*    cmp,
                                         const gchar*    prefix,
                                         gchar**         new_prefix);
__declspec(deprecated) extern
GList*       g_completion_complete_utf8 (GCompletion  *cmp,
                                         const gchar*    prefix,
                                         gchar**         new_prefix);
__declspec(deprecated) extern
void         g_completion_set_compare   (GCompletion *cmp,
                                         GCompletionStrncmpFunc strncmp_func);
__declspec(deprecated) extern
void         g_completion_free          (GCompletion*    cmp);



#line 84 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gcompletion.h"
#line 106 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gmain.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gmain.h"








































































































#line 136 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gmain.h"



#line 140 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gmain.h"
#line 107 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/grel.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/grel.h"





typedef struct _GRelation       GRelation;
typedef struct _GTuples         GTuples;

struct _GTuples
{
  guint len;
};
























__declspec(deprecated) extern
GRelation* g_relation_new     (gint         fields);
__declspec(deprecated) extern
void       g_relation_destroy (GRelation   *relation);
__declspec(deprecated) extern
void       g_relation_index   (GRelation   *relation,
                               gint         field,
                               GHashFunc    hash_func,
                               GEqualFunc   key_equal_func);
__declspec(deprecated) extern
void       g_relation_insert  (GRelation   *relation,
                               ...);
__declspec(deprecated) extern
gint       g_relation_delete  (GRelation   *relation,
                               gconstpointer  key,
                               gint         field);
__declspec(deprecated) extern
GTuples*   g_relation_select  (GRelation   *relation,
                               gconstpointer  key,
                               gint         field);
__declspec(deprecated) extern
gint       g_relation_count   (GRelation   *relation,
                               gconstpointer  key,
                               gint         field);
__declspec(deprecated) extern
gboolean   g_relation_exists  (GRelation   *relation,
                               ...);
__declspec(deprecated) extern
void       g_relation_print   (GRelation   *relation);
__declspec(deprecated) extern
void       g_tuples_destroy   (GTuples     *tuples);
__declspec(deprecated) extern
gpointer   g_tuples_index     (GTuples     *tuples,
                               gint         index_,
                               gint         field);



#line 106 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/grel.h"
#line 108 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gthread.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gthread.h"







typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority;

#line 47 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gthread.h"

struct  _GThread
{
  
  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};



typedef struct _GThreadFunctions GThreadFunctions;
struct _GThreadFunctions
{
  GMutex*  (*mutex_new)           (void);
  void     (*mutex_lock)          (GMutex               *mutex);
  gboolean (*mutex_trylock)       (GMutex               *mutex);
  void     (*mutex_unlock)        (GMutex               *mutex);
  void     (*mutex_free)          (GMutex               *mutex);
  GCond*   (*cond_new)            (void);
  void     (*cond_signal)         (GCond                *cond);
  void     (*cond_broadcast)      (GCond                *cond);
  void     (*cond_wait)           (GCond                *cond,
                                   GMutex               *mutex);
  gboolean (*cond_timed_wait)     (GCond                *cond,
                                   GMutex               *mutex,
                                   GTimeVal             *end_time);
  void      (*cond_free)          (GCond                *cond);
  GPrivate* (*private_new)        (GDestroyNotify        destructor);
  gpointer  (*private_get)        (GPrivate             *private_key);
  void      (*private_set)        (GPrivate             *private_key,
                                   gpointer              data);
  void      (*thread_create)      (GThreadFunc           func,
                                   gpointer              data,
                                   gulong                stack_size,
                                   gboolean              joinable,
                                   gboolean              bound,
                                   GThreadPriority       priority,
                                   gpointer              thread,
                                   GError              **error);
  void      (*thread_yield)       (void);
  void      (*thread_join)        (gpointer              thread);
  void      (*thread_exit)        (void);
  void      (*thread_set_priority)(gpointer              thread,
                                   GThreadPriority       priority);
  void      (*thread_self)        (gpointer              thread);
  gboolean  (*thread_equal)       (gpointer              thread1,
                                   gpointer              thread2);
};

extern __declspec(dllimport) GThreadFunctions       g_thread_functions_for_glib_use;
extern __declspec(dllimport) gboolean               g_thread_use_default_impl;

extern __declspec(dllimport) guint64   (*g_thread_gettime) (void);

__declspec(deprecated("is deprecated. Use '" "g_thread_new" "' instead")) extern
GThread *g_thread_create       (GThreadFunc       func,
                                gpointer          data,
                                gboolean          joinable,
                                GError          **error);

__declspec(deprecated("is deprecated. Use '" "g_thread_new" "' instead")) extern
GThread *g_thread_create_full  (GThreadFunc       func,
                                gpointer          data,
                                gulong            stack_size,
                                gboolean          joinable,
                                gboolean          bound,
                                GThreadPriority   priority,
                                GError          **error);

__declspec(deprecated) extern
void     g_thread_set_priority (GThread          *thread,
                                GThreadPriority   priority);

__declspec(deprecated) extern
void     g_thread_foreach      (GFunc             thread_func,
                                gpointer          user_data);








typedef struct
{
  GMutex *mutex;




} GStaticMutex;








__declspec(deprecated("is deprecated. Use '" "g_mutex_init" "' instead")) extern
void    g_static_mutex_init           (GStaticMutex *mutex);
__declspec(deprecated("is deprecated. Use '" "g_mutex_clear" "' instead")) extern
void    g_static_mutex_free           (GStaticMutex *mutex);
__declspec(deprecated("is deprecated. Use '" "GMutex" "' instead")) extern
GMutex *g_static_mutex_get_mutex_impl (GStaticMutex *mutex);

typedef struct _GStaticRecMutex GStaticRecMutex;
struct _GStaticRecMutex
{
  
  GStaticMutex mutex;
  guint depth;

  
  union {

    void *owner;


#line 170 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gthread.h"
    gdouble dummy;
  } unused;
};


__declspec(deprecated("is deprecated. Use '" "g_rec_mutex_init" "' instead")) extern
void     g_static_rec_mutex_init        (GStaticRecMutex *mutex);

__declspec(deprecated("is deprecated. Use '" "g_rec_mutex_lock" "' instead")) extern
void     g_static_rec_mutex_lock        (GStaticRecMutex *mutex);

__declspec(deprecated("is deprecated. Use '" "g_rec_mutex_try_lock" "' instead")) extern
gboolean g_static_rec_mutex_trylock     (GStaticRecMutex *mutex);

__declspec(deprecated("is deprecated. Use '" "g_rec_mutex_unlock" "' instead")) extern
void     g_static_rec_mutex_unlock      (GStaticRecMutex *mutex);

__declspec(deprecated) extern
void     g_static_rec_mutex_lock_full   (GStaticRecMutex *mutex,
                                         guint            depth);

__declspec(deprecated) extern
guint    g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);

__declspec(deprecated("is deprecated. Use '" "g_rec_mutex_free" "' instead")) extern
void     g_static_rec_mutex_free        (GStaticRecMutex *mutex);

typedef struct _GStaticRWLock GStaticRWLock;
struct _GStaticRWLock
{
  
  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
};



__declspec(deprecated("is deprecated. Use '" "g_rw_lock_init" "' instead")) extern
void      g_static_rw_lock_init           (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_reader_lock" "' instead")) extern
void      g_static_rw_lock_reader_lock    (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_reader_trylock" "' instead")) extern
gboolean  g_static_rw_lock_reader_trylock (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_reader_unlock" "' instead")) extern
void      g_static_rw_lock_reader_unlock  (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_writer_lock" "' instead")) extern
void      g_static_rw_lock_writer_lock    (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_writer_trylock" "' instead")) extern
gboolean  g_static_rw_lock_writer_trylock (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_writer_unlock" "' instead")) extern
void      g_static_rw_lock_writer_unlock  (GStaticRWLock *lock);

__declspec(deprecated("is deprecated. Use '" "g_rw_lock_free" "' instead")) extern
void      g_static_rw_lock_free           (GStaticRWLock *lock);

__declspec(deprecated) extern
GPrivate *      g_private_new             (GDestroyNotify notify);

typedef struct _GStaticPrivate  GStaticPrivate;
struct _GStaticPrivate
{
  
  guint index;
};


__declspec(deprecated) extern
void     g_static_private_init           (GStaticPrivate *private_key);

__declspec(deprecated("is deprecated. Use '" "g_private_get" "' instead")) extern
gpointer g_static_private_get            (GStaticPrivate *private_key);

__declspec(deprecated("is deprecated. Use '" "g_private_set" "' instead")) extern
void     g_static_private_set            (GStaticPrivate *private_key,
                                          gpointer        data,
                                          GDestroyNotify  notify);

__declspec(deprecated) extern
void     g_static_private_free           (GStaticPrivate *private_key);

__declspec(deprecated) extern
gboolean g_once_init_enter_impl          (volatile gsize *location);

__declspec(deprecated) extern
void     g_thread_init                   (gpointer vtable);
__declspec(deprecated) extern
void    g_thread_init_with_errorcheck_mutexes (gpointer vtable);

__declspec(deprecated) extern
gboolean g_thread_get_initialized        (void);

extern __declspec(dllimport) gboolean g_threads_got_initialized;



__declspec(deprecated) extern
GMutex *        g_mutex_new             (void);
__declspec(deprecated) extern
void            g_mutex_free            (GMutex *mutex);
__declspec(deprecated) extern
GCond *         g_cond_new              (void);
__declspec(deprecated) extern
void            g_cond_free             (GCond  *cond);
__declspec(deprecated) extern
gboolean        g_cond_timed_wait       (GCond          *cond,
                                         GMutex         *mutex,
                                         GTimeVal       *timeval);

#line 290 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gthread.h"



#line 294 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/deprecated/gthread.h"
#line 109 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 110 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glib-autocleanups.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib/glib-autocleanups.h"

static inline void
g_autoptr_cleanup_generic_gfree (void *p)
{
  void **pp = (void**)p;
  g_free (*pp);
}

static inline void
g_autoptr_cleanup_gstring_free (GString *string)
{
  if (string)
    g_string_free (string, (!(0)));
}





















































#line 112 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"



#line 116 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gbinding.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"







































































































































































































































































































































































typedef gsize                           GType;


#line 386 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"
typedef struct _GValue                  GValue;
typedef union  _GTypeCValue             GTypeCValue;
typedef struct _GTypePlugin             GTypePlugin;
typedef struct _GTypeClass              GTypeClass;
typedef struct _GTypeInterface          GTypeInterface;
typedef struct _GTypeInstance           GTypeInstance;
typedef struct _GTypeInfo               GTypeInfo;
typedef struct _GTypeFundamentalInfo    GTypeFundamentalInfo;
typedef struct _GInterfaceInfo          GInterfaceInfo;
typedef struct _GTypeValueTable         GTypeValueTable;
typedef struct _GTypeQuery		GTypeQuery;









struct _GTypeClass
{
  
  GType g_type;
};





struct _GTypeInstance
{
  
  GTypeClass *g_class;
};





struct _GTypeInterface
{
  
  GType g_type;         
  GType g_instance_type;
};










struct _GTypeQuery
{
  GType		type;
  const gchar  *type_name;
  guint		class_size;
  guint		instance_size;
};

































































































































































































































typedef enum	
{
  G_TYPE_DEBUG_NONE	= 0,
  G_TYPE_DEBUG_OBJECTS	= 1 << 0,
  G_TYPE_DEBUG_SIGNALS	= 1 << 1,
  G_TYPE_DEBUG_INSTANCE_COUNT = 1 << 2,
  G_TYPE_DEBUG_MASK	= 0x07
} GTypeDebugFlags;



__declspec(deprecated) extern
void                  g_type_init                    (void);
__declspec(deprecated) extern
void                  g_type_init_with_debug_flags   (GTypeDebugFlags  debug_flags);
extern
const gchar *         g_type_name                    (GType            type);
extern
GQuark                g_type_qname                   (GType            type);
extern
GType                 g_type_from_name               (const gchar     *name);
extern
GType                 g_type_parent                  (GType            type);
extern
guint                 g_type_depth                   (GType            type);
extern
GType                 g_type_next_base               (GType            leaf_type,
						      GType            root_type);
extern
gboolean              g_type_is_a                    (GType            type,
						      GType            is_a_type);
extern
gpointer              g_type_class_ref               (GType            type);
extern
gpointer              g_type_class_peek              (GType            type);
extern
gpointer              g_type_class_peek_static       (GType            type);
extern
void                  g_type_class_unref             (gpointer         g_class);
extern
gpointer              g_type_class_peek_parent       (gpointer         g_class);
extern
gpointer              g_type_interface_peek          (gpointer         instance_class,
						      GType            iface_type);
extern
gpointer              g_type_interface_peek_parent   (gpointer         g_iface);

extern
gpointer              g_type_default_interface_ref   (GType            g_type);
extern
gpointer              g_type_default_interface_peek  (GType            g_type);
extern
void                  g_type_default_interface_unref (gpointer         g_iface);


extern
GType*                g_type_children                (GType            type,
						      guint           *n_children);
extern
GType*                g_type_interfaces              (GType            type,
						      guint           *n_interfaces);


extern
void                  g_type_set_qdata               (GType            type,
						      GQuark           quark,
						      gpointer         data);
extern
gpointer              g_type_get_qdata               (GType            type,
						      GQuark           quark);
extern
void		      g_type_query		     (GType	       type,
						      GTypeQuery      *query);

extern
int                   g_type_get_instance_count      (GType            type);















typedef void   (*GBaseInitFunc)              (gpointer         g_class);










typedef void   (*GBaseFinalizeFunc)          (gpointer         g_class);





































































































typedef void   (*GClassInitFunc)             (gpointer         g_class,
					      gpointer         class_data);













typedef void   (*GClassFinalizeFunc)         (gpointer         g_class,
					      gpointer         class_data);


















typedef void   (*GInstanceInitFunc)          (GTypeInstance   *instance,
					      gpointer         g_class);












typedef void   (*GInterfaceInitFunc)         (gpointer         g_iface,
					      gpointer         iface_data);









typedef void   (*GInterfaceFinalizeFunc)     (gpointer         g_iface,
					      gpointer         iface_data);



















typedef gboolean (*GTypeClassCacheFunc)	     (gpointer	       cache_data,
					      GTypeClass      *g_class);











typedef void     (*GTypeInterfaceCheckFunc)  (gpointer	       check_data,
					      gpointer         g_iface);










typedef enum    
{
  G_TYPE_FLAG_CLASSED           = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE    = (1 << 1),
  G_TYPE_FLAG_DERIVABLE         = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE    = (1 << 3)
} GTypeFundamentalFlags;










typedef enum    
{
  G_TYPE_FLAG_ABSTRACT		= (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT	= (1 << 5)
} GTypeFlags;































struct _GTypeInfo
{
  
  guint16                class_size;
  
  GBaseInitFunc          base_init;
  GBaseFinalizeFunc      base_finalize;
  
  
  GClassInitFunc         class_init;
  GClassFinalizeFunc     class_finalize;
  gconstpointer          class_data;
  
  
  guint16                instance_size;
  guint16                n_preallocs;
  GInstanceInitFunc      instance_init;
  
  
  const GTypeValueTable	*value_table;
};







struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags  type_flags;
};









struct _GInterfaceInfo
{
  GInterfaceInitFunc     interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer               interface_data;
};






























































































































































struct _GTypeValueTable
{
  void     (*value_init)         (GValue       *value);
  void     (*value_free)         (GValue       *value);
  void     (*value_copy)         (const GValue *src_value,
				  GValue       *dest_value);
  
  gpointer (*value_peek_pointer) (const GValue *value);
  const gchar *collect_format;
  gchar*   (*collect_value)      (GValue       *value,
				  guint         n_collect_values,
				  GTypeCValue  *collect_values,
				  guint		collect_flags);
  const gchar *lcopy_format;
  gchar*   (*lcopy_value)        (const GValue *value,
				  guint         n_collect_values,
				  GTypeCValue  *collect_values,
				  guint		collect_flags);
};
extern
GType g_type_register_static		(GType			     parent_type,
					 const gchar		    *type_name,
					 const GTypeInfo	    *info,
					 GTypeFlags		     flags);
extern
GType g_type_register_static_simple     (GType                       parent_type,
					 const gchar                *type_name,
					 guint                       class_size,
					 GClassInitFunc              class_init,
					 guint                       instance_size,
					 GInstanceInitFunc           instance_init,
					 GTypeFlags	             flags);
  
extern
GType g_type_register_dynamic		(GType			     parent_type,
					 const gchar		    *type_name,
					 GTypePlugin		    *plugin,
					 GTypeFlags		     flags);
extern
GType g_type_register_fundamental	(GType			     type_id,
					 const gchar		    *type_name,
					 const GTypeInfo	    *info,
					 const GTypeFundamentalInfo *finfo,
					 GTypeFlags		     flags);
extern
void  g_type_add_interface_static	(GType			     instance_type,
					 GType			     interface_type,
					 const GInterfaceInfo	    *info);
extern
void  g_type_add_interface_dynamic	(GType			     instance_type,
					 GType			     interface_type,
					 GTypePlugin		    *plugin);
extern
void  g_type_interface_add_prerequisite (GType			     interface_type,
					 GType			     prerequisite_type);
extern
GType*g_type_interface_prerequisites    (GType                       interface_type,
					 guint                      *n_prerequisites);
extern
void     g_type_class_add_private       (gpointer                    g_class,
                                         gsize                       private_size);
extern
gint     g_type_add_instance_private    (GType                       class_type,
                                         gsize                       private_size);
extern
gpointer g_type_instance_get_private    (GTypeInstance              *instance,
                                         GType                       private_type);
extern
void     g_type_class_adjust_private_offset (gpointer                g_class,
                                             gint                   *private_size_or_offset);

extern
void      g_type_add_class_private      (GType    		     class_type,
					 gsize    		     private_size);
extern
gpointer  g_type_class_get_private      (GTypeClass 		    *klass,
					 GType			     private_type);
extern
gint      g_type_class_get_instance_private_offset (gpointer         g_class);

extern
void      g_type_ensure                 (GType                       type);
extern
guint     g_type_get_type_registration_serial (void);










































































































































































































































































































































































































































































































































































































































#line 1945 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"











































































































































#line 2085 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"












#line 2098 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"








































extern
GTypePlugin*	 g_type_get_plugin		(GType		     type);
extern
GTypePlugin*	 g_type_interface_get_plugin	(GType		     instance_type,
						 GType               interface_type);
extern
GType		 g_type_fundamental_next	(void);
extern
GType		 g_type_fundamental		(GType		     type_id);
extern
GTypeInstance*   g_type_create_instance         (GType               type);
extern
void             g_type_free_instance           (GTypeInstance      *instance);

extern
void		 g_type_add_class_cache_func    (gpointer	     cache_data,
						 GTypeClassCacheFunc cache_func);
extern
void		 g_type_remove_class_cache_func (gpointer	     cache_data,
						 GTypeClassCacheFunc cache_func);
extern
void             g_type_class_unref_uncached    (gpointer            g_class);

extern
void             g_type_add_interface_check     (gpointer	         check_data,
						 GTypeInterfaceCheckFunc check_func);
extern
void             g_type_remove_interface_check  (gpointer	         check_data,
						 GTypeInterfaceCheckFunc check_func);

extern
GTypeValueTable* g_type_value_table_peek        (GType		     type);



extern
gboolean	 g_type_check_instance          (GTypeInstance      *instance) ;
extern
GTypeInstance*   g_type_check_instance_cast     (GTypeInstance      *instance,
						 GType               iface_type);
extern
gboolean         g_type_check_instance_is_a	(GTypeInstance      *instance,
						 GType               iface_type) ;
extern
gboolean         g_type_check_instance_is_fundamentally_a (GTypeInstance *instance,
                                                           GType          fundamental_type) ;
extern
GTypeClass*      g_type_check_class_cast        (GTypeClass         *g_class,
						 GType               is_a_type);
extern
gboolean         g_type_check_class_is_a        (GTypeClass         *g_class,
						 GType               is_a_type) ;
extern
gboolean	 g_type_check_is_value_type     (GType		     type) ;
extern
gboolean	 g_type_check_value             (GValue		    *value) ;
extern
gboolean	 g_type_check_value_holds	(GValue		    *value,
						 GType		     type) ;
extern
gboolean         g_type_test_flags              (GType               type,
						 guint               flags) ;



extern
const gchar *    g_type_name_from_instance      (GTypeInstance	*instance);
extern
const gchar *    g_type_name_from_class         (GTypeClass	*g_class);











#line 2219 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"








































#line 2260 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"









#line 2270 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtype.h"
#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvalue.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvalue.h"



































































typedef void (*GValueTransform) (const GValue *src_value,
				 GValue       *dest_value);












struct _GValue
{
  
  GType		g_type;

  
  union {
    gint	v_int;
    guint	v_uint;
    glong	v_long;
    gulong	v_ulong;
    gint64      v_int64;
    guint64     v_uint64;
    gfloat	v_float;
    gdouble	v_double;
    gpointer	v_pointer;
  } data[2];
};



extern
GValue*         g_value_init	   	(GValue       *value,
					 GType         g_type);
extern
void            g_value_copy    	(const GValue *src_value,
					 GValue       *dest_value);
extern
GValue*         g_value_reset   	(GValue       *value);
extern
void            g_value_unset   	(GValue       *value);
extern
void		g_value_set_instance	(GValue	      *value,
					 gpointer      instance);
extern
void            g_value_init_from_instance   (GValue       *value,
                                              gpointer      instance);



extern
gboolean	g_value_fits_pointer	(const GValue *value);
extern
gpointer	g_value_peek_pointer	(const GValue *value);



extern
gboolean g_value_type_compatible	(GType		 src_type,
					 GType		 dest_type);
extern
gboolean g_value_type_transformable	(GType           src_type,
					 GType           dest_type);
extern
gboolean g_value_transform		(const GValue   *src_value,
					 GValue         *dest_value);
extern
void	g_value_register_transform_func	(GType		 src_type,
					 GType		 dest_type,
					 GValueTransform transform_func);




























#line 195 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvalue.h"
#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparam.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparam.h"
































#line 58 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparam.h"























































       




































typedef enum
{
  G_PARAM_READABLE            = 1 << 0,
  G_PARAM_WRITABLE            = 1 << 1,
  G_PARAM_READWRITE           = (G_PARAM_READABLE | G_PARAM_WRITABLE),
  G_PARAM_CONSTRUCT	      = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY      = 1 << 3,
  G_PARAM_LAX_VALIDATION      = 1 << 4,
  G_PARAM_STATIC_NAME	      = 1 << 5,

  G_PARAM_PRIVATE	      = G_PARAM_STATIC_NAME,
#line 162 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparam.h"
  G_PARAM_STATIC_NICK	      = 1 << 6,
  G_PARAM_STATIC_BLURB	      = 1 << 7,
  
  G_PARAM_EXPLICIT_NOTIFY     = 1 << 30,
  
  G_PARAM_DEPRECATED          = (gint)(1u << 31)
} GParamFlags;

























typedef struct _GParamSpec      GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter	GParameter;
typedef struct _GParamSpecPool  GParamSpecPool;











struct _GParamSpec
{
  GTypeInstance  g_type_instance;

  const gchar   *name;          
  GParamFlags    flags;
  GType		 value_type;
  GType		 owner_type;	

  
  gchar         *_nick;
  gchar         *_blurb;
  GData		*qdata;
  guint          ref_count;
  guint		 param_id;	
};



















struct _GParamSpecClass
{
  GTypeClass      g_type_class;

  GType		  value_type;

  void	        (*finalize)		(GParamSpec   *pspec);

  
  void          (*value_set_default)    (GParamSpec   *pspec,
					 GValue       *value);
  gboolean      (*value_validate)       (GParamSpec   *pspec,
					 GValue       *value);
  gint          (*values_cmp)           (GParamSpec   *pspec,
					 const GValue *value1,
					 const GValue *value2);
  
  gpointer	  dummy[4];
};








struct _GParameter 
{
  const gchar *name;
  GValue       value;
};



extern
GParamSpec*	g_param_spec_ref		(GParamSpec    *pspec);
extern
void		g_param_spec_unref		(GParamSpec    *pspec);
extern
void		g_param_spec_sink		(GParamSpec    *pspec);
extern
GParamSpec*	g_param_spec_ref_sink   	(GParamSpec    *pspec);
extern
gpointer        g_param_spec_get_qdata		(GParamSpec    *pspec,
						 GQuark         quark);
extern
void            g_param_spec_set_qdata		(GParamSpec    *pspec,
						 GQuark         quark,
						 gpointer       data);
extern
void            g_param_spec_set_qdata_full	(GParamSpec    *pspec,
						 GQuark         quark,
						 gpointer       data,
						 GDestroyNotify destroy);
extern
gpointer        g_param_spec_steal_qdata	(GParamSpec    *pspec,
						 GQuark         quark);
extern
GParamSpec*     g_param_spec_get_redirect_target (GParamSpec   *pspec);

extern
void		g_param_value_set_default	(GParamSpec    *pspec,
						 GValue	       *value);
extern
gboolean	g_param_value_defaults		(GParamSpec    *pspec,
						 GValue	       *value);
extern
gboolean	g_param_value_validate		(GParamSpec    *pspec,
						 GValue	       *value);
extern
gboolean	g_param_value_convert		(GParamSpec    *pspec,
						 const GValue  *src_value,
						 GValue	       *dest_value,
						 gboolean	strict_validation);
extern
gint		g_param_values_cmp		(GParamSpec    *pspec,
						 const GValue  *value1,
						 const GValue  *value2);
extern
const gchar *   g_param_spec_get_name           (GParamSpec    *pspec);
extern
const gchar *   g_param_spec_get_nick           (GParamSpec    *pspec);
extern
const gchar *   g_param_spec_get_blurb          (GParamSpec    *pspec);
extern
void            g_value_set_param               (GValue	       *value,
						 GParamSpec    *param);
extern
GParamSpec*     g_value_get_param               (const GValue  *value);
extern
GParamSpec*     g_value_dup_param               (const GValue  *value);


extern
void           g_value_take_param               (GValue        *value,
					         GParamSpec    *param);
__declspec(deprecated("is deprecated. Use '" "g_value_take_param" "' instead")) extern
void           g_value_set_param_take_ownership (GValue        *value,
                                                 GParamSpec    *param);
extern
const GValue *  g_param_spec_get_default_value  (GParamSpec    *pspec);

extern
GQuark          g_param_spec_get_name_quark     (GParamSpec    *pspec);


typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
























struct _GParamSpecTypeInfo
{
  
  guint16         instance_size;                               
  guint16         n_preallocs;                                 
  void		(*instance_init)	(GParamSpec   *pspec); 

  
  GType           value_type;				       
  void          (*finalize)             (GParamSpec   *pspec); 
  void          (*value_set_default)    (GParamSpec   *pspec,  
					 GValue       *value);
  gboolean      (*value_validate)       (GParamSpec   *pspec,  
					 GValue       *value);
  gint          (*values_cmp)           (GParamSpec   *pspec,  
					 const GValue *value1,
					 const GValue *value2);
};
extern
GType	g_param_type_register_static	(const gchar		  *name,
					 const GParamSpecTypeInfo *pspec_info);


GType  _g_param_type_register_static_constant (const gchar              *name,
					       const GParamSpecTypeInfo *pspec_info,
					       GType                     opt_type);



extern
gpointer	g_param_spec_internal		(GType	        param_type,
						 const gchar   *name,
						 const gchar   *nick,
						 const gchar   *blurb,
						 GParamFlags    flags);
extern
GParamSpecPool* g_param_spec_pool_new		(gboolean	type_prefixing);
extern
void		g_param_spec_pool_insert	(GParamSpecPool	*pool,
						 GParamSpec	*pspec,
						 GType		 owner_type);
extern
void		g_param_spec_pool_remove	(GParamSpecPool	*pool,
						 GParamSpec	*pspec);
extern
GParamSpec*	g_param_spec_pool_lookup	(GParamSpecPool	*pool,
						 const gchar	*param_name,
						 GType		 owner_type,
						 gboolean	 walk_ancestors);
extern
GList*		g_param_spec_pool_list_owned	(GParamSpecPool	*pool,
						 GType		 owner_type);
extern
GParamSpec**	g_param_spec_pool_list		(GParamSpecPool	*pool,
						 GType		 owner_type,
						 guint		*n_pspecs_p);




















#line 453 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparam.h"
#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gclosure.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gclosure.h"


















































typedef struct _GClosure		 GClosure;
typedef struct _GClosureNotifyData	 GClosureNotifyData;










typedef void  (*GCallback)              (void);








typedef void  (*GClosureNotify)		(gpointer	 data,
					 GClosure	*closure);


















typedef void  (*GClosureMarshal)	(GClosure	*closure,
					 GValue         *return_value,
					 guint           n_param_values,
					 const GValue   *param_values,
					 gpointer        invocation_hint,
					 gpointer	 marshal_data);





















typedef void (* GVaClosureMarshal) (GClosure *closure,
				    GValue   *return_value,
				    gpointer  instance,
				    va_list   args,
				    gpointer  marshal_data,
				    int       n_params,
				    GType    *param_types);








typedef struct _GCClosure		 GCClosure;



struct _GClosureNotifyData
{
  gpointer       data;
  GClosureNotify notify;
};









struct _GClosure
{
  
  volatile      	guint	 ref_count : 15;
  

  volatile       	guint	 meta_marshal_nouse : 1;
  volatile       	guint	 n_guards : 1;
  volatile       	guint	 n_fnotifiers : 2;	
  volatile       	guint	 n_inotifiers : 8;	
  volatile       	guint	 in_inotify : 1;
  volatile       	guint	 floating : 1;
  
  volatile         	guint	 derivative_flag : 1;
  
  volatile       	guint	 in_marshal : 1;
  volatile       	guint	 is_invalid : 1;

  	void   (*marshal)  (GClosure       *closure,
					    GValue  *return_value,
					    guint           n_param_values,
					    const GValue   *param_values,
					    gpointer        invocation_hint,
					    gpointer	    marshal_data);
  	gpointer data;

  	GClosureNotifyData *notifiers;

  









};


struct _GCClosure
{
  GClosure	closure;
  gpointer	callback;
};



extern
GClosure* g_cclosure_new			(GCallback	callback_func,
						 gpointer	user_data,
						 GClosureNotify destroy_data);
extern
GClosure* g_cclosure_new_swap			(GCallback	callback_func,
						 gpointer	user_data,
						 GClosureNotify destroy_data);
extern
GClosure* g_signal_type_cclosure_new		(GType          itype,
						 guint          struct_offset);



extern
GClosure* g_closure_ref				(GClosure	*closure);
extern
void	  g_closure_sink			(GClosure	*closure);
extern
void	  g_closure_unref			(GClosure	*closure);

extern
GClosure* g_closure_new_simple			(guint		 sizeof_closure,
						 gpointer	 data);
extern
void	  g_closure_add_finalize_notifier	(GClosure       *closure,
						 gpointer	 notify_data,
						 GClosureNotify	 notify_func);
extern
void	  g_closure_remove_finalize_notifier	(GClosure       *closure,
						 gpointer	 notify_data,
						 GClosureNotify	 notify_func);
extern
void	  g_closure_add_invalidate_notifier	(GClosure       *closure,
						 gpointer	 notify_data,
						 GClosureNotify	 notify_func);
extern
void	  g_closure_remove_invalidate_notifier	(GClosure       *closure,
						 gpointer	 notify_data,
						 GClosureNotify	 notify_func);
extern
void	  g_closure_add_marshal_guards		(GClosure	*closure,
						 gpointer        pre_marshal_data,
						 GClosureNotify	 pre_marshal_notify,
						 gpointer        post_marshal_data,
						 GClosureNotify	 post_marshal_notify);
extern
void	  g_closure_set_marshal			(GClosure	*closure,
						 GClosureMarshal marshal);
extern
void	  g_closure_set_meta_marshal		(GClosure       *closure,
						 gpointer	 marshal_data,
						 GClosureMarshal meta_marshal);
extern
void	  g_closure_invalidate			(GClosure	*closure);
extern
void	  g_closure_invoke			(GClosure 	*closure,
						 GValue		*return_value,
						 guint		 n_param_values,
						 const GValue	*param_values,
						 gpointer	 invocation_hint);












extern
void g_cclosure_marshal_generic (GClosure     *closure,
                                 GValue       *return_gvalue,
                                 guint         n_param_values,
                                 const GValue *param_values,
                                 gpointer      invocation_hint,
                                 gpointer      marshal_data);

extern
void g_cclosure_marshal_generic_va (GClosure *closure,
				    GValue   *return_value,
				    gpointer  instance,
				    va_list   args_list,
				    gpointer  marshal_data,
				    int       n_params,
				    GType    *param_types);




#line 318 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gclosure.h"
#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsignal.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsignal.h"




#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gmarshal.h"







extern
void g_cclosure_marshal_VOID__VOID (GClosure     *closure,
                                    GValue       *return_value,
                                    guint         n_param_values,
                                    const GValue *param_values,
                                    gpointer      invocation_hint,
                                    gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__VOIDv (GClosure *closure,
                                     GValue   *return_value,
                                     gpointer  instance,
                                     va_list   args,
                                     gpointer  marshal_data,
                                     int       n_params,
                                     GType    *param_types);


extern
void g_cclosure_marshal_VOID__BOOLEAN (GClosure     *closure,
                                       GValue       *return_value,
                                       guint         n_param_values,
                                       const GValue *param_values,
                                       gpointer      invocation_hint,
                                       gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure,
                                        GValue   *return_value,
                                        gpointer  instance,
                                        va_list   args,
                                        gpointer  marshal_data,
                                        int       n_params,
                                        GType    *param_types);


extern
void g_cclosure_marshal_VOID__CHAR (GClosure     *closure,
                                    GValue       *return_value,
                                    guint         n_param_values,
                                    const GValue *param_values,
                                    gpointer      invocation_hint,
                                    gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__CHARv (GClosure *closure,
                                     GValue   *return_value,
                                     gpointer  instance,
                                     va_list   args,
                                     gpointer  marshal_data,
                                     int       n_params,
                                     GType    *param_types);


extern
void g_cclosure_marshal_VOID__UCHAR (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__UCHARv (GClosure *closure,
                                      GValue   *return_value,
                                      gpointer  instance,
                                      va_list   args,
                                      gpointer  marshal_data,
                                      int       n_params,
                                      GType    *param_types);


extern
void g_cclosure_marshal_VOID__INT (GClosure     *closure,
                                   GValue       *return_value,
                                   guint         n_param_values,
                                   const GValue *param_values,
                                   gpointer      invocation_hint,
                                   gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__INTv (GClosure *closure,
                                    GValue   *return_value,
                                    gpointer  instance,
                                    va_list   args,
                                    gpointer  marshal_data,
                                    int       n_params,
                                    GType    *param_types);


extern
void g_cclosure_marshal_VOID__UINT (GClosure     *closure,
                                    GValue       *return_value,
                                    guint         n_param_values,
                                    const GValue *param_values,
                                    gpointer      invocation_hint,
                                    gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__UINTv (GClosure *closure,
                                     GValue   *return_value,
                                     gpointer  instance,
                                     va_list   args,
                                     gpointer  marshal_data,
                                     int       n_params,
                                     GType    *param_types);


extern
void g_cclosure_marshal_VOID__LONG (GClosure     *closure,
                                    GValue       *return_value,
                                    guint         n_param_values,
                                    const GValue *param_values,
                                    gpointer      invocation_hint,
                                    gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__LONGv (GClosure *closure,
                                     GValue   *return_value,
                                     gpointer  instance,
                                     va_list   args,
                                     gpointer  marshal_data,
                                     int       n_params,
                                     GType    *param_types);


extern
void g_cclosure_marshal_VOID__ULONG (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__ULONGv (GClosure *closure,
                                      GValue   *return_value,
                                      gpointer  instance,
                                      va_list   args,
                                      gpointer  marshal_data,
                                      int       n_params,
                                      GType    *param_types);


extern
void g_cclosure_marshal_VOID__ENUM (GClosure     *closure,
                                    GValue       *return_value,
                                    guint         n_param_values,
                                    const GValue *param_values,
                                    gpointer      invocation_hint,
                                    gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__ENUMv (GClosure *closure,
                                     GValue   *return_value,
                                     gpointer  instance,
                                     va_list   args,
                                     gpointer  marshal_data,
                                     int       n_params,
                                     GType    *param_types);


extern
void g_cclosure_marshal_VOID__FLAGS (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure,
                                      GValue   *return_value,
                                      gpointer  instance,
                                      va_list   args,
                                      gpointer  marshal_data,
                                      int       n_params,
                                      GType    *param_types);


extern
void g_cclosure_marshal_VOID__FLOAT (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__FLOATv (GClosure *closure,
                                      GValue   *return_value,
                                      gpointer  instance,
                                      va_list   args,
                                      gpointer  marshal_data,
                                      int       n_params,
                                      GType    *param_types);


extern
void g_cclosure_marshal_VOID__DOUBLE (GClosure     *closure,
                                      GValue       *return_value,
                                      guint         n_param_values,
                                      const GValue *param_values,
                                      gpointer      invocation_hint,
                                      gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure,
                                       GValue   *return_value,
                                       gpointer  instance,
                                       va_list   args,
                                       gpointer  marshal_data,
                                       int       n_params,
                                       GType    *param_types);


extern
void g_cclosure_marshal_VOID__STRING (GClosure     *closure,
                                      GValue       *return_value,
                                      guint         n_param_values,
                                      const GValue *param_values,
                                      gpointer      invocation_hint,
                                      gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__STRINGv (GClosure *closure,
                                       GValue   *return_value,
                                       gpointer  instance,
                                       va_list   args,
                                       gpointer  marshal_data,
                                       int       n_params,
                                       GType    *param_types);


extern
void g_cclosure_marshal_VOID__PARAM (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__PARAMv (GClosure *closure,
                                      GValue   *return_value,
                                      gpointer  instance,
                                      va_list   args,
                                      gpointer  marshal_data,
                                      int       n_params,
                                      GType    *param_types);


extern
void g_cclosure_marshal_VOID__BOXED (GClosure     *closure,
                                     GValue       *return_value,
                                     guint         n_param_values,
                                     const GValue *param_values,
                                     gpointer      invocation_hint,
                                     gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure,
                                      GValue   *return_value,
                                      gpointer  instance,
                                      va_list   args,
                                      gpointer  marshal_data,
                                      int       n_params,
                                      GType    *param_types);


extern
void g_cclosure_marshal_VOID__POINTER (GClosure     *closure,
                                       GValue       *return_value,
                                       guint         n_param_values,
                                       const GValue *param_values,
                                       gpointer      invocation_hint,
                                       gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__POINTERv (GClosure *closure,
                                        GValue   *return_value,
                                        gpointer  instance,
                                        va_list   args,
                                        gpointer  marshal_data,
                                        int       n_params,
                                        GType    *param_types);


extern
void g_cclosure_marshal_VOID__OBJECT (GClosure     *closure,
                                      GValue       *return_value,
                                      guint         n_param_values,
                                      const GValue *param_values,
                                      gpointer      invocation_hint,
                                      gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure,
                                       GValue   *return_value,
                                       gpointer  instance,
                                       va_list   args,
                                       gpointer  marshal_data,
                                       int       n_params,
                                       GType    *param_types);


extern
void g_cclosure_marshal_VOID__VARIANT (GClosure     *closure,
                                       GValue       *return_value,
                                       guint         n_param_values,
                                       const GValue *param_values,
                                       gpointer      invocation_hint,
                                       gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure,
                                        GValue   *return_value,
                                        gpointer  instance,
                                        va_list   args,
                                        gpointer  marshal_data,
                                        int       n_params,
                                        GType    *param_types);


extern
void g_cclosure_marshal_VOID__UINT_POINTER (GClosure     *closure,
                                            GValue       *return_value,
                                            guint         n_param_values,
                                            const GValue *param_values,
                                            gpointer      invocation_hint,
                                            gpointer      marshal_data);
extern
void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure,
                                             GValue   *return_value,
                                             gpointer  instance,
                                             va_list   args,
                                             gpointer  marshal_data,
                                             int       n_params,
                                             GType    *param_types);


extern
void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure     *closure,
                                        GValue       *return_value,
                                        guint         n_param_values,
                                        const GValue *param_values,
                                        gpointer      invocation_hint,
                                        gpointer      marshal_data);
extern
void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure,
                                         GValue   *return_value,
                                         gpointer  instance,
                                         va_list   args,
                                         gpointer  marshal_data,
                                         int       n_params,
                                         GType    *param_types);



extern
void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure     *closure,
                                                GValue       *return_value,
                                                guint         n_param_values,
                                                const GValue *param_values,
                                                gpointer      invocation_hint,
                                                gpointer      marshal_data);
extern
void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure,
                                                 GValue   *return_value,
                                                 gpointer  instance,
                                                 va_list   args,
                                                 gpointer  marshal_data,
                                                 int       n_params,
                                                 GType    *param_types);


extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure     *closure,
                                              GValue       *return_value,
                                              guint         n_param_values,
                                              const GValue *param_values,
                                              gpointer      invocation_hint,
                                              gpointer      marshal_data);
extern
void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure,
                                               GValue   *return_value,
                                               gpointer  instance,
                                               va_list   args,
                                               gpointer  marshal_data,
                                               int       n_params,
                                               GType    *param_types);




#line 386 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gmarshal.h"
#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsignal.h"




typedef struct _GSignalQuery		 GSignalQuery;
typedef struct _GSignalInvocationHint	 GSignalInvocationHint;









typedef GClosureMarshal			 GSignalCMarshaller;







typedef GVaClosureMarshal		 GSignalCVaMarshaller;


















typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
					 guint			n_param_values,
					 const GValue	       *param_values,
					 gpointer		data);



















typedef gboolean (*GSignalAccumulator)	(GSignalInvocationHint *ihint,
					 GValue		       *return_accu,
					 const GValue	       *handler_return,
					 gpointer               data);






























typedef enum
{
  G_SIGNAL_RUN_FIRST	= 1 << 0,
  G_SIGNAL_RUN_LAST	= 1 << 1,
  G_SIGNAL_RUN_CLEANUP	= 1 << 2,
  G_SIGNAL_NO_RECURSE	= 1 << 3,
  G_SIGNAL_DETAILED	= 1 << 4,
  G_SIGNAL_ACTION	= 1 << 5,
  G_SIGNAL_NO_HOOKS	= 1 << 6,
  G_SIGNAL_MUST_COLLECT = 1 << 7,
  G_SIGNAL_DEPRECATED   = 1 << 8
} GSignalFlags;
















typedef enum
{
  G_CONNECT_AFTER	= 1 << 0,
  G_CONNECT_SWAPPED	= 1 << 1
} GConnectFlags;













typedef enum
{
  G_SIGNAL_MATCH_ID	   = 1 << 0,
  G_SIGNAL_MATCH_DETAIL	   = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE   = 1 << 2,
  G_SIGNAL_MATCH_FUNC	   = 1 << 3,
  G_SIGNAL_MATCH_DATA	   = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;









































struct _GSignalInvocationHint
{
  guint		signal_id;
  GQuark	detail;
  GSignalFlags	run_type;
};




















struct _GSignalQuery
{
  guint		signal_id;
  const gchar  *signal_name;
  GType		itype;
  GSignalFlags	signal_flags;
  GType		return_type; 
  guint		n_params;
  const GType  *param_types; 
};



extern
guint                 g_signal_newv         (const gchar        *signal_name,
					     GType               itype,
					     GSignalFlags        signal_flags,
					     GClosure           *class_closure,
					     GSignalAccumulator	 accumulator,
					     gpointer		 accu_data,
					     GSignalCMarshaller  c_marshaller,
					     GType               return_type,
					     guint               n_params,
					     GType              *param_types);
extern
guint                 g_signal_new_valist   (const gchar        *signal_name,
					     GType               itype,
					     GSignalFlags        signal_flags,
					     GClosure           *class_closure,
					     GSignalAccumulator	 accumulator,
					     gpointer		 accu_data,
					     GSignalCMarshaller  c_marshaller,
					     GType               return_type,
					     guint               n_params,
					     va_list             args);
extern
guint                 g_signal_new          (const gchar        *signal_name,
					     GType               itype,
					     GSignalFlags        signal_flags,
					     guint               class_offset,
					     GSignalAccumulator	 accumulator,
					     gpointer		 accu_data,
					     GSignalCMarshaller  c_marshaller,
					     GType               return_type,
					     guint               n_params,
					     ...);
extern
guint            g_signal_new_class_handler (const gchar        *signal_name,
                                             GType               itype,
                                             GSignalFlags        signal_flags,
                                             GCallback           class_handler,
                                             GSignalAccumulator  accumulator,
                                             gpointer            accu_data,
                                             GSignalCMarshaller  c_marshaller,
                                             GType               return_type,
                                             guint               n_params,
                                             ...);
extern
void             g_signal_set_va_marshaller (guint              signal_id,
					     GType              instance_type,
					     GSignalCVaMarshaller va_marshaller);

extern
void                  g_signal_emitv        (const GValue       *instance_and_params,
					     guint               signal_id,
					     GQuark              detail,
					     GValue             *return_value);
extern
void                  g_signal_emit_valist  (gpointer            instance,
					     guint               signal_id,
					     GQuark              detail,
					     va_list             var_args);
extern
void                  g_signal_emit         (gpointer            instance,
					     guint               signal_id,
					     GQuark              detail,
					     ...);
extern
void                  g_signal_emit_by_name (gpointer            instance,
					     const gchar        *detailed_signal,
					     ...);
extern
guint                 g_signal_lookup       (const gchar        *name,
					     GType               itype);
extern
const gchar *         g_signal_name         (guint               signal_id);
extern
void                  g_signal_query        (guint               signal_id,
					     GSignalQuery       *query);
extern
guint*                g_signal_list_ids     (GType               itype,
					     guint              *n_ids);
extern
gboolean	      g_signal_parse_name   (const gchar	*detailed_signal,
					     GType		 itype,
					     guint		*signal_id_p,
					     GQuark		*detail_p,
					     gboolean		 force_detail_quark);
extern
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer    instance);



extern
void	g_signal_stop_emission		    (gpointer		  instance,
					     guint		  signal_id,
					     GQuark		  detail);
extern
void	g_signal_stop_emission_by_name	    (gpointer		  instance,
					     const gchar	 *detailed_signal);
extern
gulong	g_signal_add_emission_hook	    (guint		  signal_id,
					     GQuark		  detail,
					     GSignalEmissionHook  hook_func,
					     gpointer	       	  hook_data,
					     GDestroyNotify	  data_destroy);
extern
void	g_signal_remove_emission_hook	    (guint		  signal_id,
					     gulong		  hook_id);



extern
gboolean g_signal_has_handler_pending	      (gpointer		  instance,
					       guint		  signal_id,
					       GQuark		  detail,
					       gboolean		  may_be_blocked);
extern
gulong	 g_signal_connect_closure_by_id	      (gpointer		  instance,
					       guint		  signal_id,
					       GQuark		  detail,
					       GClosure		 *closure,
					       gboolean		  after);
extern
gulong	 g_signal_connect_closure	      (gpointer		  instance,
					       const gchar       *detailed_signal,
					       GClosure		 *closure,
					       gboolean		  after);
extern
gulong	 g_signal_connect_data		      (gpointer		  instance,
					       const gchar	 *detailed_signal,
					       GCallback	  c_handler,
					       gpointer		  data,
					       GClosureNotify	  destroy_data,
					       GConnectFlags	  connect_flags);
extern
void	 g_signal_handler_block		      (gpointer		  instance,
					       gulong		  handler_id);
extern
void	 g_signal_handler_unblock	      (gpointer		  instance,
					       gulong		  handler_id);
extern
void	 g_signal_handler_disconnect	      (gpointer		  instance,
					       gulong		  handler_id);
extern
gboolean g_signal_handler_is_connected	      (gpointer		  instance,
					       gulong		  handler_id);
extern
gulong	 g_signal_handler_find		      (gpointer		  instance,
					       GSignalMatchType	  mask,
					       guint		  signal_id,
					       GQuark		  detail,
					       GClosure		 *closure,
					       gpointer		  func,
					       gpointer		  data);
extern
guint	 g_signal_handlers_block_matched      (gpointer		  instance,
					       GSignalMatchType	  mask,
					       guint		  signal_id,
					       GQuark		  detail,
					       GClosure		 *closure,
					       gpointer		  func,
					       gpointer		  data);
extern
guint	 g_signal_handlers_unblock_matched    (gpointer		  instance,
					       GSignalMatchType	  mask,
					       guint		  signal_id,
					       GQuark		  detail,
					       GClosure		 *closure,
					       gpointer		  func,
					       gpointer		  data);
extern
guint	 g_signal_handlers_disconnect_matched (gpointer		  instance,
					       GSignalMatchType	  mask,
					       guint		  signal_id,
					       GQuark		  detail,
					       GClosure		 *closure,
					       gpointer		  func,
					       gpointer		  data);



extern
void    g_signal_override_class_closure       (guint              signal_id,
                                               GType              instance_type,
                                               GClosure          *class_closure);
extern
void    g_signal_override_class_handler       (const gchar       *signal_name,
                                               GType              instance_type,
                                               GCallback          class_handler);
extern
void    g_signal_chain_from_overridden        (const GValue      *instance_and_params,
                                               GValue            *return_value);
extern
void   g_signal_chain_from_overridden_handler (gpointer           instance,
                                               ...);





































































































































extern
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint,
					    GValue                *return_accu,
					    const GValue          *handler_return,
					    gpointer               dummy);

extern
gboolean g_signal_accumulator_first_wins   (GSignalInvocationHint *ihint,
                                            GValue                *return_accu,
                                            const GValue          *handler_return,
                                            gpointer               dummy);


extern
void	 g_signal_handlers_destroy	      (gpointer		  instance);
void	 _g_signals_destroy		      (GType		  itype);



#line 608 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsignal.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gboxed.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gboxed.h"




#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/glib-types.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/glib-types.h"





















































































































































































































































































extern
GType   g_date_get_type            (void) ;
extern
GType   g_strv_get_type            (void) ;
extern
GType   g_gstring_get_type         (void) ;
extern
GType   g_hash_table_get_type      (void) ;
extern
GType   g_array_get_type           (void) ;
extern
GType   g_byte_array_get_type      (void) ;
extern
GType   g_ptr_array_get_type       (void) ;
extern
GType   g_bytes_get_type           (void) ;
extern
GType   g_variant_type_get_gtype   (void) ;
extern
GType   g_regex_get_type           (void) ;
extern
GType   g_match_info_get_type      (void) ;
extern
GType   g_error_get_type           (void) ;
extern
GType   g_date_time_get_type       (void) ;
extern
GType   g_time_zone_get_type       (void) ;
extern
GType   g_io_channel_get_type      (void) ;
extern
GType   g_io_condition_get_type    (void) ;
extern
GType   g_variant_builder_get_type (void) ;
extern
GType   g_variant_dict_get_type    (void) ;
extern
GType   g_key_file_get_type        (void) ;
extern
GType   g_main_loop_get_type       (void) ;
extern
GType   g_main_context_get_type    (void) ;
extern
GType   g_source_get_type          (void) ;
extern
GType   g_pollfd_get_type          (void) ;
extern
GType   g_thread_get_type          (void) ;
extern
GType   g_checksum_get_type        (void) ;
extern
GType   g_markup_parse_context_get_type (void) ;
extern
GType   g_mapped_file_get_type (void) ;
extern
GType   g_option_group_get_type    (void) ;

__declspec(deprecated("is deprecated. Use '" "'G_TYPE_VARIANT'" "' instead")) extern
GType   g_variant_get_gtype        (void) ;



#line 363 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/glib-types.h"
#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gboxed.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gboxed.h"



























typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);








typedef void (*GBoxedFreeFunc) (gpointer boxed);



extern
gpointer g_boxed_copy                     (GType boxed_type,
                                           gconstpointer  src_boxed);
extern
void     g_boxed_free                     (GType          boxed_type,
                                           gpointer       boxed);
extern
void     g_value_set_boxed                (GValue        *value,
                                           gconstpointer  v_boxed);
extern
void     g_value_set_static_boxed         (GValue        *value,
                                           gconstpointer  v_boxed);
extern
void     g_value_take_boxed               (GValue        *value,
                                           gconstpointer  v_boxed);
__declspec(deprecated("is deprecated. Use '" "g_value_take_boxed" "' instead")) extern
void     g_value_set_boxed_take_ownership (GValue        *value,
                                           gconstpointer  v_boxed);
extern
gpointer g_value_get_boxed                (const GValue  *value);
extern
gpointer g_value_dup_boxed                (const GValue  *value);



extern
GType    g_boxed_type_register_static     (const gchar   *name,
                                           GBoxedCopyFunc boxed_copy,
                                           GBoxedFreeFunc boxed_free);

















extern
GType   g_closure_get_type         (void) ;
extern
GType   g_value_get_type           (void) ;



#line 123 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gboxed.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"







































#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"





















































































































typedef struct _GObject                  GObject;
typedef struct _GObjectClass             GObjectClass;
typedef struct _GObject                  GInitiallyUnowned;
typedef struct _GObjectClass             GInitiallyUnownedClass;
typedef struct _GObjectConstructParam    GObjectConstructParam;










typedef void (*GObjectGetPropertyFunc)  (GObject      *object,
                                         guint         property_id,
                                         GValue       *value,
                                         GParamSpec   *pspec);










typedef void (*GObjectSetPropertyFunc)  (GObject      *object,
                                         guint         property_id,
                                         const GValue *value,
                                         GParamSpec   *pspec);






typedef void (*GObjectFinalizeFunc)     (GObject      *object);










typedef void (*GWeakNotify)		(gpointer      data,
					 GObject      *where_the_object_was);






struct  _GObject
{
  GTypeInstance  g_type_instance;
  
  
  volatile guint ref_count;
  GData         *qdata;
};































































struct  _GObjectClass
{
  GTypeClass   g_type_class;

  
  GSList      *construct_properties;

  
  
  GObject*   (*constructor)     (GType                  type,
                                 guint                  n_construct_properties,
                                 GObjectConstructParam *construct_properties);
  
  void       (*set_property)		(GObject        *object,
                                         guint           property_id,
                                         const GValue   *value,
                                         GParamSpec     *pspec);
  void       (*get_property)		(GObject        *object,
                                         guint           property_id,
                                         GValue         *value,
                                         GParamSpec     *pspec);
  void       (*dispose)			(GObject        *object);
  void       (*finalize)		(GObject        *object);
  
  void       (*dispatch_properties_changed) (GObject      *object,
					     guint	   n_pspecs,
					     GParamSpec  **pspecs);
  
  void	     (*notify)			(GObject	*object,
					 GParamSpec	*pspec);

  
  void	     (*constructed)		(GObject	*object);

  
  gsize		flags;

  
  gpointer	pdummy[6];
};









struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue     *value;
};
















extern
GType       g_initially_unowned_get_type      (void);
extern
void        g_object_class_install_property   (GObjectClass   *oclass,
					       guint           property_id,
					       GParamSpec     *pspec);
extern
GParamSpec* g_object_class_find_property      (GObjectClass   *oclass,
					       const gchar    *property_name);
extern
GParamSpec**g_object_class_list_properties    (GObjectClass   *oclass,
					       guint	      *n_properties);
extern
void        g_object_class_override_property  (GObjectClass   *oclass,
					       guint           property_id,
					       const gchar    *name);
extern
void        g_object_class_install_properties (GObjectClass   *oclass,
                                               guint           n_pspecs,
                                               GParamSpec    **pspecs);

extern
void        g_object_interface_install_property (gpointer     g_iface,
						 GParamSpec  *pspec);
extern
GParamSpec* g_object_interface_find_property    (gpointer     g_iface,
						 const gchar *property_name);
extern
GParamSpec**g_object_interface_list_properties  (gpointer     g_iface,
						 guint       *n_properties_p);

extern
GType       g_object_get_type                 (void) ;
extern
gpointer    g_object_new                      (GType           object_type,
					       const gchar    *first_property_name,
					       ...);
extern
gpointer    g_object_newv		      (GType           object_type,
					       guint	       n_parameters,
					       GParameter     *parameters);
extern
GObject*    g_object_new_valist               (GType           object_type,
					       const gchar    *first_property_name,
					       va_list         var_args);
extern
void	    g_object_set                      (gpointer	       object,
					       const gchar    *first_property_name,
					       ...) ;
extern
void        g_object_get                      (gpointer        object,
					       const gchar    *first_property_name,
					       ...) ;
extern
gpointer    g_object_connect                  (gpointer	       object,
					       const gchar    *signal_spec,
					       ...) ;
extern
void	    g_object_disconnect               (gpointer	       object,
					       const gchar    *signal_spec,
					       ...) ;
extern
void        g_object_set_valist               (GObject        *object,
					       const gchar    *first_property_name,
					       va_list         var_args);
extern
void        g_object_get_valist               (GObject        *object,
					       const gchar    *first_property_name,
					       va_list         var_args);
extern
void        g_object_set_property             (GObject        *object,
					       const gchar    *property_name,
					       const GValue   *value);
extern
void        g_object_get_property             (GObject        *object,
					       const gchar    *property_name,
					       GValue         *value);
extern
void        g_object_freeze_notify            (GObject        *object);
extern
void        g_object_notify                   (GObject        *object,
					       const gchar    *property_name);
extern
void        g_object_notify_by_pspec          (GObject        *object,
					       GParamSpec     *pspec);
extern
void        g_object_thaw_notify              (GObject        *object);
extern
gboolean    g_object_is_floating    	      (gpointer        object);
extern
gpointer    g_object_ref_sink       	      (gpointer	       object);
extern
gpointer    g_object_ref                      (gpointer        object);
extern
void        g_object_unref                    (gpointer        object);
extern
void	    g_object_weak_ref		      (GObject	      *object,
					       GWeakNotify     notify,
					       gpointer	       data);
extern
void	    g_object_weak_unref		      (GObject	      *object,
					       GWeakNotify     notify,
					       gpointer	       data);
extern
void        g_object_add_weak_pointer         (GObject        *object, 
                                               gpointer       *weak_pointer_location);
extern
void        g_object_remove_weak_pointer      (GObject        *object, 
                                               gpointer       *weak_pointer_location);













typedef void (*GToggleNotify) (gpointer      data,
			       GObject      *object,
			       gboolean      is_last_ref);

extern
void g_object_add_toggle_ref    (GObject       *object,
				 GToggleNotify  notify,
				 gpointer       data);
extern
void g_object_remove_toggle_ref (GObject       *object,
				 GToggleNotify  notify,
				 gpointer       data);

extern
gpointer    g_object_get_qdata                (GObject        *object,
					       GQuark          quark);
extern
void        g_object_set_qdata                (GObject        *object,
					       GQuark          quark,
					       gpointer        data);
extern
void        g_object_set_qdata_full           (GObject        *object,
					       GQuark          quark,
					       gpointer        data,
					       GDestroyNotify  destroy);
extern
gpointer    g_object_steal_qdata              (GObject        *object,
					       GQuark          quark);

extern
gpointer    g_object_dup_qdata                (GObject        *object,
                                               GQuark          quark,
                                               GDuplicateFunc  dup_func,
					       gpointer         user_data);
extern
gboolean    g_object_replace_qdata            (GObject        *object,
                                               GQuark          quark,
                                               gpointer        oldval,
                                               gpointer        newval,
                                               GDestroyNotify  destroy,
					       GDestroyNotify *old_destroy);

extern
gpointer    g_object_get_data                 (GObject        *object,
					       const gchar    *key);
extern
void        g_object_set_data                 (GObject        *object,
					       const gchar    *key,
					       gpointer        data);
extern
void        g_object_set_data_full            (GObject        *object,
					       const gchar    *key,
					       gpointer        data,
					       GDestroyNotify  destroy);
extern
gpointer    g_object_steal_data               (GObject        *object,
					       const gchar    *key);

extern
gpointer    g_object_dup_data                 (GObject        *object,
                                               const gchar    *key,
                                               GDuplicateFunc  dup_func,
					       gpointer         user_data);
extern
gboolean    g_object_replace_data             (GObject        *object,
                                               const gchar    *key,
                                               gpointer        oldval,
                                               gpointer        newval,
                                               GDestroyNotify  destroy,
					       GDestroyNotify *old_destroy);


extern
void        g_object_watch_closure            (GObject        *object,
					       GClosure       *closure);
extern
GClosure*   g_cclosure_new_object             (GCallback       callback_func,
					       GObject	      *object);
extern
GClosure*   g_cclosure_new_object_swap        (GCallback       callback_func,
					       GObject	      *object);
extern
GClosure*   g_closure_new_object              (guint           sizeof_closure,
					       GObject        *object);
extern
void        g_value_set_object                (GValue         *value,
					       gpointer        v_object);
extern
gpointer    g_value_get_object                (const GValue   *value);
extern
gpointer    g_value_dup_object                (const GValue   *value);
extern
gulong	    g_signal_connect_object           (gpointer	       instance,
					       const gchar    *detailed_signal,
					       GCallback       c_handler,
					       gpointer	       gobject,
					       GConnectFlags   connect_flags);


extern
void        g_object_force_floating           (GObject        *object);
extern
void        g_object_run_dispose	      (GObject	      *object);


extern
void        g_value_take_object               (GValue         *value,
					       gpointer        v_object);
__declspec(deprecated("is deprecated. Use '" "g_value_take_object" "' instead")) extern
void        g_value_set_object_take_ownership (GValue         *value,
                                               gpointer        v_object);

__declspec(deprecated) extern
gsize	    g_object_compat_control	      (gsize	       what,
					       gpointer	       data);



























extern
void    g_clear_object (volatile GObject **object_ptr);





































static inline gboolean
(g_set_object) (GObject **object_ptr,
                GObject  *new_object)
{
  GObject *old_object = *object_ptr;

  





  if (old_object == new_object)
    return (0);

  if (new_object != ((void *)0))
    g_object_ref (new_object);

  *object_ptr = new_object;

  if (old_object != ((void *)0))
    g_object_unref (old_object);

  return (!(0));
}







typedef struct {
    
    union { gpointer p; } priv;
} GWeakRef;

extern
void     g_weak_ref_init       (GWeakRef *weak_ref,
                                gpointer  object);
extern
void     g_weak_ref_clear      (GWeakRef *weak_ref);
extern
gpointer g_weak_ref_get        (GWeakRef *weak_ref);
extern
void     g_weak_ref_set        (GWeakRef *weak_ref,
                                gpointer  object);



#line 740 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gbinding.h"

















typedef struct _GBinding        GBinding;




















typedef gboolean (* GBindingTransformFunc) (GBinding     *binding,
                                            const GValue *from_value,
                                            GValue       *to_value,
                                            gpointer      user_data);
























typedef enum { 
  G_BINDING_DEFAULT        = 0,

  G_BINDING_BIDIRECTIONAL  = 1 << 0,
  G_BINDING_SYNC_CREATE    = 1 << 1,
  G_BINDING_INVERT_BOOLEAN = 1 << 2
} GBindingFlags;

extern
GType                 g_binding_flags_get_type      (void) ;
extern
GType                 g_binding_get_type            (void) ;

extern
GBindingFlags         g_binding_get_flags           (GBinding *binding);
extern
GObject *             g_binding_get_source          (GBinding *binding);
extern
GObject *             g_binding_get_target          (GBinding *binding);
extern
const gchar *         g_binding_get_source_property (GBinding *binding);
extern
const gchar *         g_binding_get_target_property (GBinding *binding);
extern
void                  g_binding_unbind              (GBinding *binding);

extern
GBinding *g_object_bind_property               (gpointer               source,
                                                const gchar           *source_property,
                                                gpointer               target,
                                                const gchar           *target_property,
                                                GBindingFlags          flags);
extern
GBinding *g_object_bind_property_full          (gpointer               source,
                                                const gchar           *source_property,
                                                gpointer               target,
                                                const gchar           *target_property,
                                                GBindingFlags          flags,
                                                GBindingTransformFunc  transform_to,
                                                GBindingTransformFunc  transform_from,
                                                gpointer               user_data,
                                                GDestroyNotify         notify);
extern
GBinding *g_object_bind_property_with_closures (gpointer               source,
                                                const gchar           *source_property,
                                                gpointer               target,
                                                const gchar           *target_property,
                                                GBindingFlags          flags,
                                                GClosure              *transform_to,
                                                GClosure              *transform_from);



#line 150 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gbinding.h"
#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/genums.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/genums.h"



















































































































typedef struct _GEnumClass  GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue  GEnumValue;
typedef struct _GFlagsValue GFlagsValue;













struct	_GEnumClass
{
  GTypeClass  g_type_class;

    
  gint	      minimum;
  gint	      maximum;
  guint	      n_values;
  GEnumValue *values;
};











struct	_GFlagsClass
{
  GTypeClass   g_type_class;
  
    
  guint	       mask;
  guint	       n_values;
  GFlagsValue *values;
};









struct _GEnumValue
{
  gint	 value;
  const gchar *value_name;
  const gchar *value_nick;
};









struct _GFlagsValue
{
  guint	 value;
  const gchar *value_name;
  const gchar *value_nick;
};



extern
GEnumValue*	g_enum_get_value		(GEnumClass	*enum_class,
						 gint		 value);
extern
GEnumValue*	g_enum_get_value_by_name	(GEnumClass	*enum_class,
						 const gchar	*name);
extern
GEnumValue*	g_enum_get_value_by_nick	(GEnumClass	*enum_class,
						 const gchar	*nick);
extern
GFlagsValue*	g_flags_get_first_value		(GFlagsClass	*flags_class,
						 guint		 value);
extern
GFlagsValue*	g_flags_get_value_by_name	(GFlagsClass	*flags_class,
						 const gchar	*name);
extern
GFlagsValue*	g_flags_get_value_by_nick	(GFlagsClass	*flags_class,
						 const gchar	*nick);
extern
void            g_value_set_enum        	(GValue         *value,
						 gint            v_enum);
extern
gint            g_value_get_enum        	(const GValue   *value);
extern
void            g_value_set_flags       	(GValue         *value,
						 guint           v_flags);
extern
guint           g_value_get_flags       	(const GValue   *value);







extern
GType	g_enum_register_static	   (const gchar	      *name,
				    const GEnumValue  *const_static_values);
extern
GType	g_flags_register_static	   (const gchar	      *name,
				    const GFlagsValue *const_static_values);



extern
void	g_enum_complete_type_info  (GType	       g_enum_type,
				    GTypeInfo	      *info,
				    const GEnumValue  *const_values);
extern
void	g_flags_complete_type_info (GType	       g_flags_type,
				    GTypeInfo	      *info,
				    const GFlagsValue *const_values);



#line 274 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/genums.h"
#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"

















































































































































































































































































































































































































































































































































































typedef struct _GParamSpecChar       GParamSpecChar;
typedef struct _GParamSpecUChar      GParamSpecUChar;
typedef struct _GParamSpecBoolean    GParamSpecBoolean;
typedef struct _GParamSpecInt        GParamSpecInt;
typedef struct _GParamSpecUInt       GParamSpecUInt;
typedef struct _GParamSpecLong       GParamSpecLong;
typedef struct _GParamSpecULong      GParamSpecULong;
typedef struct _GParamSpecInt64      GParamSpecInt64;
typedef struct _GParamSpecUInt64     GParamSpecUInt64;
typedef struct _GParamSpecUnichar    GParamSpecUnichar;
typedef struct _GParamSpecEnum       GParamSpecEnum;
typedef struct _GParamSpecFlags      GParamSpecFlags;
typedef struct _GParamSpecFloat      GParamSpecFloat;
typedef struct _GParamSpecDouble     GParamSpecDouble;
typedef struct _GParamSpecString     GParamSpecString;
typedef struct _GParamSpecParam      GParamSpecParam;
typedef struct _GParamSpecBoxed      GParamSpecBoxed;
typedef struct _GParamSpecPointer    GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject     GParamSpecObject;
typedef struct _GParamSpecOverride   GParamSpecOverride;
typedef struct _GParamSpecGType      GParamSpecGType;
typedef struct _GParamSpecVariant    GParamSpecVariant;










struct _GParamSpecChar
{
  GParamSpec    parent_instance;
  
  gint8         minimum;
  gint8         maximum;
  gint8         default_value;
};









struct _GParamSpecUChar
{
  GParamSpec    parent_instance;
  
  guint8        minimum;
  guint8        maximum;
  guint8        default_value;
};







struct _GParamSpecBoolean
{
  GParamSpec    parent_instance;
  
  gboolean      default_value;
};









struct _GParamSpecInt
{
  GParamSpec    parent_instance;
  
  gint          minimum;
  gint          maximum;
  gint          default_value;
};









struct _GParamSpecUInt
{
  GParamSpec    parent_instance;
  
  guint         minimum;
  guint         maximum;
  guint         default_value;
};









struct _GParamSpecLong
{
  GParamSpec    parent_instance;
  
  glong         minimum;
  glong         maximum;
  glong         default_value;
};









struct _GParamSpecULong
{
  GParamSpec    parent_instance;
  
  gulong        minimum;
  gulong        maximum;
  gulong        default_value;
};









struct _GParamSpecInt64
{
  GParamSpec    parent_instance;
  
  gint64        minimum;
  gint64        maximum;
  gint64        default_value;
};









struct _GParamSpecUInt64
{
  GParamSpec    parent_instance;
  
  guint64       minimum;
  guint64       maximum;
  guint64       default_value;
};







struct _GParamSpecUnichar
{
  GParamSpec    parent_instance;
  
  gunichar      default_value;
};









struct _GParamSpecEnum
{
  GParamSpec    parent_instance;
  
  GEnumClass   *enum_class;
  gint          default_value;
};









struct _GParamSpecFlags
{
  GParamSpec    parent_instance;
  
  GFlagsClass  *flags_class;
  guint         default_value;
};











struct _GParamSpecFloat
{
  GParamSpec    parent_instance;
  
  gfloat        minimum;
  gfloat        maximum;
  gfloat        default_value;
  gfloat        epsilon;
};











struct _GParamSpecDouble
{
  GParamSpec    parent_instance;
  
  gdouble       minimum;
  gdouble       maximum;
  gdouble       default_value;
  gdouble       epsilon;
};













struct _GParamSpecString
{
  GParamSpec    parent_instance;
  
  gchar        *default_value;
  gchar        *cset_first;
  gchar        *cset_nth;
  gchar         substitutor;
  guint         null_fold_if_empty : 1;
  guint         ensure_non_null : 1;
};







struct _GParamSpecParam
{
  GParamSpec    parent_instance;
};






struct _GParamSpecBoxed
{
  GParamSpec    parent_instance;
};






struct _GParamSpecPointer
{
  GParamSpec    parent_instance;
};








struct _GParamSpecValueArray
{
  GParamSpec    parent_instance;
  GParamSpec   *element_spec;
  guint		fixed_n_elements;
};






struct _GParamSpecObject
{
  GParamSpec    parent_instance;
};














struct _GParamSpecOverride
{
  
  GParamSpec    parent_instance;
  GParamSpec   *overridden;
};









struct _GParamSpecGType
{
  GParamSpec    parent_instance;
  GType         is_a_type;
};










struct _GParamSpecVariant
{
  GParamSpec    parent_instance;
  GVariantType *type;
  GVariant     *default_value;

  
  gpointer      padding[4];
};


extern
GParamSpec*	g_param_spec_char	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gint8		  minimum,
					  gint8		  maximum,
					  gint8		  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_uchar	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  guint8	  minimum,
					  guint8	  maximum,
					  guint8	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_boolean	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gboolean	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_int	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gint		  minimum,
					  gint		  maximum,
					  gint		  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_uint	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  guint		  minimum,
					  guint		  maximum,
					  guint		  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_long	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  glong		  minimum,
					  glong		  maximum,
					  glong		  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_ulong	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gulong	  minimum,
					  gulong	  maximum,
					  gulong	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_int64	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gint64       	  minimum,
					  gint64       	  maximum,
					  gint64       	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_uint64	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  guint64	  minimum,
					  guint64	  maximum,
					  guint64	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_unichar      (const gchar    *name,
				          const gchar    *nick,
				          const gchar    *blurb,
				          gunichar	  default_value,
				          GParamFlags     flags);
extern
GParamSpec*	g_param_spec_enum	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GType		  enum_type,
					  gint		  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_flags	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GType		  flags_type,
					  guint		  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_float	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gfloat	  minimum,
					  gfloat	  maximum,
					  gfloat	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_double	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  gdouble	  minimum,
					  gdouble	  maximum,
					  gdouble	  default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_string	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  const gchar	 *default_value,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_param	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GType		  param_type,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_boxed	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GType		  boxed_type,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_pointer	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_value_array (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GParamSpec	 *element_spec,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_object	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GType		  object_type,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_override    (const gchar    *name,
					  GParamSpec     *overridden);
extern
GParamSpec*	g_param_spec_gtype	 (const gchar	 *name,
					  const gchar	 *nick,
					  const gchar	 *blurb,
					  GType           is_a_type,
					  GParamFlags	  flags);
extern
GParamSpec*	g_param_spec_variant	 (const gchar        *name,
					  const gchar        *nick,
					  const gchar	     *blurb,
					  const GVariantType *type,
					  GVariant           *default_value,
					  GParamFlags         flags);


















#line 1154 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"
#line 1155 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"


#line 1158 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"
#line 1159 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"

extern __declspec(dllimport) GType *g_param_spec_types;



#line 1165 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gparamspecs.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsourceclosure.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsourceclosure.h"






extern
void g_source_set_closure        (GSource  *source,
				  GClosure *closure);

extern
void g_source_set_dummy_callback (GSource  *source);



#line 39 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gsourceclosure.h"
#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtypemodule.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtypemodule.h"






typedef struct _GTypeModule      GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;

















struct _GTypeModule 
{
  GObject parent_instance;

  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;

  
  gchar *name;
};











struct _GTypeModuleClass
{
  GObjectClass parent_class;

  
  gboolean (* load)   (GTypeModule *module);
  void     (* unload) (GTypeModule *module);

  
  
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};



















































































































































































extern
GType    g_type_module_get_type       (void) ;
extern
gboolean g_type_module_use            (GTypeModule          *module);
extern
void     g_type_module_unuse          (GTypeModule          *module);
extern
void     g_type_module_set_name       (GTypeModule          *module,
                                       const gchar          *name);
extern
GType    g_type_module_register_type  (GTypeModule          *module,
                                       GType                 parent_type,
                                       const gchar          *type_name,
                                       const GTypeInfo      *type_info,
                                       GTypeFlags            flags);
extern
void     g_type_module_add_interface  (GTypeModule          *module,
                                       GType                 instance_type,
                                       GType                 interface_type,
                                       const GInterfaceInfo *interface_info);
extern
GType    g_type_module_register_enum  (GTypeModule          *module,
                                       const gchar          *name,
                                       const GEnumValue     *const_static_values);
extern
GType    g_type_module_register_flags (GTypeModule          *module,
                                       const gchar          *name,
                                       const GFlagsValue    *const_static_values);



#line 296 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtypemodule.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtypeplugin.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtypeplugin.h"















typedef struct _GTypePluginClass		   GTypePluginClass;







typedef void  (*GTypePluginUse)			  (GTypePlugin     *plugin);






typedef void  (*GTypePluginUnuse)		  (GTypePlugin     *plugin);









typedef void  (*GTypePluginCompleteTypeInfo)	  (GTypePlugin     *plugin,
						   GType            g_type,
						   GTypeInfo       *info,
						   GTypeValueTable *value_table);










typedef void  (*GTypePluginCompleteInterfaceInfo) (GTypePlugin     *plugin,
						   GType            instance_type,
						   GType            interface_type,
						   GInterfaceInfo  *info);




















struct _GTypePluginClass
{
  
  GTypeInterface		   base_iface;
  
  
  GTypePluginUse		   use_plugin;
  GTypePluginUnuse		   unuse_plugin;
  GTypePluginCompleteTypeInfo	   complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};



extern
GType	g_type_plugin_get_type			(void)	;
extern
void	g_type_plugin_use			(GTypePlugin	 *plugin);
extern
void	g_type_plugin_unuse			(GTypePlugin	 *plugin);
extern
void	g_type_plugin_complete_type_info	(GTypePlugin     *plugin,
						 GType            g_type,
						 GTypeInfo       *info,
						 GTypeValueTable *value_table);
extern
void	g_type_plugin_complete_interface_info	(GTypePlugin     *plugin,
						 GType            instance_type,
						 GType            interface_type,
						 GInterfaceInfo  *info);



#line 135 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gtypeplugin.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvaluearray.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvaluearray.h"
















typedef struct _GValueArray GValueArray;







struct _GValueArray
{
  guint   n_values;
  GValue *values;

  
  guint   n_prealloced;
};


__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GType           g_value_array_get_type       (void) ;

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValue*		g_value_array_get_nth	     (GValueArray	*value_array,
					      guint		 index_);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_new	     (guint		 n_prealloced);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
void		g_value_array_free	     (GValueArray	*value_array);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_copy	     (const GValueArray *value_array);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_prepend	     (GValueArray	*value_array,
					      const GValue	*value);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_append	     (GValueArray	*value_array,
					      const GValue	*value);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_insert	     (GValueArray	*value_array,
					      guint		 index_,
					      const GValue	*value);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_remove	     (GValueArray	*value_array,
					      guint		 index_);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_sort	     (GValueArray	*value_array,
					      GCompareFunc	 compare_func);

__declspec(deprecated("is deprecated. Use '" "GArray" "' instead")) extern
GValueArray*	g_value_array_sort_with_data (GValueArray	*value_array,
					      GCompareDataFunc	 compare_func,
					      gpointer		 user_data);




#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvaluearray.h"
#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvaluetypes.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvaluetypes.h"

























































































































































__declspec(deprecated("is deprecated. Use '" "g_value_set_schar" "' instead")) extern
void                  g_value_set_char          (GValue       *value,
                                                 gchar         v_char);
__declspec(deprecated("is deprecated. Use '" "g_value_get_schar" "' instead")) extern
gchar                 g_value_get_char          (const GValue *value);
extern
void		      g_value_set_schar		(GValue	      *value,
						 gint8	       v_char);
extern
gint8		      g_value_get_schar		(const GValue *value);
extern
void		      g_value_set_uchar		(GValue	      *value,
						 guchar	       v_uchar);
extern
guchar		      g_value_get_uchar		(const GValue *value);
extern
void		      g_value_set_boolean	(GValue	      *value,
						 gboolean      v_boolean);
extern
gboolean	      g_value_get_boolean	(const GValue *value);
extern
void		      g_value_set_int		(GValue	      *value,
						 gint	       v_int);
extern
gint		      g_value_get_int		(const GValue *value);
extern
void		      g_value_set_uint		(GValue	      *value,
						 guint	       v_uint);
extern
guint		      g_value_get_uint		(const GValue *value);
extern
void		      g_value_set_long		(GValue	      *value,
						 glong	       v_long);
extern
glong		      g_value_get_long		(const GValue *value);
extern
void		      g_value_set_ulong		(GValue	      *value,
						 gulong	       v_ulong);
extern
gulong		      g_value_get_ulong		(const GValue *value);
extern
void		      g_value_set_int64		(GValue	      *value,
						 gint64	       v_int64);
extern
gint64		      g_value_get_int64		(const GValue *value);
extern
void		      g_value_set_uint64	(GValue	      *value,
						 guint64      v_uint64);
extern
guint64		      g_value_get_uint64	(const GValue *value);
extern
void		      g_value_set_float		(GValue	      *value,
						 gfloat	       v_float);
extern
gfloat		      g_value_get_float		(const GValue *value);
extern
void		      g_value_set_double	(GValue	      *value,
						 gdouble       v_double);
extern
gdouble		      g_value_get_double	(const GValue *value);
extern
void		      g_value_set_string	(GValue	      *value,
						 const gchar  *v_string);
extern
void		      g_value_set_static_string (GValue	      *value,
						 const gchar  *v_string);
extern
const gchar *         g_value_get_string	(const GValue *value);
extern
gchar*		      g_value_dup_string	(const GValue *value);
extern
void		      g_value_set_pointer	(GValue	      *value,
						 gpointer      v_pointer);
extern
gpointer	      g_value_get_pointer	(const GValue *value);
extern
GType		      g_gtype_get_type		(void);
extern
void		      g_value_set_gtype	        (GValue	      *value,
						 GType         v_gtype);
extern
GType	              g_value_get_gtype	        (const GValue *value);
extern
void		      g_value_set_variant	(GValue	      *value,
						 GVariant     *variant);
extern
void		      g_value_take_variant	(GValue	      *value,
						 GVariant     *variant);
extern
GVariant*	      g_value_get_variant	(const GValue *value);
extern
GVariant*	      g_value_dup_variant	(const GValue *value);



extern
GType                 g_pointer_type_register_static (const gchar *name);


extern
gchar*                g_strdup_value_contents   (const GValue *value);


extern
void g_value_take_string		        (GValue		   *value,
						 gchar		   *v_string);
__declspec(deprecated("is deprecated. Use '" "g_value_take_string" "' instead")) extern
void g_value_set_string_take_ownership          (GValue            *value,
                                                 gchar             *v_string);








typedef gchar* gchararray;




#line 301 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gvaluetypes.h"
#line 37 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject-autocleanups.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gobject/gobject-autocleanups.h"




#line 39 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"



#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\glib-object.h"
#line 32 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

























#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giotypes.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giotypes.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioenums.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioenums.h"















typedef enum {
  G_APP_INFO_CREATE_NONE                           = 0,         
  G_APP_INFO_CREATE_NEEDS_TERMINAL                 = (1 << 0),  
  G_APP_INFO_CREATE_SUPPORTS_URIS                  = (1 << 1),  
  G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION  = (1 << 2)   
} GAppInfoCreateFlags;











typedef enum {
  G_CONVERTER_NO_FLAGS     = 0,         
  G_CONVERTER_INPUT_AT_END = (1 << 0),  
  G_CONVERTER_FLUSH        = (1 << 1)   
} GConverterFlags;












typedef enum {
  G_CONVERTER_ERROR     = 0,  
  G_CONVERTER_CONVERTED = 1,  
  G_CONVERTER_FINISHED  = 2,  
  G_CONVERTER_FLUSHED   = 3   
} GConverterResult;












typedef enum {
  G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN,
  G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
} GDataStreamByteOrder;











typedef enum {
  G_DATA_STREAM_NEWLINE_TYPE_LF,
  G_DATA_STREAM_NEWLINE_TYPE_CR,
  G_DATA_STREAM_NEWLINE_TYPE_CR_LF,
  G_DATA_STREAM_NEWLINE_TYPE_ANY
} GDataStreamNewlineType;

















typedef enum {
  G_FILE_ATTRIBUTE_TYPE_INVALID = 0,
  G_FILE_ATTRIBUTE_TYPE_STRING,
  G_FILE_ATTRIBUTE_TYPE_BYTE_STRING, 
  G_FILE_ATTRIBUTE_TYPE_BOOLEAN,
  G_FILE_ATTRIBUTE_TYPE_UINT32,
  G_FILE_ATTRIBUTE_TYPE_INT32,
  G_FILE_ATTRIBUTE_TYPE_UINT64,
  G_FILE_ATTRIBUTE_TYPE_INT64,
  G_FILE_ATTRIBUTE_TYPE_OBJECT,
  G_FILE_ATTRIBUTE_TYPE_STRINGV
} GFileAttributeType;










typedef enum {
  G_FILE_ATTRIBUTE_INFO_NONE            = 0,
  G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE  = (1 << 0),
  G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (1 << 1)
} GFileAttributeInfoFlags;










typedef enum {
  G_FILE_ATTRIBUTE_STATUS_UNSET = 0,
  G_FILE_ATTRIBUTE_STATUS_SET,
  G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
} GFileAttributeStatus;









typedef enum {
  G_FILE_QUERY_INFO_NONE              = 0,
  G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (1 << 0)   
} GFileQueryInfoFlags;


















typedef enum {
  G_FILE_CREATE_NONE    = 0,
  G_FILE_CREATE_PRIVATE = (1 << 0),
  G_FILE_CREATE_REPLACE_DESTINATION = (1 << 1)
} GFileCreateFlags;


















typedef enum {
  G_FILE_MEASURE_NONE                 = 0,
  G_FILE_MEASURE_REPORT_ANY_ERROR     = (1 << 1),
  G_FILE_MEASURE_APPARENT_SIZE        = (1 << 2),
  G_FILE_MEASURE_NO_XDEV              = (1 << 3)
} GFileMeasureFlags;







typedef enum  {
  G_MOUNT_MOUNT_NONE = 0
} GMountMountFlags;










typedef enum {
  G_MOUNT_UNMOUNT_NONE  = 0,
  G_MOUNT_UNMOUNT_FORCE = (1 << 0)
} GMountUnmountFlags;









typedef enum  {
  G_DRIVE_START_NONE = 0
} GDriveStartFlags;





















typedef enum {
  G_DRIVE_START_STOP_TYPE_UNKNOWN,
  G_DRIVE_START_STOP_TYPE_SHUTDOWN,
  G_DRIVE_START_STOP_TYPE_NETWORK,
  G_DRIVE_START_STOP_TYPE_MULTIDISK,
  G_DRIVE_START_STOP_TYPE_PASSWORD
} GDriveStartStopType;













typedef enum {
  G_FILE_COPY_NONE                 = 0,          
  G_FILE_COPY_OVERWRITE            = (1 << 0),
  G_FILE_COPY_BACKUP               = (1 << 1),
  G_FILE_COPY_NOFOLLOW_SYMLINKS    = (1 << 2),
  G_FILE_COPY_ALL_METADATA         = (1 << 3),
  G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (1 << 4),
  G_FILE_COPY_TARGET_DEFAULT_PERMS = (1 << 5)
} GFileCopyFlags;





















typedef enum {
  G_FILE_MONITOR_NONE             = 0,
  G_FILE_MONITOR_WATCH_MOUNTS     = (1 << 0),
  G_FILE_MONITOR_SEND_MOVED       = (1 << 1),
  G_FILE_MONITOR_WATCH_HARD_LINKS = (1 << 2),
  G_FILE_MONITOR_WATCH_MOVES      = (1 << 3)
} GFileMonitorFlags;
















typedef enum {
  G_FILE_TYPE_UNKNOWN = 0,
  G_FILE_TYPE_REGULAR,
  G_FILE_TYPE_DIRECTORY,
  G_FILE_TYPE_SYMBOLIC_LINK,
  G_FILE_TYPE_SPECIAL, 
  G_FILE_TYPE_SHORTCUT,
  G_FILE_TYPE_MOUNTABLE
} GFileType;












typedef enum {
  G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0,
  G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL,
  G_FILESYSTEM_PREVIEW_TYPE_NEVER
} GFilesystemPreviewType;

























typedef enum {
  G_FILE_MONITOR_EVENT_CHANGED,
  G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT,
  G_FILE_MONITOR_EVENT_DELETED,
  G_FILE_MONITOR_EVENT_CREATED,
  G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED,
  G_FILE_MONITOR_EVENT_PRE_UNMOUNT,
  G_FILE_MONITOR_EVENT_UNMOUNTED,
  G_FILE_MONITOR_EVENT_MOVED,
  G_FILE_MONITOR_EVENT_RENAMED,
  G_FILE_MONITOR_EVENT_MOVED_IN,
  G_FILE_MONITOR_EVENT_MOVED_OUT
} GFileMonitorEvent;























































































typedef enum {
  G_IO_ERROR_FAILED,
  G_IO_ERROR_NOT_FOUND,
  G_IO_ERROR_EXISTS,
  G_IO_ERROR_IS_DIRECTORY,
  G_IO_ERROR_NOT_DIRECTORY,
  G_IO_ERROR_NOT_EMPTY,
  G_IO_ERROR_NOT_REGULAR_FILE,
  G_IO_ERROR_NOT_SYMBOLIC_LINK,
  G_IO_ERROR_NOT_MOUNTABLE_FILE,
  G_IO_ERROR_FILENAME_TOO_LONG,
  G_IO_ERROR_INVALID_FILENAME,
  G_IO_ERROR_TOO_MANY_LINKS,
  G_IO_ERROR_NO_SPACE,
  G_IO_ERROR_INVALID_ARGUMENT,
  G_IO_ERROR_PERMISSION_DENIED,
  G_IO_ERROR_NOT_SUPPORTED,
  G_IO_ERROR_NOT_MOUNTED,
  G_IO_ERROR_ALREADY_MOUNTED,
  G_IO_ERROR_CLOSED,
  G_IO_ERROR_CANCELLED,
  G_IO_ERROR_PENDING,
  G_IO_ERROR_READ_ONLY,
  G_IO_ERROR_CANT_CREATE_BACKUP,
  G_IO_ERROR_WRONG_ETAG,
  G_IO_ERROR_TIMED_OUT,
  G_IO_ERROR_WOULD_RECURSE,
  G_IO_ERROR_BUSY,
  G_IO_ERROR_WOULD_BLOCK,
  G_IO_ERROR_HOST_NOT_FOUND,
  G_IO_ERROR_WOULD_MERGE,
  G_IO_ERROR_FAILED_HANDLED,
  G_IO_ERROR_TOO_MANY_OPEN_FILES,
  G_IO_ERROR_NOT_INITIALIZED,
  G_IO_ERROR_ADDRESS_IN_USE,
  G_IO_ERROR_PARTIAL_INPUT,
  G_IO_ERROR_INVALID_DATA,
  G_IO_ERROR_DBUS_ERROR,
  G_IO_ERROR_HOST_UNREACHABLE,
  G_IO_ERROR_NETWORK_UNREACHABLE,
  G_IO_ERROR_CONNECTION_REFUSED,
  G_IO_ERROR_PROXY_FAILED,
  G_IO_ERROR_PROXY_AUTH_FAILED,
  G_IO_ERROR_PROXY_NEED_AUTH,
  G_IO_ERROR_PROXY_NOT_ALLOWED,
  G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_CONNECTION_CLOSED = G_IO_ERROR_BROKEN_PIPE,
  G_IO_ERROR_NOT_CONNECTED,
  G_IO_ERROR_MESSAGE_TOO_LARGE
} GIOErrorEnum;














typedef enum {
  G_ASK_PASSWORD_NEED_PASSWORD       = (1 << 0),
  G_ASK_PASSWORD_NEED_USERNAME       = (1 << 1),
  G_ASK_PASSWORD_NEED_DOMAIN         = (1 << 2),
  G_ASK_PASSWORD_SAVING_SUPPORTED    = (1 << 3),
  G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (1 << 4)
} GAskPasswordFlags;













typedef enum {
  G_PASSWORD_SAVE_NEVER,
  G_PASSWORD_SAVE_FOR_SESSION,
  G_PASSWORD_SAVE_PERMANENTLY
} GPasswordSave;














typedef enum {
  G_MOUNT_OPERATION_HANDLED,
  G_MOUNT_OPERATION_ABORTED,
  G_MOUNT_OPERATION_UNHANDLED
} GMountOperationResult;












typedef enum {
  G_OUTPUT_STREAM_SPLICE_NONE         = 0,
  G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (1 << 0),
  G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (1 << 1)
} GOutputStreamSpliceFlags;
















typedef enum {
  G_IO_STREAM_SPLICE_NONE          = 0,
  G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (1 << 0),
  G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (1 << 1),
  G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (1 << 2)
} GIOStreamSpliceFlags;













typedef enum  {
  G_EMBLEM_ORIGIN_UNKNOWN,
  G_EMBLEM_ORIGIN_DEVICE,
  G_EMBLEM_ORIGIN_LIVEMETADATA,
  G_EMBLEM_ORIGIN_TAG
} GEmblemOrigin;














typedef enum {
  G_RESOLVER_ERROR_NOT_FOUND,
  G_RESOLVER_ERROR_TEMPORARY_FAILURE,
  G_RESOLVER_ERROR_INTERNAL
} GResolverError;




































typedef enum {
  G_RESOLVER_RECORD_SRV = 1,
  G_RESOLVER_RECORD_MX,
  G_RESOLVER_RECORD_TXT,
  G_RESOLVER_RECORD_SOA,
  G_RESOLVER_RECORD_NS
} GResolverRecordType;











typedef enum {
  G_RESOURCE_ERROR_NOT_FOUND,
  G_RESOURCE_ERROR_INTERNAL
} GResourceError;











typedef enum {
  G_RESOURCE_FLAGS_NONE       = 0,
  G_RESOURCE_FLAGS_COMPRESSED = (1<<0)
} GResourceFlags;









typedef enum  {
  G_RESOURCE_LOOKUP_FLAGS_NONE       = 0
} GResourceLookupFlags;














typedef enum {
  G_SOCKET_FAMILY_INVALID,
  G_SOCKET_FAMILY_UNIX = 1,
  G_SOCKET_FAMILY_IPV4 = 2,
  G_SOCKET_FAMILY_IPV6 = 23
} GSocketFamily;















typedef enum
{
  G_SOCKET_TYPE_INVALID,
  G_SOCKET_TYPE_STREAM,
  G_SOCKET_TYPE_DATAGRAM,
  G_SOCKET_TYPE_SEQPACKET
} GSocketType;


















typedef enum 
{
  G_SOCKET_MSG_NONE,
  G_SOCKET_MSG_OOB = 1,
  G_SOCKET_MSG_PEEK = 2,
  G_SOCKET_MSG_DONTROUTE = 4
} GSocketMsgFlags;



















typedef enum {
  G_SOCKET_PROTOCOL_UNKNOWN = -1,
  G_SOCKET_PROTOCOL_DEFAULT = 0,
  G_SOCKET_PROTOCOL_TCP     = 6,
  G_SOCKET_PROTOCOL_UDP     = 17,
  G_SOCKET_PROTOCOL_SCTP    = 132
} GSocketProtocol;












typedef enum {
  G_ZLIB_COMPRESSOR_FORMAT_ZLIB,
  G_ZLIB_COMPRESSOR_FORMAT_GZIP,
  G_ZLIB_COMPRESSOR_FORMAT_RAW
} GZlibCompressorFormat;


























typedef enum {
  G_UNIX_SOCKET_ADDRESS_INVALID,
  G_UNIX_SOCKET_ADDRESS_ANONYMOUS,
  G_UNIX_SOCKET_ADDRESS_PATH,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT,
  G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
} GUnixSocketAddressType;












typedef enum
{
  G_BUS_TYPE_STARTER = -1,
  G_BUS_TYPE_NONE = 0,
  G_BUS_TYPE_SYSTEM  = 1,
  G_BUS_TYPE_SESSION = 2
} GBusType;












typedef enum
{
  G_BUS_NAME_OWNER_FLAGS_NONE = 0,                    
  G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (1<<0),  
  G_BUS_NAME_OWNER_FLAGS_REPLACE = (1<<1)            
} GBusNameOwnerFlags;












typedef enum
{
  G_BUS_NAME_WATCHER_FLAGS_NONE = 0,
  G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (1<<0)
} GBusNameWatcherFlags;



















typedef enum
{
  G_DBUS_PROXY_FLAGS_NONE = 0,
  G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (1<<0),
  G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (1<<1),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (1<<2),
  G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (1<<3),
  G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION = (1<<4)
} GDBusProxyFlags;












































































































typedef enum
{
  
  G_DBUS_ERROR_FAILED,                           
  G_DBUS_ERROR_NO_MEMORY,                        
  G_DBUS_ERROR_SERVICE_UNKNOWN,                  
  G_DBUS_ERROR_NAME_HAS_NO_OWNER,                
  G_DBUS_ERROR_NO_REPLY,                         
  G_DBUS_ERROR_IO_ERROR,                         
  G_DBUS_ERROR_BAD_ADDRESS,                      
  G_DBUS_ERROR_NOT_SUPPORTED,                    
  G_DBUS_ERROR_LIMITS_EXCEEDED,                  
  G_DBUS_ERROR_ACCESS_DENIED,                    
  G_DBUS_ERROR_AUTH_FAILED,                      
  G_DBUS_ERROR_NO_SERVER,                        
  G_DBUS_ERROR_TIMEOUT,                          
  G_DBUS_ERROR_NO_NETWORK,                       
  G_DBUS_ERROR_ADDRESS_IN_USE,                   
  G_DBUS_ERROR_DISCONNECTED,                     
  G_DBUS_ERROR_INVALID_ARGS,                     
  G_DBUS_ERROR_FILE_NOT_FOUND,                   
  G_DBUS_ERROR_FILE_EXISTS,                      
  G_DBUS_ERROR_UNKNOWN_METHOD,                   
  G_DBUS_ERROR_TIMED_OUT,                        
  G_DBUS_ERROR_MATCH_RULE_NOT_FOUND,             
  G_DBUS_ERROR_MATCH_RULE_INVALID,               
  G_DBUS_ERROR_SPAWN_EXEC_FAILED,                
  G_DBUS_ERROR_SPAWN_FORK_FAILED,                
  G_DBUS_ERROR_SPAWN_CHILD_EXITED,               
  G_DBUS_ERROR_SPAWN_CHILD_SIGNALED,             
  G_DBUS_ERROR_SPAWN_FAILED,                     
  G_DBUS_ERROR_SPAWN_SETUP_FAILED,               
  G_DBUS_ERROR_SPAWN_CONFIG_INVALID,             
  G_DBUS_ERROR_SPAWN_SERVICE_INVALID,            
  G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND,          
  G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID,        
  G_DBUS_ERROR_SPAWN_FILE_INVALID,               
  G_DBUS_ERROR_SPAWN_NO_MEMORY,                  
  G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN,          
  G_DBUS_ERROR_INVALID_SIGNATURE,                
  G_DBUS_ERROR_INVALID_FILE_CONTENT,             
  G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN, 
  G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN,           
  G_DBUS_ERROR_OBJECT_PATH_IN_USE,               
  G_DBUS_ERROR_UNKNOWN_OBJECT,                   
  G_DBUS_ERROR_UNKNOWN_INTERFACE,                
  G_DBUS_ERROR_UNKNOWN_PROPERTY,                 
  G_DBUS_ERROR_PROPERTY_READ_ONLY                
} GDBusError;



















typedef enum {
  G_DBUS_CONNECTION_FLAGS_NONE = 0,
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = (1<<0),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = (1<<1),
  G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<2),
  G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = (1<<3),
  G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = (1<<4)
} GDBusConnectionFlags;











typedef enum {
  G_DBUS_CAPABILITY_FLAGS_NONE = 0,
  G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = (1<<0)
} GDBusCapabilityFlags;














typedef enum {
  G_DBUS_CALL_FLAGS_NONE = 0,
  G_DBUS_CALL_FLAGS_NO_AUTO_START = (1<<0),
  G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<1)
} GDBusCallFlags;














typedef enum {
  G_DBUS_MESSAGE_TYPE_INVALID,
  G_DBUS_MESSAGE_TYPE_METHOD_CALL,
  G_DBUS_MESSAGE_TYPE_METHOD_RETURN,
  G_DBUS_MESSAGE_TYPE_ERROR,
  G_DBUS_MESSAGE_TYPE_SIGNAL
} GDBusMessageType;















typedef enum {
  G_DBUS_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = (1<<0),
  G_DBUS_MESSAGE_FLAGS_NO_AUTO_START = (1<<1),
  G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION = (1<<2)
} GDBusMessageFlags;


















typedef enum {
  G_DBUS_MESSAGE_HEADER_FIELD_INVALID,
  G_DBUS_MESSAGE_HEADER_FIELD_PATH,
  G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE,
  G_DBUS_MESSAGE_HEADER_FIELD_MEMBER,
  G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME,
  G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL,
  G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION,
  G_DBUS_MESSAGE_HEADER_FIELD_SENDER,
  G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE,
  G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
} GDBusMessageHeaderField;











typedef enum
{
  G_DBUS_PROPERTY_INFO_FLAGS_NONE = 0,
  G_DBUS_PROPERTY_INFO_FLAGS_READABLE = (1<<0),
  G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE = (1<<1)
} GDBusPropertyInfoFlags;












typedef enum
{
  G_DBUS_SUBTREE_FLAGS_NONE = 0,
  G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = (1<<0)
} GDBusSubtreeFlags;














typedef enum
{
  G_DBUS_SERVER_FLAGS_NONE = 0,
  G_DBUS_SERVER_FLAGS_RUN_IN_THREAD = (1<<0),
  G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = (1<<1)
} GDBusServerFlags;

















typedef enum 
{
  G_DBUS_SIGNAL_FLAGS_NONE = 0,
  G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = (1<<0),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE = (1<<1),
  G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH = (1<<2)
} GDBusSignalFlags;












typedef enum
{
  G_DBUS_SEND_MESSAGE_FLAGS_NONE = 0,
  G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = (1<<0)
} GDBusSendMessageFlags;















typedef enum
{
  G_CREDENTIALS_TYPE_INVALID,
  G_CREDENTIALS_TYPE_LINUX_UCRED,
  G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED,
  G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
  G_CREDENTIALS_TYPE_SOLARIS_UCRED,
  G_CREDENTIALS_TYPE_NETBSD_UNPCBID
} GCredentialsType;










typedef enum
{
  G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN    = 'B',
  G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = 'l'
} GDBusMessageByteOrder;








































typedef enum
{
  G_APPLICATION_FLAGS_NONE,
  G_APPLICATION_IS_SERVICE  =          (1 << 0),
  G_APPLICATION_IS_LAUNCHER =          (1 << 1),

  G_APPLICATION_HANDLES_OPEN =         (1 << 2),
  G_APPLICATION_HANDLES_COMMAND_LINE = (1 << 3),
  G_APPLICATION_SEND_ENVIRONMENT    =  (1 << 4),

  G_APPLICATION_NON_UNIQUE =           (1 << 5),

  G_APPLICATION_CAN_OVERRIDE_APP_ID =  (1 << 6)
} GApplicationFlags;






















typedef enum {
  G_TLS_ERROR_UNAVAILABLE,
  G_TLS_ERROR_MISC,
  G_TLS_ERROR_BAD_CERTIFICATE,
  G_TLS_ERROR_NOT_TLS,
  G_TLS_ERROR_HANDSHAKE,
  G_TLS_ERROR_CERTIFICATE_REQUIRED,
  G_TLS_ERROR_EOF
} GTlsError;



























typedef enum {
  G_TLS_CERTIFICATE_UNKNOWN_CA    = (1 << 0),
  G_TLS_CERTIFICATE_BAD_IDENTITY  = (1 << 1),
  G_TLS_CERTIFICATE_NOT_ACTIVATED = (1 << 2),
  G_TLS_CERTIFICATE_EXPIRED       = (1 << 3),
  G_TLS_CERTIFICATE_REVOKED       = (1 << 4),
  G_TLS_CERTIFICATE_INSECURE      = (1 << 5),
  G_TLS_CERTIFICATE_GENERIC_ERROR = (1 << 6),

  G_TLS_CERTIFICATE_VALIDATE_ALL  = 0x007f
} GTlsCertificateFlags;











typedef enum {
  G_TLS_AUTHENTICATION_NONE,
  G_TLS_AUTHENTICATION_REQUESTED,
  G_TLS_AUTHENTICATION_REQUIRED
} GTlsAuthenticationMode;












typedef enum {
  G_TLS_REHANDSHAKE_NEVER,
  G_TLS_REHANDSHAKE_SAFELY,
  G_TLS_REHANDSHAKE_UNSAFELY
} GTlsRehandshakeMode;















typedef enum _GTlsPasswordFlags
{
  G_TLS_PASSWORD_NONE = 0,
  G_TLS_PASSWORD_RETRY = 1 << 1,
  G_TLS_PASSWORD_MANY_TRIES = 1 << 2,
  G_TLS_PASSWORD_FINAL_TRY = 1 << 3
} GTlsPasswordFlags;















typedef enum {
  G_TLS_INTERACTION_UNHANDLED,
  G_TLS_INTERACTION_HANDLED,
  G_TLS_INTERACTION_FAILED
} GTlsInteractionResult;













typedef enum
{
  G_DBUS_INTERFACE_SKELETON_FLAGS_NONE = 0,
  G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = (1<<0)
} GDBusInterfaceSkeletonFlags;













typedef enum
{
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = 0,
  G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = (1<<0)
} GDBusObjectManagerClientFlags;









typedef enum  {
  G_TLS_DATABASE_VERIFY_NONE = 0
} GTlsDatabaseVerifyFlags;













typedef enum {
  G_TLS_DATABASE_LOOKUP_NONE = 0,
  G_TLS_DATABASE_LOOKUP_KEYPAIR = 1
} GTlsDatabaseLookupFlags;











typedef enum {
  G_TLS_CERTIFICATE_REQUEST_NONE = 0
} GTlsCertificateRequestFlags;












typedef enum {
  G_IO_MODULE_SCOPE_NONE,
  G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
} GIOModuleScopeFlags;



























typedef enum {
  G_SOCKET_CLIENT_RESOLVING,
  G_SOCKET_CLIENT_RESOLVED,
  G_SOCKET_CLIENT_CONNECTING,
  G_SOCKET_CLIENT_CONNECTED,
  G_SOCKET_CLIENT_PROXY_NEGOTIATING,
  G_SOCKET_CLIENT_PROXY_NEGOTIATED,
  G_SOCKET_CLIENT_TLS_HANDSHAKING,
  G_SOCKET_CLIENT_TLS_HANDSHAKED,
  G_SOCKET_CLIENT_COMPLETE
} GSocketClientEvent;

















typedef enum {
  G_SOCKET_LISTENER_BINDING,
  G_SOCKET_LISTENER_BOUND,
  G_SOCKET_LISTENER_LISTENING,
  G_SOCKET_LISTENER_LISTENED
} GSocketListenerEvent;









typedef enum  {
  G_TEST_DBUS_NONE = 0
} GTestDBusFlags;







































typedef enum {
  G_SUBPROCESS_FLAGS_NONE                  = 0,
  G_SUBPROCESS_FLAGS_STDIN_PIPE            = (1u << 0),
  G_SUBPROCESS_FLAGS_STDIN_INHERIT         = (1u << 1),
  G_SUBPROCESS_FLAGS_STDOUT_PIPE           = (1u << 2),
  G_SUBPROCESS_FLAGS_STDOUT_SILENCE        = (1u << 3),
  G_SUBPROCESS_FLAGS_STDERR_PIPE           = (1u << 4),
  G_SUBPROCESS_FLAGS_STDERR_SILENCE        = (1u << 5),
  G_SUBPROCESS_FLAGS_STDERR_MERGE          = (1u << 6),
  G_SUBPROCESS_FLAGS_INHERIT_FDS           = (1u << 7)
} GSubprocessFlags;




















typedef enum {
  G_NOTIFICATION_PRIORITY_NORMAL,
  G_NOTIFICATION_PRIORITY_LOW,
  G_NOTIFICATION_PRIORITY_HIGH,
  G_NOTIFICATION_PRIORITY_URGENT
} GNotificationPriority;


















typedef enum {
  G_NETWORK_CONNECTIVITY_LOCAL       = 1,
  G_NETWORK_CONNECTIVITY_LIMITED     = 2,
  G_NETWORK_CONNECTIVITY_PORTAL      = 3,
  G_NETWORK_CONNECTIVITY_FULL        = 4
} GNetworkConnectivity;



#line 1905 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioenums.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giotypes.h"



typedef struct _GAppLaunchContext             GAppLaunchContext;
typedef struct _GAppInfo                      GAppInfo; 
typedef struct _GAsyncResult                  GAsyncResult; 
typedef struct _GAsyncInitable                GAsyncInitable;
typedef struct _GBufferedInputStream          GBufferedInputStream;
typedef struct _GBufferedOutputStream         GBufferedOutputStream;
typedef struct _GCancellable                  GCancellable;
typedef struct _GCharsetConverter             GCharsetConverter;
typedef struct _GConverter                    GConverter;
typedef struct _GConverterInputStream         GConverterInputStream;
typedef struct _GConverterOutputStream        GConverterOutputStream;
typedef struct _GDatagramBased                GDatagramBased;
typedef struct _GDataInputStream              GDataInputStream;
typedef struct _GSimplePermission             GSimplePermission;
typedef struct _GZlibCompressor               GZlibCompressor;
typedef struct _GZlibDecompressor             GZlibDecompressor;

typedef struct _GSimpleActionGroup            GSimpleActionGroup;
typedef struct _GRemoteActionGroup            GRemoteActionGroup;
typedef struct _GDBusActionGroup              GDBusActionGroup;
typedef struct _GActionMap                    GActionMap;
typedef struct _GActionGroup                  GActionGroup;
typedef struct _GPropertyAction               GPropertyAction;
typedef struct _GSimpleAction                 GSimpleAction;
typedef struct _GAction                       GAction;
typedef struct _GApplication                  GApplication;
typedef struct _GApplicationCommandLine       GApplicationCommandLine;
typedef struct _GSettingsBackend              GSettingsBackend;
typedef struct _GSettings                     GSettings;
typedef struct _GPermission                   GPermission;

typedef struct _GMenuModel                    GMenuModel;
typedef struct _GNotification                 GNotification;

typedef struct _GListModel                    GListModel;   
typedef struct _GListStore                    GListStore;






typedef struct _GDrive                        GDrive; 
typedef struct _GFileEnumerator               GFileEnumerator;
typedef struct _GFileMonitor                  GFileMonitor;
typedef struct _GFilterInputStream            GFilterInputStream;
typedef struct _GFilterOutputStream           GFilterOutputStream;








typedef struct _GFile                         GFile; 
typedef struct _GFileInfo                     GFileInfo;






typedef struct _GFileAttributeMatcher         GFileAttributeMatcher;
typedef struct _GFileAttributeInfo            GFileAttributeInfo;
typedef struct _GFileAttributeInfoList        GFileAttributeInfoList;
typedef struct _GFileDescriptorBased          GFileDescriptorBased;
typedef struct _GFileInputStream              GFileInputStream;
typedef struct _GFileOutputStream             GFileOutputStream;
typedef struct _GFileIOStream                 GFileIOStream;
typedef struct _GFileIcon                     GFileIcon;
typedef struct _GFilenameCompleter            GFilenameCompleter;


typedef struct _GIcon                         GIcon; 
typedef struct _GInetAddress                  GInetAddress;
typedef struct _GInetAddressMask              GInetAddressMask;
typedef struct _GInetSocketAddress            GInetSocketAddress;
typedef struct _GNativeSocketAddress          GNativeSocketAddress;
typedef struct _GInputStream                  GInputStream;
typedef struct _GInitable                     GInitable;
typedef struct _GIOModule                     GIOModule;
typedef struct _GIOExtensionPoint             GIOExtensionPoint;
typedef struct _GIOExtension                  GIOExtension;






typedef struct _GIOSchedulerJob               GIOSchedulerJob;
typedef struct _GIOStreamAdapter              GIOStreamAdapter;
typedef struct _GLoadableIcon                 GLoadableIcon; 
typedef struct _GBytesIcon                    GBytesIcon;
typedef struct _GMemoryInputStream            GMemoryInputStream;
typedef struct _GMemoryOutputStream           GMemoryOutputStream;






typedef struct _GMount                        GMount; 
typedef struct _GMountOperation               GMountOperation;
typedef struct _GNetworkAddress               GNetworkAddress;
typedef struct _GNetworkMonitor               GNetworkMonitor;
typedef struct _GNetworkService               GNetworkService;
typedef struct _GOutputStream                 GOutputStream;
typedef struct _GIOStream                     GIOStream;
typedef struct _GSimpleIOStream               GSimpleIOStream;
typedef struct _GPollableInputStream          GPollableInputStream; 
typedef struct _GPollableOutputStream         GPollableOutputStream; 
typedef struct _GResolver                     GResolver;








typedef struct _GResource                     GResource;
typedef struct _GSeekable                     GSeekable;
typedef struct _GSimpleAsyncResult            GSimpleAsyncResult;








typedef struct _GSocket                       GSocket;







typedef struct _GSocketControlMessage         GSocketControlMessage;







typedef struct _GSocketClient                               GSocketClient;







typedef struct _GSocketConnection                           GSocketConnection;







typedef struct _GSocketListener                             GSocketListener;








typedef struct _GSocketService                              GSocketService;
typedef struct _GSocketAddress                GSocketAddress;
typedef struct _GSocketAddressEnumerator      GSocketAddressEnumerator;
typedef struct _GSocketConnectable            GSocketConnectable;
typedef struct _GSrvTarget                    GSrvTarget;
typedef struct _GTask                         GTask;







typedef struct _GTcpConnection                              GTcpConnection;
typedef struct _GTcpWrapperConnection                       GTcpWrapperConnection;








typedef struct _GThreadedSocketService                      GThreadedSocketService;
typedef struct _GDtlsConnection               GDtlsConnection;
typedef struct _GDtlsClientConnection         GDtlsClientConnection; 
typedef struct _GDtlsServerConnection         GDtlsServerConnection; 
typedef struct _GThemedIcon                   GThemedIcon;
typedef struct _GTlsCertificate               GTlsCertificate;
typedef struct _GTlsClientConnection          GTlsClientConnection; 
typedef struct _GTlsConnection                GTlsConnection;
typedef struct _GTlsDatabase                  GTlsDatabase;
typedef struct _GTlsFileDatabase              GTlsFileDatabase;
typedef struct _GTlsInteraction               GTlsInteraction;
typedef struct _GTlsPassword                  GTlsPassword;
typedef struct _GTlsServerConnection          GTlsServerConnection; 
typedef struct _GVfs                          GVfs; 








typedef struct _GProxyResolver                GProxyResolver;
typedef struct _GProxy			      GProxy;
typedef struct _GProxyAddress		      GProxyAddress;
typedef struct _GProxyAddressEnumerator	      GProxyAddressEnumerator;






typedef struct _GVolume                       GVolume; 
typedef struct _GVolumeMonitor                GVolumeMonitor;










typedef void (*GAsyncReadyCallback) (GObject *source_object,
				     GAsyncResult *res,
				     gpointer user_data);











typedef void (*GFileProgressCallback) (goffset current_num_bytes,
                                       goffset total_num_bytes,
                                       gpointer user_data);














typedef gboolean (* GFileReadMoreCallback) (const char *file_contents,
                                            goffset file_size,
                                            gpointer callback_data);







































typedef void (* GFileMeasureProgressCallback) (gboolean reporting,
                                               guint64  current_size,
                                               guint64  num_dirs,
                                               guint64  num_files,
                                               gpointer user_data);















typedef gboolean (*GIOSchedulerJobFunc) (GIOSchedulerJob *job,
					 GCancellable    *cancellable,
					 gpointer         user_data);










typedef void (*GSimpleAsyncThreadFunc) (GSimpleAsyncResult *res,
                                        GObject *object,
                                        GCancellable *cancellable);














typedef gboolean (*GSocketSourceFunc) (GSocket *socket,
				       GIOCondition condition,
				       gpointer user_data);















typedef gboolean (*GDatagramBasedSourceFunc) (GDatagramBased *datagram_based,
                                              GIOCondition    condition,
                                              gpointer        user_data);













typedef struct _GInputVector GInputVector;

struct _GInputVector {
  gpointer buffer;
  gsize size;
};








































typedef struct _GInputMessage GInputMessage;

struct _GInputMessage {
  GSocketAddress         **address;

  GInputVector            *vectors;
  guint                    num_vectors;

  gsize                    bytes_received;
  gint                     flags;

  GSocketControlMessage ***control_messages;
  guint                   *num_control_messages;
};













typedef struct _GOutputVector GOutputVector;

struct _GOutputVector {
  gconstpointer buffer;
  gsize size;
};






















typedef struct _GOutputMessage GOutputMessage;

struct _GOutputMessage {
  GSocketAddress         *address;

  GOutputVector          *vectors;
  guint                   num_vectors;

  guint                   bytes_sent;

  GSocketControlMessage **control_messages;
  guint                   num_control_messages;
};

typedef struct _GCredentials                  GCredentials;
typedef struct _GUnixCredentialsMessage       GUnixCredentialsMessage;
typedef struct _GUnixFDList                   GUnixFDList;
typedef struct _GDBusMessage                  GDBusMessage;
typedef struct _GDBusConnection               GDBusConnection;
typedef struct _GDBusProxy                    GDBusProxy;
typedef struct _GDBusMethodInvocation         GDBusMethodInvocation;
typedef struct _GDBusServer                   GDBusServer;
typedef struct _GDBusAuthObserver             GDBusAuthObserver;
typedef struct _GDBusErrorEntry               GDBusErrorEntry;
typedef struct _GDBusInterfaceVTable          GDBusInterfaceVTable;
typedef struct _GDBusSubtreeVTable            GDBusSubtreeVTable;
typedef struct _GDBusAnnotationInfo           GDBusAnnotationInfo;
typedef struct _GDBusArgInfo                  GDBusArgInfo;
typedef struct _GDBusMethodInfo               GDBusMethodInfo;
typedef struct _GDBusSignalInfo               GDBusSignalInfo;
typedef struct _GDBusPropertyInfo             GDBusPropertyInfo;
typedef struct _GDBusInterfaceInfo            GDBusInterfaceInfo;
typedef struct _GDBusNodeInfo                 GDBusNodeInfo;













typedef gboolean (*GCancellableSourceFunc) (GCancellable *cancellable,
					    gpointer      user_data);














typedef gboolean (*GPollableSourceFunc) (GObject  *pollable_stream,
					 gpointer  user_data);

typedef struct _GDBusInterface              GDBusInterface; 
typedef struct _GDBusInterfaceSkeleton      GDBusInterfaceSkeleton;
typedef struct _GDBusObject                 GDBusObject;  
typedef struct _GDBusObjectSkeleton         GDBusObjectSkeleton;
typedef struct _GDBusObjectProxy            GDBusObjectProxy;
typedef struct _GDBusObjectManager          GDBusObjectManager;  
typedef struct _GDBusObjectManagerClient    GDBusObjectManagerClient;
typedef struct _GDBusObjectManagerServer    GDBusObjectManagerServer;






















typedef GType (*GDBusProxyTypeFunc) (GDBusObjectManagerClient   *manager,
                                     const gchar                *object_path,
                                     const gchar                *interface_name,
                                     gpointer                    user_data);

typedef struct _GTestDBus GTestDBus;








typedef struct _GSubprocess                   GSubprocess;







typedef struct _GSubprocessLauncher           GSubprocessLauncher;



#line 652 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giotypes.h"
#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gaction.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gaction.h"












typedef struct _GActionInterface                            GActionInterface;

struct _GActionInterface
{
  GTypeInterface g_iface;

  
  const gchar *        (* get_name)             (GAction  *action);
  const GVariantType * (* get_parameter_type)   (GAction  *action);
  const GVariantType * (* get_state_type)       (GAction  *action);
  GVariant *           (* get_state_hint)       (GAction  *action);

  gboolean             (* get_enabled)          (GAction  *action);
  GVariant *           (* get_state)            (GAction  *action);

  void                 (* change_state)         (GAction  *action,
                                                 GVariant *value);
  void                 (* activate)             (GAction  *action,
                                                 GVariant *parameter);
};

extern
GType                   g_action_get_type                               (void) ;

extern
const gchar *           g_action_get_name                               (GAction            *action);
extern
const GVariantType *    g_action_get_parameter_type                     (GAction            *action);
extern
const GVariantType *    g_action_get_state_type                         (GAction            *action);
extern
GVariant *              g_action_get_state_hint                         (GAction            *action);

extern
gboolean                g_action_get_enabled                            (GAction            *action);
extern
GVariant *              g_action_get_state                              (GAction            *action);

extern
void                    g_action_change_state                           (GAction            *action,
                                                                         GVariant           *value);
extern
void                    g_action_activate                               (GAction            *action,
                                                                         GVariant           *parameter);

extern
gboolean                g_action_name_is_valid                          (const gchar        *action_name);

extern
gboolean                g_action_parse_detailed_name                    (const gchar        *detailed_name,
                                                                         gchar             **action_name,
                                                                         GVariant          **target_value,
                                                                         GError            **error);

extern
gchar *                 g_action_print_detailed_name                    (const gchar        *action_name,
                                                                         GVariant           *target_value);



#line 99 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gaction.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactiongroup.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactiongroup.h"














typedef struct _GActionGroupInterface                       GActionGroupInterface;

struct _GActionGroupInterface
{
  GTypeInterface g_iface;

  
  gboolean              (* has_action)                 (GActionGroup  *action_group,
                                                        const gchar   *action_name);

  gchar **              (* list_actions)               (GActionGroup  *action_group);

  gboolean              (* get_action_enabled)         (GActionGroup  *action_group,
                                                        const gchar   *action_name);

  const GVariantType *  (* get_action_parameter_type)  (GActionGroup  *action_group,
                                                        const gchar   *action_name);

  const GVariantType *  (* get_action_state_type)      (GActionGroup  *action_group,
                                                        const gchar   *action_name);

  GVariant *            (* get_action_state_hint)      (GActionGroup  *action_group,
                                                        const gchar   *action_name);

  GVariant *            (* get_action_state)           (GActionGroup  *action_group,
                                                        const gchar   *action_name);

  void                  (* change_action_state)        (GActionGroup  *action_group,
                                                        const gchar   *action_name,
                                                        GVariant      *value);

  void                  (* activate_action)            (GActionGroup  *action_group,
                                                        const gchar   *action_name,
                                                        GVariant      *parameter);

  
  void                  (* action_added)               (GActionGroup  *action_group,
                                                        const gchar   *action_name);
  void                  (* action_removed)             (GActionGroup  *action_group,
                                                        const gchar   *action_name);
  void                  (* action_enabled_changed)     (GActionGroup  *action_group,
                                                        const gchar   *action_name,
                                                        gboolean       enabled);
  void                  (* action_state_changed)       (GActionGroup   *action_group,
                                                        const gchar    *action_name,
                                                        GVariant       *state);

  
  gboolean              (* query_action)               (GActionGroup        *action_group,
                                                        const gchar         *action_name,
                                                        gboolean            *enabled,
                                                        const GVariantType **parameter_type,
                                                        const GVariantType **state_type,
                                                        GVariant           **state_hint,
                                                        GVariant           **state);
};

extern
GType                   g_action_group_get_type                         (void) ;

extern
gboolean                g_action_group_has_action                       (GActionGroup *action_group,
                                                                         const gchar  *action_name);
extern
gchar **                g_action_group_list_actions                     (GActionGroup *action_group);

extern
const GVariantType *    g_action_group_get_action_parameter_type        (GActionGroup *action_group,
                                                                         const gchar  *action_name);
extern
const GVariantType *    g_action_group_get_action_state_type            (GActionGroup *action_group,
                                                                         const gchar  *action_name);
extern
GVariant *              g_action_group_get_action_state_hint            (GActionGroup *action_group,
                                                                         const gchar  *action_name);

extern
gboolean                g_action_group_get_action_enabled               (GActionGroup *action_group,
                                                                         const gchar  *action_name);

extern
GVariant *              g_action_group_get_action_state                 (GActionGroup *action_group,
                                                                         const gchar  *action_name);
extern
void                    g_action_group_change_action_state              (GActionGroup *action_group,
                                                                         const gchar  *action_name,
                                                                         GVariant     *value);

extern
void                    g_action_group_activate_action                  (GActionGroup *action_group,
                                                                         const gchar  *action_name,
                                                                         GVariant     *parameter);


extern
void                    g_action_group_action_added                     (GActionGroup *action_group,
                                                                         const gchar  *action_name);
extern
void                    g_action_group_action_removed                   (GActionGroup *action_group,
                                                                         const gchar  *action_name);
extern
void                    g_action_group_action_enabled_changed           (GActionGroup *action_group,
                                                                         const gchar  *action_name,
                                                                         gboolean      enabled);

extern
void                    g_action_group_action_state_changed             (GActionGroup *action_group,
                                                                         const gchar  *action_name,
                                                                         GVariant     *state);

extern
gboolean                g_action_group_query_action                     (GActionGroup        *action_group,
                                                                         const gchar         *action_name,
                                                                         gboolean            *enabled,
                                                                         const GVariantType **parameter_type,
                                                                         const GVariantType **state_type,
                                                                         GVariant           **state_hint,
                                                                         GVariant           **state);



#line 162 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactiongroup.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactiongroupexporter.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactiongroupexporter.h"





extern
guint                   g_dbus_connection_export_action_group           (GDBusConnection  *connection,
                                                                         const gchar      *object_path,
                                                                         GActionGroup     *action_group,
                                                                         GError          **error);

extern
void                    g_dbus_connection_unexport_action_group         (GDBusConnection  *connection,
                                                                         guint             export_id);



#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactiongroupexporter.h"
#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactionmap.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactionmap.h"














typedef struct _GActionMapInterface                         GActionMapInterface;
typedef struct _GActionEntry                                GActionEntry;

struct _GActionMapInterface
{
  GTypeInterface g_iface;

  GAction * (* lookup_action) (GActionMap  *action_map,
                               const gchar *action_name);
  void      (* add_action)    (GActionMap  *action_map,
                               GAction     *action);
  void      (* remove_action) (GActionMap  *action_map,
                               const gchar *action_name);
};

struct _GActionEntry
{
  const gchar *name;

  void (* activate) (GSimpleAction *action,
                     GVariant      *parameter,
                     gpointer       user_data);

  const gchar *parameter_type;

  const gchar *state;

  void (* change_state) (GSimpleAction *action,
                         GVariant      *value,
                         gpointer       user_data);

  
  gsize padding[3];
};

extern
GType                   g_action_map_get_type                           (void) ;

extern
GAction *               g_action_map_lookup_action                      (GActionMap         *action_map,
                                                                         const gchar        *action_name);
extern
void                    g_action_map_add_action                         (GActionMap         *action_map,
                                                                         GAction            *action);
extern
void                    g_action_map_remove_action                      (GActionMap         *action_map,
                                                                         const gchar        *action_name);
extern
void                    g_action_map_add_action_entries                 (GActionMap         *action_map,
                                                                         const GActionEntry *entries,
                                                                         gint                n_entries,
                                                                         gpointer            user_data);



#line 96 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gactionmap.h"
#line 32 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gappinfo.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gappinfo.h"

















typedef struct _GAppLaunchContextClass   GAppLaunchContextClass;
typedef struct _GAppLaunchContextPrivate GAppLaunchContextPrivate;






































typedef struct _GAppInfoIface    GAppInfoIface;

struct _GAppInfoIface
{
  GTypeInterface g_iface;

  

  GAppInfo *   (* dup)                          (GAppInfo           *appinfo);
  gboolean     (* equal)                        (GAppInfo           *appinfo1,
                                                 GAppInfo           *appinfo2);
  const char * (* get_id)                       (GAppInfo           *appinfo);
  const char * (* get_name)                     (GAppInfo           *appinfo);
  const char * (* get_description)              (GAppInfo           *appinfo);
  const char * (* get_executable)               (GAppInfo           *appinfo);
  GIcon *      (* get_icon)                     (GAppInfo           *appinfo);
  gboolean     (* launch)                       (GAppInfo           *appinfo,
                                                 GList              *files,
                                                 GAppLaunchContext  *launch_context,
                                                 GError            **error);
  gboolean     (* supports_uris)                (GAppInfo           *appinfo);
  gboolean     (* supports_files)               (GAppInfo           *appinfo);
  gboolean     (* launch_uris)                  (GAppInfo           *appinfo,
                                                 GList              *uris,
                                                 GAppLaunchContext  *launch_context,
                                                 GError            **error);
  gboolean     (* should_show)                  (GAppInfo           *appinfo);

  
  gboolean     (* set_as_default_for_type)      (GAppInfo           *appinfo,
                                                 const char         *content_type,
                                                 GError            **error);
  gboolean     (* set_as_default_for_extension) (GAppInfo           *appinfo,
                                                 const char         *extension,
                                                 GError            **error);
  gboolean     (* add_supports_type)            (GAppInfo           *appinfo,
                                                 const char         *content_type,
                                                 GError            **error);
  gboolean     (* can_remove_supports_type)     (GAppInfo           *appinfo);
  gboolean     (* remove_supports_type)         (GAppInfo           *appinfo,
                                                 const char         *content_type,
                                                 GError            **error);
  gboolean     (* can_delete)                   (GAppInfo           *appinfo);
  gboolean     (* do_delete)                    (GAppInfo           *appinfo);
  const char * (* get_commandline)              (GAppInfo           *appinfo);
  const char * (* get_display_name)             (GAppInfo           *appinfo);
  gboolean     (* set_as_last_used_for_type)    (GAppInfo           *appinfo,
                                                 const char         *content_type,
                                                 GError            **error);
  const char ** (* get_supported_types)         (GAppInfo           *appinfo);
};

extern
GType       g_app_info_get_type                     (void) ;
extern
GAppInfo *  g_app_info_create_from_commandline      (const char           *commandline,
                                                     const char           *application_name,
                                                     GAppInfoCreateFlags   flags,
                                                     GError              **error);
extern
GAppInfo *  g_app_info_dup                          (GAppInfo             *appinfo);
extern
gboolean    g_app_info_equal                        (GAppInfo             *appinfo1,
                                                     GAppInfo             *appinfo2);
extern
const char *g_app_info_get_id                       (GAppInfo             *appinfo);
extern
const char *g_app_info_get_name                     (GAppInfo             *appinfo);
extern
const char *g_app_info_get_display_name             (GAppInfo             *appinfo);
extern
const char *g_app_info_get_description              (GAppInfo             *appinfo);
extern
const char *g_app_info_get_executable               (GAppInfo             *appinfo);
extern
const char *g_app_info_get_commandline              (GAppInfo             *appinfo);
extern
GIcon *     g_app_info_get_icon                     (GAppInfo             *appinfo);
extern
gboolean    g_app_info_launch                       (GAppInfo             *appinfo,
                                                     GList                *files,
                                                     GAppLaunchContext    *launch_context,
                                                     GError              **error);
extern
gboolean    g_app_info_supports_uris                (GAppInfo             *appinfo);
extern
gboolean    g_app_info_supports_files               (GAppInfo             *appinfo);
extern
gboolean    g_app_info_launch_uris                  (GAppInfo             *appinfo,
                                                     GList                *uris,
                                                     GAppLaunchContext    *launch_context,
                                                     GError              **error);
extern
gboolean    g_app_info_should_show                  (GAppInfo             *appinfo);

extern
gboolean    g_app_info_set_as_default_for_type      (GAppInfo             *appinfo,
                                                     const char           *content_type,
                                                     GError              **error);
extern
gboolean    g_app_info_set_as_default_for_extension (GAppInfo             *appinfo,
                                                     const char           *extension,
                                                     GError              **error);
extern
gboolean    g_app_info_add_supports_type            (GAppInfo             *appinfo,
                                                     const char           *content_type,
                                                     GError              **error);
extern
gboolean    g_app_info_can_remove_supports_type     (GAppInfo             *appinfo);
extern
gboolean    g_app_info_remove_supports_type         (GAppInfo             *appinfo,
                                                     const char           *content_type,
                                                     GError              **error);
extern
const char **g_app_info_get_supported_types         (GAppInfo             *appinfo);

extern
gboolean    g_app_info_can_delete                   (GAppInfo   *appinfo);
extern
gboolean    g_app_info_delete                       (GAppInfo   *appinfo);

extern
gboolean    g_app_info_set_as_last_used_for_type    (GAppInfo             *appinfo,
                                                     const char           *content_type,
                                                     GError              **error);

extern
GList *   g_app_info_get_all                     (void);
extern
GList *   g_app_info_get_all_for_type            (const char  *content_type);
extern
GList *   g_app_info_get_recommended_for_type    (const gchar *content_type);
extern
GList *   g_app_info_get_fallback_for_type       (const gchar *content_type);

extern
void      g_app_info_reset_type_associations     (const char  *content_type);
extern
GAppInfo *g_app_info_get_default_for_type        (const char  *content_type,
                                                  gboolean     must_support_uris);
extern
GAppInfo *g_app_info_get_default_for_uri_scheme  (const char  *uri_scheme);

extern
gboolean  g_app_info_launch_default_for_uri      (const char              *uri,
                                                  GAppLaunchContext       *launch_context,
                                                  GError                 **error);

extern
void      g_app_info_launch_default_for_uri_async  (const char           *uri,
                                                    GAppLaunchContext    *launch_context,
                                                    GCancellable         *cancellable,
                                                    GAsyncReadyCallback   callback,
                                                    gpointer              user_data);
extern
gboolean  g_app_info_launch_default_for_uri_finish (GAsyncResult         *result,
                                                    GError              **error);









struct _GAppLaunchContext
{
  GObject parent_instance;

  
  GAppLaunchContextPrivate *priv;
};

struct _GAppLaunchContextClass
{
  GObjectClass parent_class;

  char * (* get_display)           (GAppLaunchContext *context,
                                    GAppInfo          *info,
                                    GList             *files);
  char * (* get_startup_notify_id) (GAppLaunchContext *context,
                                    GAppInfo          *info,
                                    GList             *files);
  void   (* launch_failed)         (GAppLaunchContext *context,
                                    const char        *startup_notify_id);
  void   (* launched)              (GAppLaunchContext *context,
                                    GAppInfo          *info,
                                    GVariant          *platform_data);

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};

extern
GType              g_app_launch_context_get_type              (void) ;
extern
GAppLaunchContext *g_app_launch_context_new                   (void);

extern
void               g_app_launch_context_setenv                (GAppLaunchContext *context,
                                                               const char        *variable,
                                                               const char        *value);
extern
void               g_app_launch_context_unsetenv              (GAppLaunchContext *context,
                                                               const char        *variable);
extern
char **            g_app_launch_context_get_environment       (GAppLaunchContext *context);

extern
char *             g_app_launch_context_get_display           (GAppLaunchContext *context,
                                                               GAppInfo          *info,
                                                               GList             *files);
extern
char *             g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context,
                                                               GAppInfo          *info,
                                                               GList             *files);
extern
void               g_app_launch_context_launch_failed         (GAppLaunchContext *context,
                                                               const char *       startup_notify_id);







typedef struct _GAppInfoMonitor                             GAppInfoMonitor;

extern
GType                   g_app_info_monitor_get_type                     (void);

extern
GAppInfoMonitor *       g_app_info_monitor_get                          (void);



#line 325 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gappinfo.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gapplication.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gapplication.h"















typedef struct _GApplicationPrivate                         GApplicationPrivate;
typedef struct _GApplicationClass                           GApplicationClass;

struct _GApplication
{
  
  GObject parent_instance;

  GApplicationPrivate *priv;
};

struct _GApplicationClass
{
  
  GObjectClass parent_class;

  
  
  void                      (* startup)             (GApplication              *application);

  void                      (* activate)            (GApplication              *application);

  void                      (* open)                (GApplication              *application,
                                                     GFile                    **files,
                                                     gint                       n_files,
                                                     const gchar               *hint);

  int                       (* command_line)        (GApplication              *application,
                                                     GApplicationCommandLine   *command_line);

  

  


















  gboolean                  (* local_command_line)  (GApplication              *application,
                                                     gchar                   ***arguments,
                                                     int                       *exit_status);

  void                      (* before_emit)         (GApplication              *application,
                                                     GVariant                  *platform_data);
  void                      (* after_emit)          (GApplication              *application,
                                                     GVariant                  *platform_data);
  void                      (* add_platform_data)   (GApplication              *application,
                                                     GVariantBuilder           *builder);
  void                      (* quit_mainloop)       (GApplication              *application);
  void                      (* run_mainloop)        (GApplication              *application);
  void                      (* shutdown)            (GApplication              *application);

  gboolean                  (* dbus_register)       (GApplication              *application,
                                                     GDBusConnection           *connection,
                                                     const gchar               *object_path,
                                                     GError                   **error);
  void                      (* dbus_unregister)     (GApplication              *application,
                                                     GDBusConnection           *connection,
                                                     const gchar               *object_path);
  gint                      (* handle_local_options)(GApplication              *application,
                                                     GVariantDict              *options);

  
  gpointer padding[8];
};

extern
GType                   g_application_get_type                          (void) ;

extern
gboolean                g_application_id_is_valid                       (const gchar              *application_id);

extern
GApplication *          g_application_new                               (const gchar              *application_id,
                                                                         GApplicationFlags         flags);

extern
const gchar *           g_application_get_application_id                (GApplication             *application);
extern
void                    g_application_set_application_id                (GApplication             *application,
                                                                         const gchar              *application_id);

extern
GDBusConnection *       g_application_get_dbus_connection               (GApplication             *application);
extern
const gchar *           g_application_get_dbus_object_path              (GApplication             *application);

extern
guint                   g_application_get_inactivity_timeout            (GApplication             *application);
extern
void                    g_application_set_inactivity_timeout            (GApplication             *application,
                                                                         guint                     inactivity_timeout);

extern
GApplicationFlags       g_application_get_flags                         (GApplication             *application);
extern
void                    g_application_set_flags                         (GApplication             *application,
                                                                         GApplicationFlags         flags);

extern
const gchar *           g_application_get_resource_base_path            (GApplication             *application);
extern
void                    g_application_set_resource_base_path            (GApplication             *application,
                                                                         const gchar              *resource_path);

__declspec(deprecated) extern
void                    g_application_set_action_group                  (GApplication             *application,
                                                                         GActionGroup             *action_group);

extern
void                    g_application_add_main_option_entries           (GApplication             *application,
                                                                         const GOptionEntry       *entries);

extern
void                    g_application_add_main_option                   (GApplication             *application,
                                                                         const char               *long_name,
                                                                         char                      short_name,
                                                                         GOptionFlags              flags,
                                                                         GOptionArg                arg,
                                                                         const char               *description,
                                                                         const char               *arg_description);
extern
void                    g_application_add_option_group                  (GApplication             *application,
                                                                         GOptionGroup             *group);

extern
gboolean                g_application_get_is_registered                 (GApplication             *application);
extern
gboolean                g_application_get_is_remote                     (GApplication             *application);

extern
gboolean                g_application_register                          (GApplication             *application,
                                                                         GCancellable             *cancellable,
                                                                         GError                  **error);

extern
void                    g_application_hold                              (GApplication             *application);
extern
void                    g_application_release                           (GApplication             *application);

extern
void                    g_application_activate                          (GApplication             *application);

extern
void                    g_application_open                              (GApplication             *application,
                                                                         GFile                   **files,
                                                                         gint                      n_files,
                                                                         const gchar              *hint);

extern
int                     g_application_run                               (GApplication             *application,
                                                                         int                       argc,
                                                                         char                    **argv);

extern
void                    g_application_quit                              (GApplication             *application);

extern
GApplication *          g_application_get_default                       (void);
extern
void                    g_application_set_default                       (GApplication             *application);

extern
void                    g_application_mark_busy                         (GApplication             *application);
extern
void                    g_application_unmark_busy                       (GApplication             *application);
extern
gboolean                g_application_get_is_busy                       (GApplication             *application);

extern
void                    g_application_send_notification                 (GApplication             *application,
                                                                         const gchar              *id,
                                                                         GNotification            *notification);
extern
void                    g_application_withdraw_notification             (GApplication             *application,
                                                                         const gchar              *id);

extern
void                    g_application_bind_busy_property                (GApplication             *application,
                                                                         gpointer                  object,
                                                                         const gchar              *property);

extern
void                    g_application_unbind_busy_property              (GApplication             *application,
                                                                         gpointer                  object,
                                                                         const gchar              *property);



#line 244 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gapplication.h"
#line 34 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gapplicationcommandline.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gapplicationcommandline.h"




















typedef struct _GApplicationCommandLinePrivate               GApplicationCommandLinePrivate;
typedef struct _GApplicationCommandLineClass                 GApplicationCommandLineClass;

struct _GApplicationCommandLine
{
  
  GObject parent_instance;

  GApplicationCommandLinePrivate *priv;
};

struct _GApplicationCommandLineClass
{
  
  GObjectClass parent_class;

  void                  (* print_literal)       (GApplicationCommandLine *cmdline,
                                                 const gchar             *message);
  void                  (* printerr_literal)    (GApplicationCommandLine *cmdline,
                                                 const gchar             *message);
  GInputStream *        (* get_stdin)           (GApplicationCommandLine *cmdline);

  gpointer padding[11];
};

extern
GType                   g_application_command_line_get_type             (void) ;

extern
gchar **                g_application_command_line_get_arguments        (GApplicationCommandLine   *cmdline,
                                                                         int                       *argc);

extern
GVariantDict *          g_application_command_line_get_options_dict     (GApplicationCommandLine   *cmdline);

extern
GInputStream *          g_application_command_line_get_stdin            (GApplicationCommandLine   *cmdline);

extern
const gchar * const *   g_application_command_line_get_environ          (GApplicationCommandLine   *cmdline);

extern
const gchar *           g_application_command_line_getenv               (GApplicationCommandLine   *cmdline,
                                                                         const gchar               *name);

extern
const gchar *           g_application_command_line_get_cwd              (GApplicationCommandLine   *cmdline);

extern
gboolean                g_application_command_line_get_is_remote        (GApplicationCommandLine   *cmdline);

extern
void                    g_application_command_line_print                (GApplicationCommandLine   *cmdline,
                                                                         const gchar               *format,
                                                                         ...) ;
extern
void                    g_application_command_line_printerr             (GApplicationCommandLine   *cmdline,
                                                                         const gchar               *format,
                                                                         ...) ;

extern
int                     g_application_command_line_get_exit_status      (GApplicationCommandLine   *cmdline);
extern
void                    g_application_command_line_set_exit_status      (GApplicationCommandLine   *cmdline,
                                                                         int                        exit_status);

extern
GVariant *              g_application_command_line_get_platform_data    (GApplicationCommandLine   *cmdline);

extern
GFile *                 g_application_command_line_create_file_for_arg  (GApplicationCommandLine   *cmdline,
                                                                         const gchar               *arg);



#line 123 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gapplicationcommandline.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncinitable.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncinitable.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginitable.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginitable.h"


















typedef struct _GInitableIface GInitableIface;











struct _GInitableIface
{
  GTypeInterface g_iface;

  

  gboolean    (* init) (GInitable    *initable,
			GCancellable *cancellable,
			GError      **error);
};


extern
GType    g_initable_get_type   (void) ;

extern
gboolean g_initable_init       (GInitable     *initable,
				GCancellable  *cancellable,
				GError       **error);

extern
gpointer g_initable_new        (GType          object_type,
				GCancellable  *cancellable,
				GError       **error,
				const gchar   *first_property_name,
				...);
extern
gpointer g_initable_newv       (GType          object_type,
				guint          n_parameters,
				GParameter    *parameters,
				GCancellable  *cancellable,
				GError       **error);
extern
GObject* g_initable_new_valist (GType          object_type,
				const gchar   *first_property_name,
				va_list        var_args,
				GCancellable  *cancellable,
				GError       **error);




#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginitable.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncinitable.h"
















typedef struct _GAsyncInitableIface GAsyncInitableIface;












struct _GAsyncInitableIface
{
  GTypeInterface g_iface;

  

  void     (* init_async)  (GAsyncInitable      *initable,
			    int                  io_priority,
			    GCancellable        *cancellable,
			    GAsyncReadyCallback  callback,
			    gpointer             user_data);
  gboolean (* init_finish) (GAsyncInitable      *initable,
			    GAsyncResult        *res,
			    GError             **error);
};

extern
GType    g_async_initable_get_type    (void) ;


extern
void     g_async_initable_init_async       (GAsyncInitable       *initable,
					    int                   io_priority,
					    GCancellable         *cancellable,
					    GAsyncReadyCallback   callback,
					    gpointer              user_data);
extern
gboolean g_async_initable_init_finish      (GAsyncInitable       *initable,
					    GAsyncResult         *res,
					    GError              **error);

extern
void     g_async_initable_new_async        (GType                 object_type,
					    int                   io_priority,
					    GCancellable         *cancellable,
					    GAsyncReadyCallback   callback,
					    gpointer              user_data,
					    const gchar          *first_property_name,
					    ...);
extern
void     g_async_initable_newv_async       (GType                 object_type,
					    guint                 n_parameters,
					    GParameter           *parameters,
					    int                   io_priority,
					    GCancellable         *cancellable,
					    GAsyncReadyCallback   callback,
					    gpointer              user_data);
extern
void     g_async_initable_new_valist_async (GType                 object_type,
					    const gchar          *first_property_name,
					    va_list               var_args,
					    int                   io_priority,
					    GCancellable         *cancellable,
					    GAsyncReadyCallback   callback,
					    gpointer              user_data);
extern
GObject *g_async_initable_new_finish       (GAsyncInitable       *initable,
					    GAsyncResult         *res,
					    GError              **error);






#line 125 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncinitable.h"
#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncresult.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncresult.h"
















typedef struct _GAsyncResultIface    GAsyncResultIface;











struct _GAsyncResultIface
{
  GTypeInterface g_iface;

  

  gpointer  (* get_user_data)     (GAsyncResult *res);
  GObject * (* get_source_object) (GAsyncResult *res);

  gboolean  (* is_tagged)         (GAsyncResult *res,
				   gpointer      source_tag);
};

extern
GType    g_async_result_get_type          (void) ;

extern
gpointer g_async_result_get_user_data     (GAsyncResult *res);
extern
GObject *g_async_result_get_source_object (GAsyncResult *res);

extern
gboolean g_async_result_legacy_propagate_error (GAsyncResult  *res,
						GError       **error);
extern
gboolean g_async_result_is_tagged              (GAsyncResult  *res,
						gpointer       source_tag);



#line 86 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gasyncresult.h"
#line 37 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedinputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedinputstream.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilterinputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilterinputstream.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginputstream.h"

















typedef struct _GInputStreamClass    GInputStreamClass;
typedef struct _GInputStreamPrivate  GInputStreamPrivate;

struct _GInputStream
{
  GObject parent_instance;

  
  GInputStreamPrivate *priv;
};

struct _GInputStreamClass
{
  GObjectClass parent_class;

  

  gssize   (* read_fn)      (GInputStream        *stream,
                             void                *buffer,
                             gsize                count,
                             GCancellable        *cancellable,
                             GError             **error);
  gssize   (* skip)         (GInputStream        *stream,
                             gsize                count,
                             GCancellable        *cancellable,
                             GError             **error);
  gboolean (* close_fn)	    (GInputStream        *stream,
                             GCancellable        *cancellable,
                             GError             **error);

  
  void     (* read_async)   (GInputStream        *stream,
                             void                *buffer,
                             gsize                count,
                             int                  io_priority,
                             GCancellable        *cancellable,
                             GAsyncReadyCallback  callback,
                             gpointer             user_data);
  gssize   (* read_finish)  (GInputStream        *stream,
                             GAsyncResult        *result,
                             GError             **error);
  void     (* skip_async)   (GInputStream        *stream,
                             gsize                count,
                             int                  io_priority,
                             GCancellable        *cancellable,
                             GAsyncReadyCallback  callback,
                             gpointer             user_data);
  gssize   (* skip_finish)  (GInputStream        *stream,
                             GAsyncResult        *result,
                             GError             **error);
  void     (* close_async)  (GInputStream        *stream,
                             int                  io_priority,
                             GCancellable        *cancellable,
                             GAsyncReadyCallback  callback,
                             gpointer             user_data);
  gboolean (* close_finish) (GInputStream        *stream,
                             GAsyncResult        *result,
                             GError             **error);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType    g_input_stream_get_type      (void) ;

extern
gssize   g_input_stream_read          (GInputStream          *stream,
				       void                  *buffer,
				       gsize                  count,
				       GCancellable          *cancellable,
				       GError               **error);
extern
gboolean g_input_stream_read_all      (GInputStream          *stream,
				       void                  *buffer,
				       gsize                  count,
				       gsize                 *bytes_read,
				       GCancellable          *cancellable,
				       GError               **error);
extern
GBytes  *g_input_stream_read_bytes    (GInputStream          *stream,
				       gsize                  count,
				       GCancellable          *cancellable,
				       GError               **error);
extern
gssize   g_input_stream_skip          (GInputStream          *stream,
				       gsize                  count,
				       GCancellable          *cancellable,
				       GError               **error);
extern
gboolean g_input_stream_close         (GInputStream          *stream,
				       GCancellable          *cancellable,
				       GError               **error);
extern
void     g_input_stream_read_async    (GInputStream          *stream,
				       void                  *buffer,
				       gsize                  count,
				       int                    io_priority,
				       GCancellable          *cancellable,
				       GAsyncReadyCallback    callback,
				       gpointer               user_data);
extern
gssize   g_input_stream_read_finish   (GInputStream          *stream,
				       GAsyncResult          *result,
				       GError               **error);

extern
void     g_input_stream_read_all_async    (GInputStream          *stream,
                                           void                  *buffer,
                                           gsize                  count,
                                           int                    io_priority,
                                           GCancellable          *cancellable,
                                           GAsyncReadyCallback    callback,
                                           gpointer               user_data);
extern
gboolean g_input_stream_read_all_finish   (GInputStream          *stream,
                                           GAsyncResult          *result,
                                           gsize                 *bytes_read,
                                           GError               **error);

extern
void     g_input_stream_read_bytes_async  (GInputStream          *stream,
					   gsize                  count,
					   int                    io_priority,
					   GCancellable          *cancellable,
					   GAsyncReadyCallback    callback,
					   gpointer               user_data);
extern
GBytes  *g_input_stream_read_bytes_finish (GInputStream          *stream,
					   GAsyncResult          *result,
					   GError               **error);
extern
void     g_input_stream_skip_async    (GInputStream          *stream,
				       gsize                  count,
				       int                    io_priority,
				       GCancellable          *cancellable,
				       GAsyncReadyCallback    callback,
				       gpointer               user_data);
extern
gssize   g_input_stream_skip_finish   (GInputStream          *stream,
				       GAsyncResult          *result,
				       GError               **error);
extern
void     g_input_stream_close_async   (GInputStream          *stream,
				       int                    io_priority,
				       GCancellable          *cancellable,
				       GAsyncReadyCallback    callback,
				       gpointer               user_data);
extern
gboolean g_input_stream_close_finish  (GInputStream          *stream,
				       GAsyncResult          *result,
				       GError               **error);



extern
gboolean g_input_stream_is_closed     (GInputStream          *stream);
extern
gboolean g_input_stream_has_pending   (GInputStream          *stream);
extern
gboolean g_input_stream_set_pending   (GInputStream          *stream,
				       GError               **error);
extern
void     g_input_stream_clear_pending (GInputStream          *stream);



#line 217 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginputstream.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilterinputstream.h"















typedef struct _GFilterInputStreamClass    GFilterInputStreamClass;

struct _GFilterInputStream
{
  GInputStream parent_instance;

  
  GInputStream *base_stream;
};

struct _GFilterInputStreamClass
{
  GInputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


extern
GType          g_filter_input_stream_get_type              (void) ;
extern
GInputStream * g_filter_input_stream_get_base_stream       (GFilterInputStream *stream);
extern
gboolean       g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);
extern
void           g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream,
                                                            gboolean            close_base);



#line 79 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilterinputstream.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedinputstream.h"















typedef struct _GBufferedInputStreamClass    GBufferedInputStreamClass;
typedef struct _GBufferedInputStreamPrivate  GBufferedInputStreamPrivate;

struct _GBufferedInputStream
{
  GFilterInputStream parent_instance;

  
  GBufferedInputStreamPrivate *priv;
};

struct _GBufferedInputStreamClass
{
  GFilterInputStreamClass parent_class;

  gssize   (* fill)        (GBufferedInputStream *stream,
			    gssize                count,
			    GCancellable         *cancellable,
			    GError              **error);

  
  void     (* fill_async)  (GBufferedInputStream *stream,
			    gssize                count,
			    int                   io_priority,
			    GCancellable         *cancellable,
			    GAsyncReadyCallback   callback,
			    gpointer              user_data);
  gssize   (* fill_finish) (GBufferedInputStream *stream,
			    GAsyncResult         *result,
			    GError              **error);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


extern
GType         g_buffered_input_stream_get_type        (void) ;
extern
GInputStream* g_buffered_input_stream_new             (GInputStream          *base_stream);
extern
GInputStream* g_buffered_input_stream_new_sized       (GInputStream          *base_stream,
						       gsize                  size);

extern
gsize         g_buffered_input_stream_get_buffer_size (GBufferedInputStream  *stream);
extern
void          g_buffered_input_stream_set_buffer_size (GBufferedInputStream  *stream,
						       gsize                  size);
extern
gsize         g_buffered_input_stream_get_available   (GBufferedInputStream  *stream);
extern
gsize         g_buffered_input_stream_peek            (GBufferedInputStream  *stream,
						       void                  *buffer,
						       gsize                  offset,
						       gsize                  count);
extern
const void*   g_buffered_input_stream_peek_buffer     (GBufferedInputStream  *stream,
						       gsize                 *count);

extern
gssize        g_buffered_input_stream_fill            (GBufferedInputStream  *stream,
						       gssize                 count,
						       GCancellable          *cancellable,
						       GError               **error);
extern
void          g_buffered_input_stream_fill_async      (GBufferedInputStream  *stream,
						       gssize                 count,
						       int                    io_priority,
						       GCancellable          *cancellable,
						       GAsyncReadyCallback    callback,
						       gpointer               user_data);
extern
gssize        g_buffered_input_stream_fill_finish     (GBufferedInputStream  *stream,
						       GAsyncResult          *result,
						       GError               **error);

extern
int           g_buffered_input_stream_read_byte       (GBufferedInputStream  *stream,
						       GCancellable          *cancellable,
						       GError               **error);



#line 134 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedinputstream.h"
#line 38 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedoutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedoutputstream.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilteroutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilteroutputstream.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/goutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/goutputstream.h"





















typedef struct _GOutputStreamClass    GOutputStreamClass;
typedef struct _GOutputStreamPrivate  GOutputStreamPrivate;

struct _GOutputStream
{
  GObject parent_instance;

  
  GOutputStreamPrivate *priv;
};


struct _GOutputStreamClass
{
  GObjectClass parent_class;

  

  gssize      (* write_fn)      (GOutputStream            *stream,
                                 const void               *buffer,
                                 gsize                     count,
                                 GCancellable             *cancellable,
                                 GError                  **error);
  gssize      (* splice)        (GOutputStream            *stream,
                                 GInputStream             *source,
                                 GOutputStreamSpliceFlags  flags,
                                 GCancellable             *cancellable,
                                 GError                  **error);
  gboolean    (* flush)	        (GOutputStream            *stream,
                                 GCancellable             *cancellable,
                                 GError                  **error);
  gboolean    (* close_fn)      (GOutputStream            *stream,
                                 GCancellable             *cancellable,
                                 GError                  **error);

  

  void        (* write_async)   (GOutputStream            *stream,
                                 const void               *buffer,
                                 gsize                     count,
                                 int                       io_priority,
                                 GCancellable             *cancellable,
                                 GAsyncReadyCallback       callback,
                                 gpointer                  user_data);
  gssize      (* write_finish)  (GOutputStream            *stream,
                                 GAsyncResult             *result,
                                 GError                  **error);
  void        (* splice_async)  (GOutputStream            *stream,
                                 GInputStream             *source,
                                 GOutputStreamSpliceFlags  flags,
                                 int                       io_priority,
                                 GCancellable             *cancellable,
                                 GAsyncReadyCallback       callback,
                                 gpointer                  user_data);
  gssize      (* splice_finish) (GOutputStream            *stream,
                                 GAsyncResult             *result,
                                 GError                  **error);
  void        (* flush_async)   (GOutputStream            *stream,
                                 int                       io_priority,
                                 GCancellable             *cancellable,
                                 GAsyncReadyCallback       callback,
                                 gpointer                  user_data);
  gboolean    (* flush_finish)  (GOutputStream            *stream,
                                 GAsyncResult             *result,
                                 GError                  **error);
  void        (* close_async)   (GOutputStream            *stream,
                                 int                       io_priority,
                                 GCancellable             *cancellable,
                                 GAsyncReadyCallback       callback,
                                 gpointer                  user_data);
  gboolean    (* close_finish)  (GOutputStream            *stream,
                                 GAsyncResult             *result,
                                 GError                  **error);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
};

extern
GType    g_output_stream_get_type      (void) ;

extern
gssize   g_output_stream_write         (GOutputStream             *stream,
					const void                *buffer,
					gsize                      count,
					GCancellable              *cancellable,
					GError                   **error);
extern
gboolean g_output_stream_write_all     (GOutputStream             *stream,
					const void                *buffer,
					gsize                      count,
					gsize                     *bytes_written,
					GCancellable              *cancellable,
					GError                   **error);
extern
gboolean g_output_stream_printf        (GOutputStream             *stream,
                                        gsize                     *bytes_written,
                                        GCancellable              *cancellable,
                                        GError                   **error,
                                        const gchar               *format,
                                        ...) ;
extern
gboolean g_output_stream_vprintf       (GOutputStream             *stream,
                                        gsize                     *bytes_written,
                                        GCancellable              *cancellable,
                                        GError                   **error,
                                        const gchar               *format,
                                        va_list                    args) ;
extern
gssize   g_output_stream_write_bytes   (GOutputStream             *stream,
					GBytes                    *bytes,
					GCancellable              *cancellable,
					GError                   **error);
extern
gssize   g_output_stream_splice        (GOutputStream             *stream,
					GInputStream              *source,
					GOutputStreamSpliceFlags   flags,
					GCancellable              *cancellable,
					GError                   **error);
extern
gboolean g_output_stream_flush         (GOutputStream             *stream,
					GCancellable              *cancellable,
					GError                   **error);
extern
gboolean g_output_stream_close         (GOutputStream             *stream,
					GCancellable              *cancellable,
					GError                   **error);
extern
void     g_output_stream_write_async   (GOutputStream             *stream,
					const void                *buffer,
					gsize                      count,
					int                        io_priority,
					GCancellable              *cancellable,
					GAsyncReadyCallback        callback,
					gpointer                   user_data);
extern
gssize   g_output_stream_write_finish  (GOutputStream             *stream,
					GAsyncResult              *result,
					GError                   **error);

extern
void     g_output_stream_write_all_async (GOutputStream           *stream,
                                          const void              *buffer,
                                          gsize                    count,
                                          int                      io_priority,
                                          GCancellable            *cancellable,
                                          GAsyncReadyCallback      callback,
                                          gpointer                 user_data);

extern
gboolean g_output_stream_write_all_finish (GOutputStream          *stream,
                                           GAsyncResult           *result,
                                           gsize                  *bytes_written,
                                           GError                **error);

extern
void     g_output_stream_write_bytes_async  (GOutputStream             *stream,
					     GBytes                    *bytes,
					     int                        io_priority,
					     GCancellable              *cancellable,
					     GAsyncReadyCallback        callback,
					     gpointer                   user_data);
extern
gssize   g_output_stream_write_bytes_finish (GOutputStream             *stream,
					     GAsyncResult              *result,
					     GError                   **error);
extern
void     g_output_stream_splice_async  (GOutputStream             *stream,
					GInputStream              *source,
					GOutputStreamSpliceFlags   flags,
					int                        io_priority,
					GCancellable              *cancellable,
					GAsyncReadyCallback        callback,
					gpointer                   user_data);
extern
gssize   g_output_stream_splice_finish (GOutputStream             *stream,
					GAsyncResult              *result,
					GError                   **error);
extern
void     g_output_stream_flush_async   (GOutputStream             *stream,
					int                        io_priority,
					GCancellable              *cancellable,
					GAsyncReadyCallback        callback,
					gpointer                   user_data);
extern
gboolean g_output_stream_flush_finish  (GOutputStream             *stream,
					GAsyncResult              *result,
					GError                   **error);
extern
void     g_output_stream_close_async   (GOutputStream             *stream,
					int                        io_priority,
					GCancellable              *cancellable,
					GAsyncReadyCallback        callback,
					gpointer                   user_data);
extern
gboolean g_output_stream_close_finish  (GOutputStream             *stream,
					GAsyncResult              *result,
					GError                   **error);

extern
gboolean g_output_stream_is_closed     (GOutputStream             *stream);
extern
gboolean g_output_stream_is_closing    (GOutputStream             *stream);
extern
gboolean g_output_stream_has_pending   (GOutputStream             *stream);
extern
gboolean g_output_stream_set_pending   (GOutputStream             *stream,
					GError                   **error);
extern
void     g_output_stream_clear_pending (GOutputStream             *stream);




#line 271 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/goutputstream.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilteroutputstream.h"















typedef struct _GFilterOutputStreamClass    GFilterOutputStreamClass;

struct _GFilterOutputStream
{
  GOutputStream parent_instance;

  
  GOutputStream *base_stream;
};

struct _GFilterOutputStreamClass
{
  GOutputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};


extern
GType           g_filter_output_stream_get_type              (void) ;
extern
GOutputStream * g_filter_output_stream_get_base_stream       (GFilterOutputStream *stream);
extern
gboolean        g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);
extern
void            g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream,
                                                              gboolean             close_base);



#line 79 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilteroutputstream.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedoutputstream.h"















typedef struct _GBufferedOutputStreamClass    GBufferedOutputStreamClass;
typedef struct _GBufferedOutputStreamPrivate  GBufferedOutputStreamPrivate;

struct _GBufferedOutputStream
{
  GFilterOutputStream parent_instance;

  
  GBufferedOutputStreamPrivate *priv;
};

struct _GBufferedOutputStreamClass
{
  GFilterOutputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
};


extern
GType          g_buffered_output_stream_get_type        (void) ;
extern
GOutputStream* g_buffered_output_stream_new             (GOutputStream         *base_stream);
extern
GOutputStream* g_buffered_output_stream_new_sized       (GOutputStream         *base_stream,
							 gsize                  size);
extern
gsize          g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);
extern
void           g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream,
							 gsize                  size);
extern
gboolean       g_buffered_output_stream_get_auto_grow   (GBufferedOutputStream *stream);
extern
void           g_buffered_output_stream_set_auto_grow   (GBufferedOutputStream *stream,
							 gboolean               auto_grow);



#line 87 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbufferedoutputstream.h"
#line 39 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbytesicon.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbytesicon.h"














extern
GType   g_bytes_icon_get_type   (void) ;

extern
GIcon * g_bytes_icon_new        (GBytes     *bytes);

extern
GBytes * g_bytes_icon_get_bytes (GBytesIcon *icon);



#line 53 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gbytesicon.h"
#line 40 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcancellable.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcancellable.h"

















typedef struct _GCancellableClass   GCancellableClass;
typedef struct _GCancellablePrivate GCancellablePrivate;

struct _GCancellable
{
  GObject parent_instance;

  
  GCancellablePrivate *priv;
};

struct _GCancellableClass
{
  GObjectClass parent_class;

  void (* cancelled) (GCancellable *cancellable);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType         g_cancellable_get_type               (void) ;

extern
GCancellable *g_cancellable_new                    (void);


extern
gboolean      g_cancellable_is_cancelled           (GCancellable  *cancellable);
extern
gboolean      g_cancellable_set_error_if_cancelled (GCancellable  *cancellable,
						    GError       **error);

extern
int           g_cancellable_get_fd                 (GCancellable  *cancellable);
extern
gboolean      g_cancellable_make_pollfd            (GCancellable  *cancellable,
						    GPollFD       *pollfd);
extern
void          g_cancellable_release_fd             (GCancellable  *cancellable);

extern
GSource *     g_cancellable_source_new             (GCancellable  *cancellable);

extern
GCancellable *g_cancellable_get_current            (void);
extern
void          g_cancellable_push_current           (GCancellable  *cancellable);
extern
void          g_cancellable_pop_current            (GCancellable  *cancellable);
extern
void          g_cancellable_reset                  (GCancellable  *cancellable);
extern
gulong        g_cancellable_connect                (GCancellable  *cancellable,
						    GCallback      callback,
						    gpointer       data,
						    GDestroyNotify data_destroy_func);
extern
void          g_cancellable_disconnect             (GCancellable  *cancellable,
						    gulong         handler_id);



extern
void          g_cancellable_cancel       (GCancellable  *cancellable);



#line 119 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcancellable.h"
#line 41 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcharsetconverter.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcharsetconverter.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverter.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverter.h"

















typedef struct _GConverterIface   GConverterIface;













struct _GConverterIface
{
  GTypeInterface g_iface;

  

  GConverterResult (* convert) (GConverter *converter,
				const void *inbuf,
				gsize       inbuf_size,
				void       *outbuf,
				gsize       outbuf_size,
				GConverterFlags flags,
				gsize      *bytes_read,
				gsize      *bytes_written,
				GError    **error);
  void  (* reset)   (GConverter *converter);
};

extern
GType            g_converter_get_type     (void) ;

extern
GConverterResult g_converter_convert (GConverter       *converter,
				      const void       *inbuf,
				      gsize             inbuf_size,
				      void             *outbuf,
				      gsize             outbuf_size,
				      GConverterFlags   flags,
				      gsize            *bytes_read,
				      gsize            *bytes_written,
				      GError          **error);
extern
void             g_converter_reset   (GConverter       *converter);





#line 97 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverter.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcharsetconverter.h"










typedef struct _GCharsetConverterClass   GCharsetConverterClass;

struct _GCharsetConverterClass
{
  GObjectClass parent_class;
};

extern
GType              g_charset_converter_get_type      (void) ;

extern
GCharsetConverter *g_charset_converter_new            (const gchar  *to_charset,
						       const gchar  *from_charset,
						       GError **error);
extern
void               g_charset_converter_set_use_fallback (GCharsetConverter *converter,
							 gboolean use_fallback);
extern
gboolean           g_charset_converter_get_use_fallback (GCharsetConverter *converter);
extern
guint              g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);



#line 64 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcharsetconverter.h"
#line 42 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcontenttype.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcontenttype.h"





extern
gboolean g_content_type_equals            (const gchar  *type1,
                                           const gchar  *type2);
extern
gboolean g_content_type_is_a              (const gchar  *type,
                                           const gchar  *supertype);
extern
gboolean g_content_type_is_mime_type      (const gchar *type,
                                           const gchar *mime_type);
extern
gboolean g_content_type_is_unknown        (const gchar  *type);
extern
gchar *  g_content_type_get_description   (const gchar  *type);
extern
gchar *  g_content_type_get_mime_type     (const gchar  *type);
extern
GIcon *  g_content_type_get_icon          (const gchar  *type);
extern
GIcon *  g_content_type_get_symbolic_icon (const gchar  *type);
extern
gchar *  g_content_type_get_generic_icon_name (const gchar  *type);

extern
gboolean g_content_type_can_be_executable (const gchar  *type);

extern
gchar *  g_content_type_from_mime_type    (const gchar  *mime_type);

extern
gchar *  g_content_type_guess             (const gchar  *filename,
                                           const guchar *data,
                                           gsize         data_size,
                                           gboolean     *result_uncertain);

extern
gchar ** g_content_type_guess_for_tree    (GFile        *root);

extern
GList *  g_content_types_get_registered   (void);



#line 75 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcontenttype.h"
#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverterinputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverterinputstream.h"



















typedef struct _GConverterInputStreamClass    GConverterInputStreamClass;
typedef struct _GConverterInputStreamPrivate  GConverterInputStreamPrivate;

struct _GConverterInputStream
{
  GFilterInputStream parent_instance;

  
  GConverterInputStreamPrivate *priv;
};

struct _GConverterInputStreamClass
{
  GFilterInputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType                  g_converter_input_stream_get_type      (void) ;
extern
GInputStream          *g_converter_input_stream_new           (GInputStream          *base_stream,
                                                               GConverter            *converter);
extern
GConverter            *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);



#line 81 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverterinputstream.h"
#line 45 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverteroutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverteroutputstream.h"



















typedef struct _GConverterOutputStreamClass    GConverterOutputStreamClass;
typedef struct _GConverterOutputStreamPrivate  GConverterOutputStreamPrivate;

struct _GConverterOutputStream
{
  GFilterOutputStream parent_instance;

  
  GConverterOutputStreamPrivate *priv;
};

struct _GConverterOutputStreamClass
{
  GFilterOutputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType                   g_converter_output_stream_get_type      (void) ;
extern
GOutputStream          *g_converter_output_stream_new           (GOutputStream         *base_stream,
                                                                 GConverter            *converter);
extern
GConverter             *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);



#line 81 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gconverteroutputstream.h"
#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcredentials.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcredentials.h"


















typedef struct _GCredentialsClass   GCredentialsClass;

extern
GType            g_credentials_get_type           (void) ;

extern
GCredentials    *g_credentials_new                (void);

extern
gchar           *g_credentials_to_string          (GCredentials    *credentials);

extern
gpointer         g_credentials_get_native         (GCredentials    *credentials,
                                                   GCredentialsType native_type);

extern
void             g_credentials_set_native         (GCredentials    *credentials,
                                                   GCredentialsType native_type,
                                                   gpointer         native);

extern
gboolean         g_credentials_is_same_user       (GCredentials    *credentials,
                                                   GCredentials    *other_credentials,
                                                   GError         **error);
















#line 86 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gcredentials.h"
#line 47 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdatagrambased.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdatagrambased.h"























typedef struct _GDatagramBasedInterface GDatagramBasedInterface;



















struct _GDatagramBasedInterface
{
  GTypeInterface g_iface;

  
  gint          (*receive_messages)     (GDatagramBased       *datagram_based,
                                         GInputMessage        *messages,
                                         guint                 num_messages,
                                         gint                  flags,
                                         gint64                timeout,
                                         GCancellable         *cancellable,
                                         GError              **error);
  gint          (*send_messages)        (GDatagramBased       *datagram_based,
                                         GOutputMessage       *messages,
                                         guint                 num_messages,
                                         gint                  flags,
                                         gint64                timeout,
                                         GCancellable         *cancellable,
                                         GError              **error);

  GSource      *(*create_source)        (GDatagramBased       *datagram_based,
                                         GIOCondition          condition,
                                         GCancellable         *cancellable);
  GIOCondition  (*condition_check)      (GDatagramBased       *datagram_based,
                                         GIOCondition          condition);
  gboolean      (*condition_wait)       (GDatagramBased       *datagram_based,
                                         GIOCondition          condition,
                                         gint64                timeout,
                                         GCancellable         *cancellable,
                                         GError              **error);
};

extern
GType
g_datagram_based_get_type             (void);

extern
gint
g_datagram_based_receive_messages     (GDatagramBased       *datagram_based,
                                       GInputMessage        *messages,
                                       guint                 num_messages,
                                       gint                  flags,
                                       gint64                timeout,
                                       GCancellable         *cancellable,
                                       GError              **error);

extern
gint
g_datagram_based_send_messages        (GDatagramBased       *datagram_based,
                                       GOutputMessage       *messages,
                                       guint                 num_messages,
                                       gint                  flags,
                                       gint64                timeout,
                                       GCancellable         *cancellable,
                                       GError              **error);

extern
GSource *
g_datagram_based_create_source        (GDatagramBased       *datagram_based,
                                       GIOCondition          condition,
                                       GCancellable         *cancellable);
extern
GIOCondition
g_datagram_based_condition_check      (GDatagramBased       *datagram_based,
                                       GIOCondition          condition);
extern
gboolean
g_datagram_based_condition_wait       (GDatagramBased       *datagram_based,
                                       GIOCondition          condition,
                                       gint64                timeout,
                                       GCancellable         *cancellable,
                                       GError              **error);



#line 145 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdatagrambased.h"
#line 48 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdatainputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdatainputstream.h"


















typedef struct _GDataInputStreamClass    GDataInputStreamClass;
typedef struct _GDataInputStreamPrivate  GDataInputStreamPrivate;

struct _GDataInputStream
{
  GBufferedInputStream parent_instance;

  
  GDataInputStreamPrivate *priv;
};

struct _GDataInputStreamClass
{
  GBufferedInputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType                  g_data_input_stream_get_type             (void) ;
extern
GDataInputStream *     g_data_input_stream_new                  (GInputStream            *base_stream);

extern
void                   g_data_input_stream_set_byte_order       (GDataInputStream        *stream,
                                                                 GDataStreamByteOrder     order);
extern
GDataStreamByteOrder   g_data_input_stream_get_byte_order       (GDataInputStream        *stream);
extern
void                   g_data_input_stream_set_newline_type     (GDataInputStream        *stream,
                                                                 GDataStreamNewlineType   type);
extern
GDataStreamNewlineType g_data_input_stream_get_newline_type     (GDataInputStream        *stream);
extern
guchar                 g_data_input_stream_read_byte            (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
gint16                 g_data_input_stream_read_int16           (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
guint16                g_data_input_stream_read_uint16          (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
gint32                 g_data_input_stream_read_int32           (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
guint32                g_data_input_stream_read_uint32          (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
gint64                 g_data_input_stream_read_int64           (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
guint64                g_data_input_stream_read_uint64          (GDataInputStream        *stream,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
char *                 g_data_input_stream_read_line            (GDataInputStream        *stream,
                                                                 gsize                   *length,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
char *                 g_data_input_stream_read_line_utf8       (GDataInputStream        *stream,
								 gsize                   *length,
								 GCancellable            *cancellable,
								 GError                 **error);
extern
void                   g_data_input_stream_read_line_async      (GDataInputStream        *stream,
                                                                 gint                     io_priority,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);
extern
char *                 g_data_input_stream_read_line_finish     (GDataInputStream        *stream,
                                                                 GAsyncResult            *result,
                                                                 gsize                   *length,
                                                                 GError                 **error);
extern
char *                 g_data_input_stream_read_line_finish_utf8(GDataInputStream        *stream,
                                                                 GAsyncResult            *result,
                                                                 gsize                   *length,
                                                                 GError                 **error);
extern
char *                 g_data_input_stream_read_until           (GDataInputStream        *stream,
                                                                 const gchar             *stop_chars,
                                                                 gsize                   *length,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
void                   g_data_input_stream_read_until_async     (GDataInputStream        *stream,
                                                                 const gchar             *stop_chars,
                                                                 gint                     io_priority,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);
extern
char *                 g_data_input_stream_read_until_finish    (GDataInputStream        *stream,
                                                                 GAsyncResult            *result,
                                                                 gsize                   *length,
                                                                 GError                 **error);

extern
char *                 g_data_input_stream_read_upto            (GDataInputStream        *stream,
                                                                 const gchar             *stop_chars,
                                                                 gssize                   stop_chars_len,
                                                                 gsize                   *length,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);
extern
void                   g_data_input_stream_read_upto_async      (GDataInputStream        *stream,
                                                                 const gchar             *stop_chars,
                                                                 gssize                   stop_chars_len,
                                                                 gint                     io_priority,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);
extern
char *                 g_data_input_stream_read_upto_finish     (GDataInputStream        *stream,
                                                                 GAsyncResult            *result,
                                                                 gsize                   *length,
                                                                 GError                 **error);



#line 181 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdatainputstream.h"
#line 49 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdataoutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdataoutputstream.h"


















typedef struct _GDataOutputStream         GDataOutputStream;
typedef struct _GDataOutputStreamClass    GDataOutputStreamClass;
typedef struct _GDataOutputStreamPrivate  GDataOutputStreamPrivate;

struct _GDataOutputStream
{
  GFilterOutputStream parent_instance;

  
  GDataOutputStreamPrivate *priv;
};

struct _GDataOutputStreamClass
{
  GFilterOutputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


extern
GType                g_data_output_stream_get_type       (void) ;
extern
GDataOutputStream *  g_data_output_stream_new            (GOutputStream         *base_stream);

extern
void                 g_data_output_stream_set_byte_order (GDataOutputStream     *stream,
							  GDataStreamByteOrder   order);
extern
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream     *stream);

extern
gboolean             g_data_output_stream_put_byte       (GDataOutputStream     *stream,
							  guchar                 data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_int16      (GDataOutputStream     *stream,
							  gint16                 data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_uint16     (GDataOutputStream     *stream,
							  guint16                data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_int32      (GDataOutputStream     *stream,
							  gint32                 data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_uint32     (GDataOutputStream     *stream,
							  guint32                data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_int64      (GDataOutputStream     *stream,
							  gint64                 data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_uint64     (GDataOutputStream     *stream,
							  guint64                data,
							  GCancellable          *cancellable,
							  GError               **error);
extern
gboolean             g_data_output_stream_put_string     (GDataOutputStream     *stream,
							  const char            *str,
							  GCancellable          *cancellable,
							  GError               **error);



#line 126 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdataoutputstream.h"
#line 50 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusaddress.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusaddress.h"





extern
gchar *g_dbus_address_escape_value (const gchar *string);

extern
gboolean g_dbus_is_address (const gchar *string);
extern
gboolean g_dbus_is_supported_address (const gchar  *string,
                                      GError      **error);

extern
void                 g_dbus_address_get_stream        (const gchar          *address,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);

extern
GIOStream           *g_dbus_address_get_stream_finish (GAsyncResult         *res,
                                                       gchar               **out_guid,
                                                       GError              **error);

extern
GIOStream           *g_dbus_address_get_stream_sync   (const gchar          *address,
                                                       gchar               **out_guid,
                                                       GCancellable         *cancellable,
                                                       GError              **error);

extern
gchar               *g_dbus_address_get_for_bus_sync  (GBusType              bus_type,
                                                       GCancellable  *cancellable,
                                                       GError              **error);



#line 66 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusaddress.h"
#line 51 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusauthobserver.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusauthobserver.h"









extern
GType              g_dbus_auth_observer_get_type                     (void) ;
extern
GDBusAuthObserver *g_dbus_auth_observer_new                          (void);
extern
gboolean           g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver  *observer,
                                                                      GIOStream          *stream,
                                                                      GCredentials       *credentials);

extern
gboolean           g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver  *observer,
                                                         const gchar        *mechanism);



#line 52 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusauthobserver.h"
#line 52 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusconnection.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusconnection.h"









extern
GType            g_dbus_connection_get_type                   (void) ;



extern
void              g_bus_get                    (GBusType             bus_type,
                                                GCancellable        *cancellable,
                                                GAsyncReadyCallback  callback,
                                                gpointer             user_data);
extern
GDBusConnection  *g_bus_get_finish             (GAsyncResult        *res,
                                                GError             **error);
extern
GDBusConnection  *g_bus_get_sync               (GBusType            bus_type,
                                                GCancellable       *cancellable,
                                                GError            **error);



extern
void             g_dbus_connection_new                        (GIOStream              *stream,
                                                               const gchar            *guid,
                                                               GDBusConnectionFlags    flags,
                                                               GDBusAuthObserver      *observer,
                                                               GCancellable           *cancellable,
                                                               GAsyncReadyCallback     callback,
                                                               gpointer                user_data);
extern
GDBusConnection *g_dbus_connection_new_finish                 (GAsyncResult           *res,
                                                               GError                **error);
extern
GDBusConnection *g_dbus_connection_new_sync                   (GIOStream              *stream,
                                                               const gchar            *guid,
                                                               GDBusConnectionFlags    flags,
                                                               GDBusAuthObserver      *observer,
                                                               GCancellable           *cancellable,
                                                               GError                **error);

extern
void             g_dbus_connection_new_for_address            (const gchar            *address,
                                                               GDBusConnectionFlags    flags,
                                                               GDBusAuthObserver      *observer,
                                                               GCancellable           *cancellable,
                                                               GAsyncReadyCallback     callback,
                                                               gpointer                user_data);
extern
GDBusConnection *g_dbus_connection_new_for_address_finish     (GAsyncResult           *res,
                                                               GError                **error);
extern
GDBusConnection *g_dbus_connection_new_for_address_sync       (const gchar            *address,
                                                               GDBusConnectionFlags    flags,
                                                               GDBusAuthObserver      *observer,
                                                               GCancellable           *cancellable,
                                                               GError                **error);



extern
void             g_dbus_connection_start_message_processing   (GDBusConnection    *connection);
extern
gboolean         g_dbus_connection_is_closed                  (GDBusConnection    *connection);
extern
GIOStream       *g_dbus_connection_get_stream                 (GDBusConnection    *connection);
extern
const gchar     *g_dbus_connection_get_guid                   (GDBusConnection    *connection);
extern
const gchar     *g_dbus_connection_get_unique_name            (GDBusConnection    *connection);
extern
GCredentials    *g_dbus_connection_get_peer_credentials       (GDBusConnection    *connection);

extern
guint32          g_dbus_connection_get_last_serial            (GDBusConnection    *connection);

extern
gboolean         g_dbus_connection_get_exit_on_close          (GDBusConnection    *connection);
extern
void             g_dbus_connection_set_exit_on_close          (GDBusConnection    *connection,
                                                               gboolean            exit_on_close);
extern
GDBusCapabilityFlags  g_dbus_connection_get_capabilities      (GDBusConnection    *connection);



extern
void             g_dbus_connection_close                          (GDBusConnection     *connection,
                                                                   GCancellable        *cancellable,
                                                                   GAsyncReadyCallback  callback,
                                                                   gpointer             user_data);
extern
gboolean         g_dbus_connection_close_finish                   (GDBusConnection     *connection,
                                                                   GAsyncResult        *res,
                                                                   GError             **error);
extern
gboolean         g_dbus_connection_close_sync                     (GDBusConnection     *connection,
                                                                   GCancellable        *cancellable,
                                                                   GError             **error);



extern
void             g_dbus_connection_flush                          (GDBusConnection     *connection,
                                                                   GCancellable        *cancellable,
                                                                   GAsyncReadyCallback  callback,
                                                                   gpointer             user_data);
extern
gboolean         g_dbus_connection_flush_finish                   (GDBusConnection     *connection,
                                                                   GAsyncResult        *res,
                                                                   GError             **error);
extern
gboolean         g_dbus_connection_flush_sync                     (GDBusConnection     *connection,
                                                                   GCancellable        *cancellable,
                                                                   GError             **error);



extern
gboolean         g_dbus_connection_send_message                   (GDBusConnection     *connection,
                                                                   GDBusMessage        *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   volatile guint32    *out_serial,
                                                                   GError             **error);
extern
void             g_dbus_connection_send_message_with_reply        (GDBusConnection     *connection,
                                                                   GDBusMessage        *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint                 timeout_msec,
                                                                   volatile guint32    *out_serial,
                                                                   GCancellable        *cancellable,
                                                                   GAsyncReadyCallback  callback,
                                                                   gpointer             user_data);
extern
GDBusMessage    *g_dbus_connection_send_message_with_reply_finish (GDBusConnection     *connection,
                                                                   GAsyncResult        *res,
                                                                   GError             **error);
extern
GDBusMessage    *g_dbus_connection_send_message_with_reply_sync   (GDBusConnection     *connection,
                                                                   GDBusMessage        *message,
                                                                   GDBusSendMessageFlags flags,
                                                                   gint                 timeout_msec,
                                                                   volatile guint32    *out_serial,
                                                                   GCancellable        *cancellable,
                                                                   GError             **error);



extern
gboolean  g_dbus_connection_emit_signal                       (GDBusConnection    *connection,
                                                               const gchar        *destination_bus_name,
                                                               const gchar        *object_path,
                                                               const gchar        *interface_name,
                                                               const gchar        *signal_name,
                                                               GVariant           *parameters,
                                                               GError            **error);
extern
void      g_dbus_connection_call                              (GDBusConnection    *connection,
                                                               const gchar        *bus_name,
                                                               const gchar        *object_path,
                                                               const gchar        *interface_name,
                                                               const gchar        *method_name,
                                                               GVariant           *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags      flags,
                                                               gint                timeout_msec,
                                                               GCancellable       *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer            user_data);
extern
GVariant *g_dbus_connection_call_finish                       (GDBusConnection    *connection,
                                                               GAsyncResult       *res,
                                                               GError            **error);
extern
GVariant *g_dbus_connection_call_sync                         (GDBusConnection    *connection,
                                                               const gchar        *bus_name,
                                                               const gchar        *object_path,
                                                               const gchar        *interface_name,
                                                               const gchar        *method_name,
                                                               GVariant           *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags      flags,
                                                               gint                timeout_msec,
                                                               GCancellable       *cancellable,
                                                               GError            **error);
extern
void      g_dbus_connection_call_with_unix_fd_list            (GDBusConnection    *connection,
                                                               const gchar        *bus_name,
                                                               const gchar        *object_path,
                                                               const gchar        *interface_name,
                                                               const gchar        *method_name,
                                                               GVariant           *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags      flags,
                                                               gint                timeout_msec,
                                                               GUnixFDList        *fd_list,
                                                               GCancellable       *cancellable,
                                                               GAsyncReadyCallback callback,
                                                               gpointer            user_data);
extern
GVariant *g_dbus_connection_call_with_unix_fd_list_finish     (GDBusConnection    *connection,
                                                               GUnixFDList       **out_fd_list,
                                                               GAsyncResult       *res,
                                                               GError            **error);
extern
GVariant *g_dbus_connection_call_with_unix_fd_list_sync       (GDBusConnection    *connection,
                                                               const gchar        *bus_name,
                                                               const gchar        *object_path,
                                                               const gchar        *interface_name,
                                                               const gchar        *method_name,
                                                               GVariant           *parameters,
                                                               const GVariantType *reply_type,
                                                               GDBusCallFlags      flags,
                                                               gint                timeout_msec,
                                                               GUnixFDList        *fd_list,
                                                               GUnixFDList       **out_fd_list,
                                                               GCancellable       *cancellable,
                                                               GError            **error);



















typedef void (*GDBusInterfaceMethodCallFunc) (GDBusConnection       *connection,
                                              const gchar           *sender,
                                              const gchar           *object_path,
                                              const gchar           *interface_name,
                                              const gchar           *method_name,
                                              GVariant              *parameters,
                                              GDBusMethodInvocation *invocation,
                                              gpointer               user_data);



















typedef GVariant *(*GDBusInterfaceGetPropertyFunc) (GDBusConnection       *connection,
                                                    const gchar           *sender,
                                                    const gchar           *object_path,
                                                    const gchar           *interface_name,
                                                    const gchar           *property_name,
                                                    GError               **error,
                                                    gpointer               user_data);


















typedef gboolean  (*GDBusInterfaceSetPropertyFunc) (GDBusConnection       *connection,
                                                    const gchar           *sender,
                                                    const gchar           *object_path,
                                                    const gchar           *interface_name,
                                                    const gchar           *property_name,
                                                    GVariant              *value,
                                                    GError               **error,
                                                    gpointer               user_data);



















































struct _GDBusInterfaceVTable
{
  GDBusInterfaceMethodCallFunc  method_call;
  GDBusInterfaceGetPropertyFunc get_property;
  GDBusInterfaceSetPropertyFunc set_property;

  
  



  gpointer padding[8];
};

extern
guint            g_dbus_connection_register_object            (GDBusConnection            *connection,
                                                               const gchar                *object_path,
                                                               GDBusInterfaceInfo         *interface_info,
                                                               const GDBusInterfaceVTable *vtable,
                                                               gpointer                    user_data,
                                                               GDestroyNotify              user_data_free_func,
                                                               GError                    **error);
extern
guint            g_dbus_connection_register_object_with_closures (GDBusConnection         *connection,
                                                                  const gchar             *object_path,
                                                                  GDBusInterfaceInfo      *interface_info,
                                                                  GClosure                *method_call_closure,
                                                                  GClosure                *get_property_closure,
                                                                  GClosure                *set_property_closure,
                                                                  GError                 **error);
extern
gboolean         g_dbus_connection_unregister_object          (GDBusConnection            *connection,
                                                               guint                       registration_id);


























typedef gchar** (*GDBusSubtreeEnumerateFunc) (GDBusConnection       *connection,
                                              const gchar           *sender,
                                              const gchar           *object_path,
                                              gpointer               user_data);
































typedef GDBusInterfaceInfo ** (*GDBusSubtreeIntrospectFunc) (GDBusConnection       *connection,
                                                             const gchar           *sender,
                                                             const gchar           *object_path,
                                                             const gchar           *node,
                                                             gpointer               user_data);




















typedef const GDBusInterfaceVTable * (*GDBusSubtreeDispatchFunc) (GDBusConnection             *connection,
                                                                  const gchar                 *sender,
                                                                  const gchar                 *object_path,
                                                                  const gchar                 *interface_name,
                                                                  const gchar                 *node,
                                                                  gpointer                    *out_user_data,
                                                                  gpointer                     user_data);











struct _GDBusSubtreeVTable
{
  GDBusSubtreeEnumerateFunc  enumerate;
  GDBusSubtreeIntrospectFunc introspect;
  GDBusSubtreeDispatchFunc   dispatch;

  
  



  gpointer padding[8];
};

extern
guint            g_dbus_connection_register_subtree           (GDBusConnection            *connection,
                                                               const gchar                *object_path,
                                                               const GDBusSubtreeVTable   *vtable,
                                                               GDBusSubtreeFlags           flags,
                                                               gpointer                    user_data,
                                                               GDestroyNotify              user_data_free_func,
                                                               GError                    **error);
extern
gboolean         g_dbus_connection_unregister_subtree         (GDBusConnection            *connection,
                                                               guint                       registration_id);

















typedef void (*GDBusSignalCallback) (GDBusConnection  *connection,
                                     const gchar      *sender_name,
                                     const gchar      *object_path,
                                     const gchar      *interface_name,
                                     const gchar      *signal_name,
                                     GVariant         *parameters,
                                     gpointer          user_data);

extern
guint            g_dbus_connection_signal_subscribe           (GDBusConnection     *connection,
                                                               const gchar         *sender,
                                                               const gchar         *interface_name,
                                                               const gchar         *member,
                                                               const gchar         *object_path,
                                                               const gchar         *arg0,
                                                               GDBusSignalFlags     flags,
                                                               GDBusSignalCallback  callback,
                                                               gpointer             user_data,
                                                               GDestroyNotify       user_data_free_func);
extern
void             g_dbus_connection_signal_unsubscribe         (GDBusConnection     *connection,
                                                               guint                subscription_id);













































































typedef GDBusMessage *(*GDBusMessageFilterFunction) (GDBusConnection *connection,
                                                     GDBusMessage    *message,
                                                     gboolean         incoming,
                                                     gpointer         user_data);

extern
guint g_dbus_connection_add_filter (GDBusConnection            *connection,
                                    GDBusMessageFilterFunction  filter_function,
                                    gpointer                    user_data,
                                    GDestroyNotify              user_data_free_func);

extern
void  g_dbus_connection_remove_filter (GDBusConnection    *connection,
                                       guint               filter_id);






#line 682 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusconnection.h"
#line 53 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbuserror.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbuserror.h"





















extern
GQuark g_dbus_error_quark (void);


extern
gboolean g_dbus_error_is_remote_error       (const GError    *error);
extern
gchar   *g_dbus_error_get_remote_error      (const GError    *error);
extern
gboolean g_dbus_error_strip_remote_error    (GError          *error);










struct _GDBusErrorEntry
{
  gint         error_code;
  const gchar *dbus_error_name;
};

extern
gboolean g_dbus_error_register_error        (GQuark                 error_domain,
                                             gint                   error_code,
                                             const gchar           *dbus_error_name);
extern
gboolean g_dbus_error_unregister_error      (GQuark                 error_domain,
                                             gint                   error_code,
                                             const gchar           *dbus_error_name);
extern
void     g_dbus_error_register_error_domain (const gchar           *error_domain_quark_name,
                                             volatile gsize        *quark_volatile,
                                             const GDBusErrorEntry *entries,
                                             guint                  num_entries);


extern
GError  *g_dbus_error_new_for_dbus_error    (const gchar     *dbus_error_name,
                                             const gchar     *dbus_error_message);
extern
void     g_dbus_error_set_dbus_error        (GError         **error,
                                             const gchar     *dbus_error_name,
                                             const gchar     *dbus_error_message,
                                             const gchar     *format,
                                             ...) ;
extern
void     g_dbus_error_set_dbus_error_valist (GError         **error,
                                             const gchar     *dbus_error_name,
                                             const gchar     *dbus_error_message,
                                             const gchar     *format,
                                             va_list          var_args) ;
extern
gchar   *g_dbus_error_encode_gerror         (const GError    *error);



#line 110 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbuserror.h"
#line 54 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusintrospection.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusintrospection.h"
















struct _GDBusAnnotationInfo
{
  
  volatile gint         ref_count;
  gchar                *key;
  gchar                *value;
  GDBusAnnotationInfo **annotations;
};












struct _GDBusArgInfo
{
  
  volatile gint         ref_count;
  gchar                *name;
  gchar                *signature;
  GDBusAnnotationInfo **annotations;
};













struct _GDBusMethodInfo
{
  
  volatile gint         ref_count;
  gchar                *name;
  GDBusArgInfo        **in_args;
  GDBusArgInfo        **out_args;
  GDBusAnnotationInfo **annotations;
};












struct _GDBusSignalInfo
{
  
  volatile gint         ref_count;
  gchar                *name;
  GDBusArgInfo        **args;
  GDBusAnnotationInfo **annotations;
};













struct _GDBusPropertyInfo
{
  
  volatile gint             ref_count;
  gchar                    *name;
  gchar                    *signature;
  GDBusPropertyInfoFlags    flags;
  GDBusAnnotationInfo     **annotations;
};














struct _GDBusInterfaceInfo
{
  
  volatile gint         ref_count;
  gchar                *name;
  GDBusMethodInfo     **methods;
  GDBusSignalInfo     **signals;
  GDBusPropertyInfo   **properties;
  GDBusAnnotationInfo **annotations;
};













struct _GDBusNodeInfo
{
  
  volatile gint         ref_count;
  gchar                *path;
  GDBusInterfaceInfo  **interfaces;
  GDBusNodeInfo       **nodes;
  GDBusAnnotationInfo **annotations;
};

extern
const gchar        *g_dbus_annotation_info_lookup          (GDBusAnnotationInfo **annotations,
                                                            const gchar          *name);
extern
GDBusMethodInfo    *g_dbus_interface_info_lookup_method    (GDBusInterfaceInfo   *info,
                                                            const gchar          *name);
extern
GDBusSignalInfo    *g_dbus_interface_info_lookup_signal    (GDBusInterfaceInfo   *info,
                                                            const gchar          *name);
extern
GDBusPropertyInfo  *g_dbus_interface_info_lookup_property  (GDBusInterfaceInfo   *info,
                                                            const gchar          *name);
extern
void                g_dbus_interface_info_cache_build      (GDBusInterfaceInfo   *info);
extern
void                g_dbus_interface_info_cache_release    (GDBusInterfaceInfo   *info);

extern
void                g_dbus_interface_info_generate_xml     (GDBusInterfaceInfo   *info,
                                                            guint                 indent,
                                                            GString              *string_builder);

extern
GDBusNodeInfo      *g_dbus_node_info_new_for_xml           (const gchar          *xml_data,
                                                            GError              **error);
extern
GDBusInterfaceInfo *g_dbus_node_info_lookup_interface      (GDBusNodeInfo        *info,
                                                            const gchar          *name);
extern
void                g_dbus_node_info_generate_xml          (GDBusNodeInfo        *info,
                                                            guint                 indent,
                                                            GString              *string_builder);

extern
GDBusNodeInfo       *g_dbus_node_info_ref                  (GDBusNodeInfo        *info);
extern
GDBusInterfaceInfo  *g_dbus_interface_info_ref             (GDBusInterfaceInfo   *info);
extern
GDBusMethodInfo     *g_dbus_method_info_ref                (GDBusMethodInfo      *info);
extern
GDBusSignalInfo     *g_dbus_signal_info_ref                (GDBusSignalInfo      *info);
extern
GDBusPropertyInfo   *g_dbus_property_info_ref              (GDBusPropertyInfo    *info);
extern
GDBusArgInfo        *g_dbus_arg_info_ref                   (GDBusArgInfo         *info);
extern
GDBusAnnotationInfo *g_dbus_annotation_info_ref            (GDBusAnnotationInfo  *info);

extern
void                 g_dbus_node_info_unref                (GDBusNodeInfo        *info);
extern
void                 g_dbus_interface_info_unref           (GDBusInterfaceInfo   *info);
extern
void                 g_dbus_method_info_unref              (GDBusMethodInfo      *info);
extern
void                 g_dbus_signal_info_unref              (GDBusSignalInfo      *info);
extern
void                 g_dbus_property_info_unref            (GDBusPropertyInfo    *info);
extern
void                 g_dbus_arg_info_unref                 (GDBusArgInfo         *info);
extern
void                 g_dbus_annotation_info_unref          (GDBusAnnotationInfo  *info);
































































extern
GType g_dbus_node_info_get_type       (void) ;
extern
GType g_dbus_interface_info_get_type  (void) ;
extern
GType g_dbus_method_info_get_type     (void) ;
extern
GType g_dbus_signal_info_get_type     (void) ;
extern
GType g_dbus_property_info_get_type   (void) ;
extern
GType g_dbus_arg_info_get_type        (void) ;
extern
GType g_dbus_annotation_info_get_type (void) ;



#line 326 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusintrospection.h"
#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmessage.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmessage.h"









extern
GType                     g_dbus_message_get_type           (void) ;
extern
GDBusMessage             *g_dbus_message_new                (void);
extern
GDBusMessage             *g_dbus_message_new_signal         (const gchar              *path,
                                                             const gchar              *interface_,
                                                             const gchar              *signal);
extern
GDBusMessage             *g_dbus_message_new_method_call    (const gchar              *name,
                                                             const gchar              *path,
                                                             const gchar              *interface_,
                                                             const gchar              *method);
extern
GDBusMessage             *g_dbus_message_new_method_reply   (GDBusMessage             *method_call_message);
extern
GDBusMessage             *g_dbus_message_new_method_error   (GDBusMessage             *method_call_message,
                                                             const gchar              *error_name,
                                                             const gchar              *error_message_format,
                                                             ...) ;
extern
GDBusMessage             *g_dbus_message_new_method_error_valist (GDBusMessage             *method_call_message,
                                                                  const gchar              *error_name,
                                                                  const gchar              *error_message_format,
                                                                  va_list                   var_args);
extern
GDBusMessage             *g_dbus_message_new_method_error_literal (GDBusMessage             *method_call_message,
                                                                   const gchar              *error_name,
                                                                   const gchar              *error_message);
extern
gchar                    *g_dbus_message_print              (GDBusMessage             *message,
                                                             guint                     indent);
extern
gboolean                  g_dbus_message_get_locked         (GDBusMessage             *message);
extern
void                      g_dbus_message_lock               (GDBusMessage             *message);
extern
GDBusMessage             *g_dbus_message_copy               (GDBusMessage             *message,
                                                             GError                  **error);
extern
GDBusMessageByteOrder     g_dbus_message_get_byte_order     (GDBusMessage             *message);
extern
void                      g_dbus_message_set_byte_order     (GDBusMessage             *message,
                                                             GDBusMessageByteOrder     byte_order);

extern
GDBusMessageType          g_dbus_message_get_message_type   (GDBusMessage             *message);
extern
void                      g_dbus_message_set_message_type   (GDBusMessage             *message,
                                                             GDBusMessageType          type);
extern
GDBusMessageFlags         g_dbus_message_get_flags          (GDBusMessage             *message);
extern
void                      g_dbus_message_set_flags          (GDBusMessage             *message,
                                                             GDBusMessageFlags         flags);
extern
guint32                   g_dbus_message_get_serial         (GDBusMessage             *message);
extern
void                      g_dbus_message_set_serial         (GDBusMessage             *message,
                                                             guint32                   serial);
extern
GVariant                 *g_dbus_message_get_header         (GDBusMessage             *message,
                                                             GDBusMessageHeaderField   header_field);
extern
void                      g_dbus_message_set_header         (GDBusMessage             *message,
                                                             GDBusMessageHeaderField   header_field,
                                                             GVariant                 *value);
extern
guchar                   *g_dbus_message_get_header_fields  (GDBusMessage             *message);
extern
GVariant                 *g_dbus_message_get_body           (GDBusMessage             *message);
extern
void                      g_dbus_message_set_body           (GDBusMessage             *message,
                                                             GVariant                 *body);
extern
GUnixFDList              *g_dbus_message_get_unix_fd_list   (GDBusMessage             *message);
extern
void                      g_dbus_message_set_unix_fd_list   (GDBusMessage             *message,
                                                             GUnixFDList              *fd_list);

extern
guint32                   g_dbus_message_get_reply_serial   (GDBusMessage             *message);
extern
void                      g_dbus_message_set_reply_serial   (GDBusMessage             *message,
                                                             guint32                   value);

extern
const gchar              *g_dbus_message_get_interface      (GDBusMessage             *message);
extern
void                      g_dbus_message_set_interface      (GDBusMessage             *message,
                                                             const gchar              *value);

extern
const gchar              *g_dbus_message_get_member         (GDBusMessage             *message);
extern
void                      g_dbus_message_set_member         (GDBusMessage             *message,
                                                             const gchar              *value);

extern
const gchar              *g_dbus_message_get_path           (GDBusMessage             *message);
extern
void                      g_dbus_message_set_path           (GDBusMessage             *message,
                                                             const gchar              *value);

extern
const gchar              *g_dbus_message_get_sender         (GDBusMessage             *message);
extern
void                      g_dbus_message_set_sender         (GDBusMessage             *message,
                                                             const gchar              *value);

extern
const gchar              *g_dbus_message_get_destination    (GDBusMessage             *message);
extern
void                      g_dbus_message_set_destination    (GDBusMessage             *message,
                                                             const gchar              *value);

extern
const gchar              *g_dbus_message_get_error_name     (GDBusMessage             *message);
extern
void                      g_dbus_message_set_error_name     (GDBusMessage             *message,
                                                             const gchar              *value);

extern
const gchar              *g_dbus_message_get_signature      (GDBusMessage             *message);
extern
void                      g_dbus_message_set_signature      (GDBusMessage             *message,
                                                             const gchar              *value);

extern
guint32                   g_dbus_message_get_num_unix_fds   (GDBusMessage             *message);
extern
void                      g_dbus_message_set_num_unix_fds   (GDBusMessage             *message,
                                                             guint32                   value);

extern
const gchar              *g_dbus_message_get_arg0           (GDBusMessage             *message);


extern
GDBusMessage             *g_dbus_message_new_from_blob      (guchar                   *blob,
                                                             gsize                     blob_len,
                                                             GDBusCapabilityFlags      capabilities,
                                                             GError                  **error);

extern
gssize                    g_dbus_message_bytes_needed       (guchar                   *blob,
                                                             gsize                     blob_len,
                                                             GError                  **error);

extern
guchar                   *g_dbus_message_to_blob            (GDBusMessage             *message,
                                                             gsize                    *out_size,
                                                             GDBusCapabilityFlags      capabilities,
                                                             GError                  **error);

extern
gboolean                  g_dbus_message_to_gerror          (GDBusMessage             *message,
                                                             GError                  **error);



#line 198 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmessage.h"
#line 56 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmethodinvocation.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmethodinvocation.h"









extern
GType                  g_dbus_method_invocation_get_type             (void) ;
extern
const gchar           *g_dbus_method_invocation_get_sender           (GDBusMethodInvocation *invocation);
extern
const gchar           *g_dbus_method_invocation_get_object_path      (GDBusMethodInvocation *invocation);
extern
const gchar           *g_dbus_method_invocation_get_interface_name   (GDBusMethodInvocation *invocation);
extern
const gchar           *g_dbus_method_invocation_get_method_name      (GDBusMethodInvocation *invocation);
extern
const GDBusMethodInfo *g_dbus_method_invocation_get_method_info      (GDBusMethodInvocation *invocation);
extern
const GDBusPropertyInfo *g_dbus_method_invocation_get_property_info  (GDBusMethodInvocation *invocation);
extern
GDBusConnection       *g_dbus_method_invocation_get_connection       (GDBusMethodInvocation *invocation);
extern
GDBusMessage          *g_dbus_method_invocation_get_message          (GDBusMethodInvocation *invocation);
extern
GVariant              *g_dbus_method_invocation_get_parameters       (GDBusMethodInvocation *invocation);
extern
gpointer               g_dbus_method_invocation_get_user_data        (GDBusMethodInvocation *invocation);

extern
void                   g_dbus_method_invocation_return_value         (GDBusMethodInvocation *invocation,
                                                                      GVariant              *parameters);
extern
void                   g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation,
                                                                                GVariant              *parameters,
                                                                                GUnixFDList           *fd_list);
extern
void                   g_dbus_method_invocation_return_error         (GDBusMethodInvocation *invocation,
                                                                      GQuark                 domain,
                                                                      gint                   code,
                                                                      const gchar           *format,
                                                                      ...) ;
extern
void                   g_dbus_method_invocation_return_error_valist  (GDBusMethodInvocation *invocation,
                                                                      GQuark                 domain,
                                                                      gint                   code,
                                                                      const gchar           *format,
                                                                      va_list                var_args)
                                                                      ;
extern
void                   g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation,
                                                                      GQuark                 domain,
                                                                      gint                   code,
                                                                      const gchar           *message);
extern
void                   g_dbus_method_invocation_return_gerror        (GDBusMethodInvocation *invocation,
                                                                      const GError          *error);
extern
void                   g_dbus_method_invocation_take_error           (GDBusMethodInvocation *invocation,
                                                                      GError                *error);
extern
void                   g_dbus_method_invocation_return_dbus_error    (GDBusMethodInvocation *invocation,
                                                                      const gchar           *error_name,
                                                                      const gchar           *error_message);



#line 98 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmethodinvocation.h"
#line 57 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusnameowning.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusnameowning.h"















typedef void (*GBusAcquiredCallback) (GDBusConnection *connection,
                                      const gchar     *name,
                                      gpointer         user_data);











typedef void (*GBusNameAcquiredCallback) (GDBusConnection *connection,
                                          const gchar     *name,
                                          gpointer         user_data);












typedef void (*GBusNameLostCallback) (GDBusConnection *connection,
                                      const gchar     *name,
                                      gpointer         user_data);

extern
guint g_bus_own_name                 (GBusType                  bus_type,
                                      const gchar              *name,
                                      GBusNameOwnerFlags        flags,
                                      GBusAcquiredCallback      bus_acquired_handler,
                                      GBusNameAcquiredCallback  name_acquired_handler,
                                      GBusNameLostCallback      name_lost_handler,
                                      gpointer                  user_data,
                                      GDestroyNotify            user_data_free_func);

extern
guint g_bus_own_name_on_connection   (GDBusConnection          *connection,
                                      const gchar              *name,
                                      GBusNameOwnerFlags        flags,
                                      GBusNameAcquiredCallback  name_acquired_handler,
                                      GBusNameLostCallback      name_lost_handler,
                                      gpointer                  user_data,
                                      GDestroyNotify            user_data_free_func);

extern
guint g_bus_own_name_with_closures   (GBusType                  bus_type,
                                      const gchar              *name,
                                      GBusNameOwnerFlags        flags,
                                      GClosure                 *bus_acquired_closure,
                                      GClosure                 *name_acquired_closure,
                                      GClosure                 *name_lost_closure);

extern
guint g_bus_own_name_on_connection_with_closures (
                                      GDBusConnection          *connection,
                                      const gchar              *name,
                                      GBusNameOwnerFlags        flags,
                                      GClosure                 *name_acquired_closure,
                                      GClosure                 *name_lost_closure);

extern
void  g_bus_unown_name               (guint                     owner_id);



#line 116 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusnameowning.h"
#line 58 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusnamewatching.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusnamewatching.h"
















typedef void (*GBusNameAppearedCallback) (GDBusConnection *connection,
                                          const gchar     *name,
                                          const gchar     *name_owner,
                                          gpointer         user_data);
















typedef void (*GBusNameVanishedCallback) (GDBusConnection *connection,
                                          const gchar     *name,
                                          gpointer         user_data);


extern
guint g_bus_watch_name               (GBusType                  bus_type,
                                      const gchar              *name,
                                      GBusNameWatcherFlags      flags,
                                      GBusNameAppearedCallback  name_appeared_handler,
                                      GBusNameVanishedCallback  name_vanished_handler,
                                      gpointer                  user_data,
                                      GDestroyNotify            user_data_free_func);
extern
guint g_bus_watch_name_on_connection (GDBusConnection          *connection,
                                      const gchar              *name,
                                      GBusNameWatcherFlags      flags,
                                      GBusNameAppearedCallback  name_appeared_handler,
                                      GBusNameVanishedCallback  name_vanished_handler,
                                      gpointer                  user_data,
                                      GDestroyNotify            user_data_free_func);
extern
guint g_bus_watch_name_with_closures (GBusType                  bus_type,
                                      const gchar              *name,
                                      GBusNameWatcherFlags      flags,
                                      GClosure                 *name_appeared_closure,
                                      GClosure                 *name_vanished_closure);
extern
guint g_bus_watch_name_on_connection_with_closures (
                                      GDBusConnection          *connection,
                                      const gchar              *name,
                                      GBusNameWatcherFlags      flags,
                                      GClosure                 *name_appeared_closure,
                                      GClosure                 *name_vanished_closure);
extern
void  g_bus_unwatch_name             (guint                     watcher_id);



#line 103 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusnamewatching.h"
#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusproxy.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusproxy.h"













typedef struct _GDBusProxyClass   GDBusProxyClass;
typedef struct _GDBusProxyPrivate GDBusProxyPrivate;









struct _GDBusProxy
{
  
  GObject parent_instance;
  GDBusProxyPrivate *priv;
};










struct _GDBusProxyClass
{
  
  GObjectClass parent_class;

  
  
  void (*g_properties_changed) (GDBusProxy          *proxy,
                                GVariant            *changed_properties,
                                const gchar* const  *invalidated_properties);
  void (*g_signal)             (GDBusProxy          *proxy,
                                const gchar         *sender_name,
                                const gchar         *signal_name,
                                GVariant            *parameters);

  
  
  gpointer padding[32];
};

extern
GType            g_dbus_proxy_get_type                  (void) ;
extern
void             g_dbus_proxy_new                       (GDBusConnection     *connection,
                                                         GDBusProxyFlags      flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar         *name,
                                                         const gchar         *object_path,
                                                         const gchar         *interface_name,
                                                         GCancellable        *cancellable,
                                                         GAsyncReadyCallback  callback,
                                                         gpointer             user_data);
extern
GDBusProxy      *g_dbus_proxy_new_finish                (GAsyncResult        *res,
                                                         GError             **error);
extern
GDBusProxy      *g_dbus_proxy_new_sync                  (GDBusConnection     *connection,
                                                         GDBusProxyFlags      flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar         *name,
                                                         const gchar         *object_path,
                                                         const gchar         *interface_name,
                                                         GCancellable        *cancellable,
                                                         GError             **error);
extern
void             g_dbus_proxy_new_for_bus               (GBusType             bus_type,
                                                         GDBusProxyFlags      flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar         *name,
                                                         const gchar         *object_path,
                                                         const gchar         *interface_name,
                                                         GCancellable        *cancellable,
                                                         GAsyncReadyCallback  callback,
                                                         gpointer             user_data);
extern
GDBusProxy      *g_dbus_proxy_new_for_bus_finish        (GAsyncResult        *res,
                                                         GError             **error);
extern
GDBusProxy      *g_dbus_proxy_new_for_bus_sync          (GBusType             bus_type,
                                                         GDBusProxyFlags      flags,
                                                         GDBusInterfaceInfo *info,
                                                         const gchar         *name,
                                                         const gchar         *object_path,
                                                         const gchar         *interface_name,
                                                         GCancellable        *cancellable,
                                                         GError             **error);
extern
GDBusConnection *g_dbus_proxy_get_connection            (GDBusProxy          *proxy);
extern
GDBusProxyFlags  g_dbus_proxy_get_flags                 (GDBusProxy          *proxy);
extern
const gchar     *g_dbus_proxy_get_name                  (GDBusProxy          *proxy);
extern
gchar           *g_dbus_proxy_get_name_owner            (GDBusProxy          *proxy);
extern
const gchar     *g_dbus_proxy_get_object_path           (GDBusProxy          *proxy);
extern
const gchar     *g_dbus_proxy_get_interface_name        (GDBusProxy          *proxy);
extern
gint             g_dbus_proxy_get_default_timeout       (GDBusProxy          *proxy);
extern
void             g_dbus_proxy_set_default_timeout       (GDBusProxy          *proxy,
                                                         gint                 timeout_msec);
extern
GDBusInterfaceInfo *g_dbus_proxy_get_interface_info     (GDBusProxy          *proxy);
extern
void             g_dbus_proxy_set_interface_info        (GDBusProxy           *proxy,
                                                         GDBusInterfaceInfo   *info);
extern
GVariant        *g_dbus_proxy_get_cached_property       (GDBusProxy          *proxy,
                                                         const gchar         *property_name);
extern
void             g_dbus_proxy_set_cached_property       (GDBusProxy          *proxy,
                                                         const gchar         *property_name,
                                                         GVariant            *value);
extern
gchar          **g_dbus_proxy_get_cached_property_names (GDBusProxy          *proxy);
extern
void             g_dbus_proxy_call                      (GDBusProxy          *proxy,
                                                         const gchar         *method_name,
                                                         GVariant            *parameters,
                                                         GDBusCallFlags       flags,
                                                         gint                 timeout_msec,
                                                         GCancellable        *cancellable,
                                                         GAsyncReadyCallback  callback,
                                                         gpointer             user_data);
extern
GVariant        *g_dbus_proxy_call_finish               (GDBusProxy          *proxy,
                                                         GAsyncResult        *res,
                                                         GError             **error);
extern
GVariant        *g_dbus_proxy_call_sync                 (GDBusProxy          *proxy,
                                                         const gchar         *method_name,
                                                         GVariant            *parameters,
                                                         GDBusCallFlags       flags,
                                                         gint                 timeout_msec,
                                                         GCancellable        *cancellable,
                                                         GError             **error);

extern
void             g_dbus_proxy_call_with_unix_fd_list        (GDBusProxy          *proxy,
                                                             const gchar         *method_name,
                                                             GVariant            *parameters,
                                                             GDBusCallFlags       flags,
                                                             gint                 timeout_msec,
                                                             GUnixFDList         *fd_list,
                                                             GCancellable        *cancellable,
                                                             GAsyncReadyCallback  callback,
                                                             gpointer             user_data);
extern
GVariant        *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy          *proxy,
                                                             GUnixFDList        **out_fd_list,
                                                             GAsyncResult        *res,
                                                             GError             **error);
extern
GVariant        *g_dbus_proxy_call_with_unix_fd_list_sync   (GDBusProxy          *proxy,
                                                             const gchar         *method_name,
                                                             GVariant            *parameters,
                                                             GDBusCallFlags       flags,
                                                             gint                 timeout_msec,
                                                             GUnixFDList         *fd_list,
                                                             GUnixFDList        **out_fd_list,
                                                             GCancellable        *cancellable,
                                                             GError             **error);



#line 215 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusproxy.h"
#line 60 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusserver.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusserver.h"









extern
GType             g_dbus_server_get_type           (void) ;
extern
GDBusServer      *g_dbus_server_new_sync           (const gchar       *address,
                                                    GDBusServerFlags   flags,
                                                    const gchar       *guid,
                                                    GDBusAuthObserver *observer,
                                                    GCancellable      *cancellable,
                                                    GError           **error);
extern
const gchar      *g_dbus_server_get_client_address (GDBusServer       *server);
extern
const gchar      *g_dbus_server_get_guid           (GDBusServer       *server);
extern
GDBusServerFlags  g_dbus_server_get_flags          (GDBusServer       *server);
extern
void              g_dbus_server_start              (GDBusServer       *server);
extern
void              g_dbus_server_stop               (GDBusServer       *server);
extern
gboolean          g_dbus_server_is_active          (GDBusServer       *server);



#line 61 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusserver.h"
#line 61 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusutils.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusutils.h"





extern
gboolean g_dbus_is_guid (const gchar *string);
extern
gchar *g_dbus_generate_guid (void);

extern
gboolean g_dbus_is_name (const gchar *string);
extern
gboolean g_dbus_is_unique_name (const gchar *string);
extern
gboolean g_dbus_is_member_name (const gchar *string);
extern
gboolean g_dbus_is_interface_name (const gchar *string);

extern
void g_dbus_gvariant_to_gvalue (GVariant  *value,
                                GValue    *out_gvalue);
extern
GVariant *g_dbus_gvalue_to_gvariant (const GValue         *gvalue,
                                     const GVariantType   *type);



#line 56 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusutils.h"
#line 62 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdrive.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdrive.h"


















































typedef struct _GDriveIface    GDriveIface;

struct _GDriveIface
{
  GTypeInterface g_iface;

  
  void     (* changed)                  (GDrive              *drive);
  void     (* disconnected)             (GDrive              *drive);
  void     (* eject_button)             (GDrive              *drive);

  
  char *   (* get_name)                 (GDrive              *drive);
  GIcon *  (* get_icon)                 (GDrive              *drive);
  gboolean (* has_volumes)              (GDrive              *drive);
  GList *  (* get_volumes)              (GDrive              *drive);
  gboolean (* is_media_removable)       (GDrive              *drive);
  gboolean (* has_media)                (GDrive              *drive);
  gboolean (* is_media_check_automatic) (GDrive              *drive);
  gboolean (* can_eject)                (GDrive              *drive);
  gboolean (* can_poll_for_media)       (GDrive              *drive);
  void     (* eject)                    (GDrive              *drive,
                                         GMountUnmountFlags   flags,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* eject_finish)             (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);
  void     (* poll_for_media)           (GDrive              *drive,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* poll_for_media_finish)    (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);

  char *   (* get_identifier)           (GDrive              *drive,
                                         const char          *kind);
  char **  (* enumerate_identifiers)    (GDrive              *drive);

  GDriveStartStopType (* get_start_stop_type) (GDrive        *drive);

  gboolean (* can_start)                (GDrive              *drive);
  gboolean (* can_start_degraded)       (GDrive              *drive);
  void     (* start)                    (GDrive              *drive,
                                         GDriveStartFlags     flags,
                                         GMountOperation     *mount_operation,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* start_finish)             (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);

  gboolean (* can_stop)                 (GDrive              *drive);
  void     (* stop)                     (GDrive              *drive,
                                         GMountUnmountFlags   flags,
                                         GMountOperation     *mount_operation,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean (* stop_finish)              (GDrive              *drive,
                                         GAsyncResult        *result,
                                         GError             **error);
  
  void     (* stop_button)              (GDrive              *drive);

  void        (* eject_with_operation)      (GDrive              *drive,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_with_operation_finish) (GDrive            *drive,
                                             GAsyncResult        *result,
                                             GError             **error);

  const gchar * (* get_sort_key)        (GDrive              *drive);
  GIcon *       (* get_symbolic_icon)   (GDrive              *drive);
  gboolean      (* is_removable)        (GDrive              *drive);

};

extern
GType    g_drive_get_type                 (void) ;

extern
char *   g_drive_get_name                 (GDrive               *drive);
extern
GIcon *  g_drive_get_icon                 (GDrive               *drive);
extern
GIcon *  g_drive_get_symbolic_icon        (GDrive               *drive);
extern
gboolean g_drive_has_volumes              (GDrive               *drive);
extern
GList *  g_drive_get_volumes              (GDrive               *drive);
extern
gboolean g_drive_is_removable             (GDrive               *drive);
extern
gboolean g_drive_is_media_removable       (GDrive               *drive);
extern
gboolean g_drive_has_media                (GDrive               *drive);
extern
gboolean g_drive_is_media_check_automatic (GDrive               *drive);
extern
gboolean g_drive_can_poll_for_media       (GDrive               *drive);
extern
gboolean g_drive_can_eject                (GDrive               *drive);
__declspec(deprecated("is deprecated. Use '" "g_drive_eject_with_operation" "' instead")) extern
void     g_drive_eject                    (GDrive               *drive,
                                           GMountUnmountFlags    flags,
                                           GCancellable         *cancellable,
                                           GAsyncReadyCallback   callback,
                                           gpointer              user_data);

__declspec(deprecated("is deprecated. Use '" "g_drive_eject_with_operation_finish" "' instead")) extern
gboolean g_drive_eject_finish             (GDrive               *drive,
                                           GAsyncResult         *result,
                                           GError              **error);
extern
void     g_drive_poll_for_media           (GDrive               *drive,
                                           GCancellable         *cancellable,
                                           GAsyncReadyCallback   callback,
                                           gpointer              user_data);
extern
gboolean g_drive_poll_for_media_finish    (GDrive               *drive,
                                           GAsyncResult         *result,
                                           GError              **error);
extern
char *   g_drive_get_identifier           (GDrive              *drive,
                                           const char          *kind);
extern
char **  g_drive_enumerate_identifiers    (GDrive              *drive);

extern
GDriveStartStopType g_drive_get_start_stop_type (GDrive        *drive);

extern
gboolean g_drive_can_start                (GDrive              *drive);
extern
gboolean g_drive_can_start_degraded       (GDrive              *drive);
extern
void     g_drive_start                    (GDrive              *drive,
                                           GDriveStartFlags     flags,
                                           GMountOperation     *mount_operation,
                                           GCancellable        *cancellable,
                                           GAsyncReadyCallback  callback,
                                           gpointer             user_data);
extern
gboolean g_drive_start_finish             (GDrive               *drive,
                                           GAsyncResult         *result,
                                           GError              **error);

extern
gboolean g_drive_can_stop                 (GDrive               *drive);
extern
void     g_drive_stop                     (GDrive               *drive,
                                           GMountUnmountFlags    flags,
                                           GMountOperation      *mount_operation,
                                           GCancellable         *cancellable,
                                           GAsyncReadyCallback   callback,
                                           gpointer              user_data);
extern
gboolean g_drive_stop_finish              (GDrive               *drive,
                                           GAsyncResult         *result,
                                           GError              **error);

extern
void        g_drive_eject_with_operation      (GDrive              *drive,
                                               GMountUnmountFlags   flags,
                                               GMountOperation     *mount_operation,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);
extern
gboolean    g_drive_eject_with_operation_finish (GDrive            *drive,
                                               GAsyncResult        *result,
                                               GError             **error);

extern
const gchar *g_drive_get_sort_key         (GDrive               *drive);



#line 264 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdrive.h"
#line 63 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsclientconnection.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsclientconnection.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsconnection.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsconnection.h"










typedef struct _GDtlsConnectionInterface GDtlsConnectionInterface;
















struct _GDtlsConnectionInterface
{
  GTypeInterface g_iface;

  
  gboolean (*accept_certificate) (GDtlsConnection       *connection,
                                  GTlsCertificate       *peer_cert,
                                  GTlsCertificateFlags   errors);

  
  gboolean (*handshake)          (GDtlsConnection       *conn,
                                  GCancellable          *cancellable,
                                  GError               **error);

  void     (*handshake_async)    (GDtlsConnection       *conn,
                                  int                    io_priority,
                                  GCancellable          *cancellable,
                                  GAsyncReadyCallback    callback,
                                  gpointer               user_data);
  gboolean (*handshake_finish)   (GDtlsConnection       *conn,
                                  GAsyncResult          *result,
                                  GError               **error);

  gboolean (*shutdown)           (GDtlsConnection       *conn,
                                  gboolean               shutdown_read,
                                  gboolean               shutdown_write,
                                  GCancellable          *cancellable,
                                  GError               **error);

  void     (*shutdown_async)     (GDtlsConnection       *conn,
                                  gboolean               shutdown_read,
                                  gboolean               shutdown_write,
                                  int                    io_priority,
                                  GCancellable          *cancellable,
                                  GAsyncReadyCallback    callback,
                                  gpointer               user_data);
  gboolean (*shutdown_finish)    (GDtlsConnection       *conn,
                                  GAsyncResult          *result,
                                  GError               **error);
};

extern
GType                 g_dtls_connection_get_type                    (void) ;

extern
void                  g_dtls_connection_set_database                (GDtlsConnection       *conn,
                                                                     GTlsDatabase          *database);
extern
GTlsDatabase         *g_dtls_connection_get_database                (GDtlsConnection       *conn);

extern
void                  g_dtls_connection_set_certificate             (GDtlsConnection       *conn,
                                                                     GTlsCertificate       *certificate);
extern
GTlsCertificate      *g_dtls_connection_get_certificate             (GDtlsConnection       *conn);

extern
void                  g_dtls_connection_set_interaction             (GDtlsConnection       *conn,
                                                                     GTlsInteraction       *interaction);
extern
GTlsInteraction      *g_dtls_connection_get_interaction             (GDtlsConnection       *conn);

extern
GTlsCertificate      *g_dtls_connection_get_peer_certificate        (GDtlsConnection       *conn);
extern
GTlsCertificateFlags  g_dtls_connection_get_peer_certificate_errors (GDtlsConnection       *conn);

extern
void                  g_dtls_connection_set_require_close_notify    (GDtlsConnection       *conn,
                                                                     gboolean               require_close_notify);
extern
gboolean              g_dtls_connection_get_require_close_notify    (GDtlsConnection       *conn);

extern
void                  g_dtls_connection_set_rehandshake_mode        (GDtlsConnection       *conn,
                                                                     GTlsRehandshakeMode    mode);
extern
GTlsRehandshakeMode   g_dtls_connection_get_rehandshake_mode        (GDtlsConnection       *conn);

extern
gboolean              g_dtls_connection_handshake                   (GDtlsConnection       *conn,
                                                                     GCancellable          *cancellable,
                                                                     GError               **error);

extern
void                  g_dtls_connection_handshake_async             (GDtlsConnection       *conn,
                                                                     int                    io_priority,
                                                                     GCancellable          *cancellable,
                                                                     GAsyncReadyCallback    callback,
                                                                     gpointer               user_data);
extern
gboolean              g_dtls_connection_handshake_finish            (GDtlsConnection       *conn,
                                                                     GAsyncResult          *result,
                                                                     GError               **error);

extern
gboolean              g_dtls_connection_shutdown                    (GDtlsConnection       *conn,
                                                                     gboolean               shutdown_read,
                                                                     gboolean               shutdown_write,
                                                                     GCancellable          *cancellable,
                                                                     GError               **error);

extern
void                  g_dtls_connection_shutdown_async              (GDtlsConnection       *conn,
                                                                     gboolean               shutdown_read,
                                                                     gboolean               shutdown_write,
                                                                     int                    io_priority,
                                                                     GCancellable          *cancellable,
                                                                     GAsyncReadyCallback    callback,
                                                                     gpointer               user_data);
extern
gboolean              g_dtls_connection_shutdown_finish             (GDtlsConnection       *conn,
                                                                     GAsyncResult          *result,
                                                                     GError               **error);

extern
gboolean              g_dtls_connection_close                       (GDtlsConnection       *conn,
                                                                     GCancellable          *cancellable,
                                                                     GError               **error);

extern
void                  g_dtls_connection_close_async                 (GDtlsConnection       *conn,
                                                                     int                    io_priority,
                                                                     GCancellable          *cancellable,
                                                                     GAsyncReadyCallback    callback,
                                                                     gpointer               user_data);
extern
gboolean              g_dtls_connection_close_finish                (GDtlsConnection       *conn,
                                                                     GAsyncResult          *result,
                                                                     GError               **error);


extern
gboolean              g_dtls_connection_emit_accept_certificate     (GDtlsConnection       *conn,
                                                                     GTlsCertificate       *peer_cert,
                                                                     GTlsCertificateFlags   errors);


#line 192 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsconnection.h"
#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsclientconnection.h"








typedef struct _GDtlsClientConnectionInterface GDtlsClientConnectionInterface;









struct _GDtlsClientConnectionInterface
{
  GTypeInterface g_iface;
};

extern
GType                g_dtls_client_connection_get_type             (void) ;

extern
GDatagramBased      *g_dtls_client_connection_new                  (GDatagramBased         *base_socket,
                                                                    GSocketConnectable     *server_identity,
                                                                    GError                **error);

extern
GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection  *conn);
extern
void                 g_dtls_client_connection_set_validation_flags (GDtlsClientConnection  *conn,
                                                                    GTlsCertificateFlags    flags);
extern
GSocketConnectable  *g_dtls_client_connection_get_server_identity  (GDtlsClientConnection  *conn);
extern
void                 g_dtls_client_connection_set_server_identity  (GDtlsClientConnection  *conn,
                                                                    GSocketConnectable     *identity);
extern
GList *              g_dtls_client_connection_get_accepted_cas     (GDtlsClientConnection  *conn);




#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsclientconnection.h"
#line 64 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsserverconnection.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsserverconnection.h"


















typedef struct _GDtlsServerConnectionInterface GDtlsServerConnectionInterface;









struct _GDtlsServerConnectionInterface
{
  GTypeInterface g_iface;
};

extern
GType           g_dtls_server_connection_get_type (void) ;

extern
GDatagramBased *g_dtls_server_connection_new      (GDatagramBased   *base_socket,
                                                   GTlsCertificate  *certificate,
                                                   GError          **error);



#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdtlsserverconnection.h"
#line 66 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblemedicon.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblemedicon.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gicon.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gicon.h"















typedef struct _GIconIface GIconIface;


















struct _GIconIface
{
  GTypeInterface g_iface;

  

  guint       (* hash)        (GIcon   *icon);
  gboolean    (* equal)       (GIcon   *icon1,
                               GIcon   *icon2);
  gboolean    (* to_tokens)   (GIcon   *icon,
			       GPtrArray *tokens,
                               gint    *out_version);
  GIcon *     (* from_tokens) (gchar  **tokens,
                               gint     num_tokens,
                               gint     version,
                               GError **error);

  GVariant *  (* serialize)   (GIcon   *icon);
};

extern
GType    g_icon_get_type  (void) ;

extern
guint    g_icon_hash            (gconstpointer  icon);
extern
gboolean g_icon_equal           (GIcon         *icon1,
                                 GIcon         *icon2);
extern
gchar   *g_icon_to_string       (GIcon         *icon);
extern
GIcon   *g_icon_new_for_string  (const gchar   *str,
                                 GError       **error);

extern
GVariant * g_icon_serialize     (GIcon         *icon);
extern
GIcon *    g_icon_deserialize   (GVariant      *value);



#line 103 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gicon.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblemedicon.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblem.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblem.h"

















typedef struct _GEmblem        GEmblem;
typedef struct _GEmblemClass   GEmblemClass;

extern
GType          g_emblem_get_type        (void) ;

extern
GEmblem       *g_emblem_new             (GIcon         *icon);
extern
GEmblem       *g_emblem_new_with_origin (GIcon         *icon,
                                         GEmblemOrigin  origin);
extern
GIcon         *g_emblem_get_icon        (GEmblem       *emblem);
extern
GEmblemOrigin  g_emblem_get_origin      (GEmblem       *emblem);



#line 62 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblem.h"
#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblemedicon.h"















typedef struct _GEmblemedIcon        GEmblemedIcon;
typedef struct _GEmblemedIconClass   GEmblemedIconClass;
typedef struct _GEmblemedIconPrivate GEmblemedIconPrivate;

struct _GEmblemedIcon
{
  GObject parent_instance;

  
  GEmblemedIconPrivate *priv;
};

struct _GEmblemedIconClass
{
  GObjectClass parent_class;
};

extern
GType  g_emblemed_icon_get_type    (void) ;

extern
GIcon *g_emblemed_icon_new         (GIcon         *icon,
                                    GEmblem       *emblem);
extern
GIcon *g_emblemed_icon_get_icon    (GEmblemedIcon *emblemed);
extern
GList *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);
extern
void   g_emblemed_icon_add_emblem  (GEmblemedIcon *emblemed,
                                    GEmblem       *emblem);
extern
void   g_emblemed_icon_clear_emblems  (GEmblemedIcon *emblemed);



#line 82 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gemblemedicon.h"
#line 67 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileattribute.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileattribute.h"













struct _GFileAttributeInfo
{
  char                    *name;
  GFileAttributeType       type;
  GFileAttributeInfoFlags  flags;
};









struct _GFileAttributeInfoList
{
  GFileAttributeInfo *infos;
  int                 n_infos;
};


extern
GType g_file_attribute_info_list_get_type (void);

extern
GFileAttributeInfoList *  g_file_attribute_info_list_new    (void);
extern
GFileAttributeInfoList *  g_file_attribute_info_list_ref    (GFileAttributeInfoList *list);
extern
void                      g_file_attribute_info_list_unref  (GFileAttributeInfoList *list);
extern
GFileAttributeInfoList *  g_file_attribute_info_list_dup    (GFileAttributeInfoList *list);
extern
const GFileAttributeInfo *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list,
							     const char             *name);
extern
void                      g_file_attribute_info_list_add    (GFileAttributeInfoList *list,
							     const char             *name,
							     GFileAttributeType      type,
							     GFileAttributeInfoFlags flags);



#line 85 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileattribute.h"
#line 68 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileenumerator.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileenumerator.h"

















typedef struct _GFileEnumeratorClass    GFileEnumeratorClass;
typedef struct _GFileEnumeratorPrivate  GFileEnumeratorPrivate;

struct _GFileEnumerator
{
  GObject parent_instance;

  
  GFileEnumeratorPrivate *priv;
};

struct _GFileEnumeratorClass
{
  GObjectClass parent_class;

  

  GFileInfo * (* next_file)         (GFileEnumerator      *enumerator,
                                     GCancellable         *cancellable,
                                     GError              **error);
  gboolean    (* close_fn)          (GFileEnumerator      *enumerator,
                                     GCancellable         *cancellable,
                                     GError              **error);

  void        (* next_files_async)  (GFileEnumerator      *enumerator,
                                     int                   num_files,
                                     int                   io_priority,
                                     GCancellable         *cancellable,
                                     GAsyncReadyCallback   callback,
                                     gpointer              user_data);
  GList *     (* next_files_finish) (GFileEnumerator      *enumerator,
                                     GAsyncResult         *result,
                                     GError              **error);
  void        (* close_async)       (GFileEnumerator      *enumerator,
                                     int                   io_priority,
                                     GCancellable         *cancellable,
                                     GAsyncReadyCallback   callback,
                                     gpointer              user_data);
  gboolean    (* close_finish)      (GFileEnumerator      *enumerator,
                                     GAsyncResult         *result,
                                     GError              **error);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

extern
GType      g_file_enumerator_get_type          (void) ;

extern
GFileInfo *g_file_enumerator_next_file         (GFileEnumerator      *enumerator,
						GCancellable         *cancellable,
						GError              **error);
extern
gboolean   g_file_enumerator_close             (GFileEnumerator      *enumerator,
						GCancellable         *cancellable,
						GError              **error);
extern
void       g_file_enumerator_next_files_async  (GFileEnumerator      *enumerator,
						int                   num_files,
						int                   io_priority,
						GCancellable         *cancellable,
						GAsyncReadyCallback   callback,
						gpointer              user_data);
extern
GList *    g_file_enumerator_next_files_finish (GFileEnumerator      *enumerator,
						GAsyncResult         *result,
						GError              **error);
extern
void       g_file_enumerator_close_async       (GFileEnumerator      *enumerator,
						int                   io_priority,
						GCancellable         *cancellable,
						GAsyncReadyCallback   callback,
						gpointer              user_data);
extern
gboolean   g_file_enumerator_close_finish      (GFileEnumerator      *enumerator,
						GAsyncResult         *result,
						GError              **error);
extern
gboolean   g_file_enumerator_is_closed         (GFileEnumerator      *enumerator);
extern
gboolean   g_file_enumerator_has_pending       (GFileEnumerator      *enumerator);
extern
void       g_file_enumerator_set_pending       (GFileEnumerator      *enumerator,
						gboolean              pending);
extern
GFile *    g_file_enumerator_get_container     (GFileEnumerator *enumerator);
extern
GFile *    g_file_enumerator_get_child         (GFileEnumerator *enumerator,
                                                GFileInfo       *info);

extern
gboolean   g_file_enumerator_iterate           (GFileEnumerator  *direnum,
                                                GFileInfo       **out_info,
                                                GFile           **out_child,
                                                GCancellable     *cancellable,
                                                GError          **error);




#line 153 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileenumerator.h"
#line 69 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfile.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfile.h"



















#line 47 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfile.h"
typedef struct _GFileIface    		GFileIface;















































































































struct _GFileIface
{
  GTypeInterface g_iface;

  

  GFile *             (* dup)                         (GFile         *file);
  guint               (* hash)                        (GFile         *file);
  gboolean            (* equal)                       (GFile         *file1,
                                                       GFile         *file2);
  gboolean            (* is_native)                   (GFile         *file);
  gboolean            (* has_uri_scheme)              (GFile         *file,
                                                       const char    *uri_scheme);
  char *              (* get_uri_scheme)              (GFile         *file);
  char *              (* get_basename)                (GFile         *file);
  char *              (* get_path)                    (GFile         *file);
  char *              (* get_uri)                     (GFile         *file);
  char *              (* get_parse_name)              (GFile         *file);
  GFile *             (* get_parent)                  (GFile         *file);
  gboolean            (* prefix_matches)              (GFile         *prefix,
                                                       GFile         *file);
  char *              (* get_relative_path)           (GFile         *parent,
                                                       GFile         *descendant);
  GFile *             (* resolve_relative_path)       (GFile        *file,
                                                       const char   *relative_path);
  GFile *             (* get_child_for_display_name)  (GFile        *file,
                                                       const char   *display_name,
                                                       GError      **error);

  GFileEnumerator *   (* enumerate_children)          (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* enumerate_children_async)    (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileEnumerator *   (* enumerate_children_finish)   (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileInfo *         (* query_info)                  (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* query_info_async)            (GFile                *file,
                                                       const char           *attributes,
                                                       GFileQueryInfoFlags   flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileInfo *         (* query_info_finish)           (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileInfo *         (* query_filesystem_info)       (GFile                *file,
                                                       const char           *attributes,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* query_filesystem_info_async) (GFile                *file,
                                                       const char           *attributes,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileInfo *         (* query_filesystem_info_finish)(GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GMount *            (* find_enclosing_mount)        (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* find_enclosing_mount_async)  (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GMount *            (* find_enclosing_mount_finish) (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFile *             (* set_display_name)            (GFile                *file,
                                                       const char           *display_name,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* set_display_name_async)      (GFile                *file,
                                                       const char           *display_name,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFile *             (* set_display_name_finish)     (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileAttributeInfoList * (* query_settable_attributes)    (GFile          *file,
                                                             GCancellable   *cancellable,
                                                             GError        **error);
  void                (* _query_settable_attributes_async)  (void);
  void                (* _query_settable_attributes_finish) (void);

  GFileAttributeInfoList * (* query_writable_namespaces)    (GFile          *file,
                                                             GCancellable   *cancellable,
                                                             GError        **error);
  void                (* _query_writable_namespaces_async)  (void);
  void                (* _query_writable_namespaces_finish) (void);

  gboolean            (* set_attribute)               (GFile                *file,
                                                       const char           *attribute,
                                                       GFileAttributeType    type,
                                                       gpointer              value_p,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  gboolean            (* set_attributes_from_info)    (GFile                *file,
                                                       GFileInfo            *info,
                                                       GFileQueryInfoFlags   flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* set_attributes_async)        (GFile                *file,
                                                       GFileInfo            *info,
                                                       GFileQueryInfoFlags   flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* set_attributes_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GFileInfo           **info,
                                                       GError              **error);

  GFileInputStream *  (* read_fn)                     (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* read_async)                  (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileInputStream *  (* read_finish)                 (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileOutputStream * (* append_to)                   (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* append_to_async)             (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileOutputStream * (* append_to_finish)            (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileOutputStream * (* create)                      (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* create_async)                (GFile                *file,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileOutputStream * (* create_finish)               (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  GFileOutputStream * (* replace)                     (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* replace_async)               (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileOutputStream * (* replace_finish)              (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  gboolean            (* delete_file)                 (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* delete_file_async)           (GFile                *file,
						       int                   io_priority,
						       GCancellable         *cancellable,
						       GAsyncReadyCallback   callback,
						       gpointer              user_data);
  gboolean            (* delete_file_finish)          (GFile                *file,
						       GAsyncResult         *result,
						       GError              **error);

  gboolean            (* trash)                       (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* trash_async)                 (GFile                *file,
						       int                   io_priority,
						       GCancellable         *cancellable,
						       GAsyncReadyCallback   callback,
						       gpointer              user_data);
  gboolean            (* trash_finish)                (GFile                *file,
						       GAsyncResult         *result,
						       GError              **error);

  gboolean            (* make_directory)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* make_directory_async)        (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* make_directory_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            (* make_symbolic_link)          (GFile                *file,
                                                       const char           *symlink_value,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* _make_symbolic_link_async)   (void);
  void                (* _make_symbolic_link_finish)  (void);

  gboolean            (* copy)                        (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GError              **error);
  void                (* copy_async)                  (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* copy_finish)                 (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  gboolean            (* move)                        (GFile                *source,
                                                       GFile                *destination,
                                                       GFileCopyFlags        flags,
                                                       GCancellable         *cancellable,
                                                       GFileProgressCallback progress_callback,
                                                       gpointer              progress_callback_data,
                                                       GError              **error);
  void                (* _move_async)                 (void);
  void                (* _move_finish)                (void);

  void                (* mount_mountable)             (GFile                *file,
                                                       GMountMountFlags      flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFile *             (* mount_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* unmount_mountable)           (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* unmount_mountable_finish)    (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* eject_mountable)             (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* eject_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* mount_enclosing_volume)      (GFile                *location,
                                                       GMountMountFlags      flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean         (* mount_enclosing_volume_finish)  (GFile                *location,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  GFileMonitor *      (* monitor_dir)                 (GFile                *file,
                                                       GFileMonitorFlags     flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  GFileMonitor *      (* monitor_file)                (GFile                *file,
                                                       GFileMonitorFlags     flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);

  GFileIOStream *     (* open_readwrite)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* open_readwrite_async)        (GFile                *file,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* open_readwrite_finish)       (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);
  GFileIOStream *     (* create_readwrite)            (GFile                *file,
						       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* create_readwrite_async)      (GFile                *file,
						       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* create_readwrite_finish)      (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);
  GFileIOStream *     (* replace_readwrite)           (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       GCancellable         *cancellable,
                                                       GError              **error);
  void                (* replace_readwrite_async)     (GFile                *file,
                                                       const char           *etag,
                                                       gboolean              make_backup,
                                                       GFileCreateFlags      flags,
                                                       int                   io_priority,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  GFileIOStream *     (* replace_readwrite_finish)    (GFile                *file,
                                                       GAsyncResult         *res,
                                                       GError              **error);

  void                (* start_mountable)             (GFile                *file,
                                                       GDriveStartFlags      flags,
                                                       GMountOperation      *start_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* start_mountable_finish)      (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* stop_mountable)              (GFile                *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* stop_mountable_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            supports_thread_contexts;

  void                (* unmount_mountable_with_operation) (GFile           *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* unmount_mountable_with_operation_finish) (GFile    *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* eject_mountable_with_operation) (GFile             *file,
                                                       GMountUnmountFlags    flags,
                                                       GMountOperation      *mount_operation,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* eject_mountable_with_operation_finish) (GFile      *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  void                (* poll_mountable)              (GFile                *file,
                                                       GCancellable         *cancellable,
                                                       GAsyncReadyCallback   callback,
                                                       gpointer              user_data);
  gboolean            (* poll_mountable_finish)       (GFile                *file,
                                                       GAsyncResult         *result,
                                                       GError              **error);

  gboolean            (* measure_disk_usage)          (GFile                         *file,
                                                       GFileMeasureFlags              flags,
                                                       GCancellable                  *cancellable,
                                                       GFileMeasureProgressCallback   progress_callback,
                                                       gpointer                       progress_data,
                                                       guint64                       *disk_usage,
                                                       guint64                       *num_dirs,
                                                       guint64                       *num_files,
                                                       GError                       **error);
  void                (* measure_disk_usage_async)    (GFile                         *file,
                                                       GFileMeasureFlags              flags,
                                                       gint                           io_priority,
                                                       GCancellable                  *cancellable,
                                                       GFileMeasureProgressCallback   progress_callback,
                                                       gpointer                       progress_data,
                                                       GAsyncReadyCallback            callback,
                                                       gpointer                       user_data);
  gboolean            (* measure_disk_usage_finish)   (GFile                         *file,
                                                       GAsyncResult                  *result,
                                                       guint64                       *disk_usage,
                                                       guint64                       *num_dirs,
                                                       guint64                       *num_files,
                                                       GError                       **error);
};

extern
GType                   g_file_get_type                   (void) ;

extern
GFile *                 g_file_new_for_path               (const char                 *path);
extern
GFile *                 g_file_new_for_uri                (const char                 *uri);
extern
GFile *                 g_file_new_for_commandline_arg    (const char                 *arg);
extern
GFile *                 g_file_new_for_commandline_arg_and_cwd (const gchar           *arg,
                                                                const gchar           *cwd);
extern
GFile *                 g_file_new_tmp                    (const char                 *tmpl,
                                                           GFileIOStream             **iostream,
                                                           GError                    **error);
extern
GFile *                 g_file_parse_name                 (const char                 *parse_name);
extern
GFile *                 g_file_dup                        (GFile                      *file);
extern
guint                   g_file_hash                       (gconstpointer               file);
extern
gboolean                g_file_equal                      (GFile                      *file1,
							   GFile                      *file2);
extern
char *                  g_file_get_basename               (GFile                      *file);
extern
char *                  g_file_get_path                   (GFile                      *file);
extern
char *                  g_file_get_uri                    (GFile                      *file);
extern
char *                  g_file_get_parse_name             (GFile                      *file);
extern
GFile *                 g_file_get_parent                 (GFile                      *file);
extern
gboolean                g_file_has_parent                 (GFile                      *file,
                                                           GFile                      *parent);
extern
GFile *                 g_file_get_child                  (GFile                      *file,
							   const char                 *name);
extern
GFile *                 g_file_get_child_for_display_name (GFile                      *file,
							   const char                 *display_name,
							   GError                    **error);
extern
gboolean                g_file_has_prefix                 (GFile                      *file,
							   GFile                      *prefix);
extern
char *                  g_file_get_relative_path          (GFile                      *parent,
							   GFile                      *descendant);
extern
GFile *                 g_file_resolve_relative_path      (GFile                      *file,
							   const char                 *relative_path);
extern
gboolean                g_file_is_native                  (GFile                      *file);
extern
gboolean                g_file_has_uri_scheme             (GFile                      *file,
							   const char                 *uri_scheme);
extern
char *                  g_file_get_uri_scheme             (GFile                      *file);
extern
GFileInputStream *      g_file_read                       (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_read_async                 (GFile                      *file,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileInputStream *      g_file_read_finish                (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
GFileOutputStream *     g_file_append_to                  (GFile                      *file,
							   GFileCreateFlags             flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
GFileOutputStream *     g_file_create                     (GFile                      *file,
							   GFileCreateFlags             flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
GFileOutputStream *     g_file_replace                    (GFile                      *file,
							   const char                 *etag,
							   gboolean                    make_backup,
							   GFileCreateFlags            flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_append_to_async            (GFile                      *file,
							   GFileCreateFlags            flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileOutputStream *     g_file_append_to_finish           (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
void                    g_file_create_async               (GFile                      *file,
							   GFileCreateFlags            flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileOutputStream *     g_file_create_finish              (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
void                    g_file_replace_async              (GFile                      *file,
							   const char                 *etag,
							   gboolean                    make_backup,
							   GFileCreateFlags            flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileOutputStream *     g_file_replace_finish             (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
GFileIOStream *         g_file_open_readwrite             (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_open_readwrite_async       (GFile                      *file,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileIOStream *         g_file_open_readwrite_finish      (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
GFileIOStream *         g_file_create_readwrite           (GFile                      *file,
							   GFileCreateFlags            flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_create_readwrite_async     (GFile                      *file,
							   GFileCreateFlags            flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileIOStream *         g_file_create_readwrite_finish    (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
GFileIOStream *         g_file_replace_readwrite          (GFile                      *file,
							   const char                 *etag,
							   gboolean                    make_backup,
							   GFileCreateFlags            flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_replace_readwrite_async    (GFile                      *file,
							   const char                 *etag,
							   gboolean                    make_backup,
							   GFileCreateFlags            flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileIOStream *         g_file_replace_readwrite_finish   (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
gboolean                g_file_query_exists               (GFile                      *file,
							   GCancellable               *cancellable);
extern
GFileType               g_file_query_file_type            (GFile                      *file,
                                                           GFileQueryInfoFlags         flags,
                                                           GCancellable               *cancellable);
extern
GFileInfo *             g_file_query_info                 (GFile                      *file,
							   const char                 *attributes,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_query_info_async           (GFile                      *file,
							   const char                 *attributes,
							   GFileQueryInfoFlags         flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileInfo *             g_file_query_info_finish          (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
GFileInfo *             g_file_query_filesystem_info      (GFile                      *file,
							   const char                 *attributes,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_query_filesystem_info_async (GFile                      *file,
							   const char                 *attributes,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileInfo *             g_file_query_filesystem_info_finish (GFile                      *file,
                                                           GAsyncResult               *res,
							   GError                    **error);
extern
GMount *                g_file_find_enclosing_mount       (GFile                      *file,
                                                           GCancellable               *cancellable,
                                                           GError                    **error);
extern
void                    g_file_find_enclosing_mount_async (GFile                      *file,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GMount *                g_file_find_enclosing_mount_finish (GFile                     *file,
							    GAsyncResult              *res,
							    GError                   **error);
extern
GFileEnumerator *       g_file_enumerate_children         (GFile                      *file,
							   const char                 *attributes,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_enumerate_children_async   (GFile                      *file,
							   const char                 *attributes,
							   GFileQueryInfoFlags         flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFileEnumerator *       g_file_enumerate_children_finish  (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
GFile *                 g_file_set_display_name           (GFile                      *file,
							   const char                 *display_name,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_set_display_name_async     (GFile                      *file,
							   const char                 *display_name,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFile *                 g_file_set_display_name_finish    (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
gboolean                g_file_delete                     (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);

extern
void                    g_file_delete_async               (GFile                      *file,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);

extern
gboolean                g_file_delete_finish              (GFile                      *file,
							   GAsyncResult               *result,
							   GError                    **error);

extern
gboolean                g_file_trash                      (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);

extern
void                    g_file_trash_async                (GFile                      *file,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);

extern
gboolean                g_file_trash_finish               (GFile                      *file,
							   GAsyncResult               *result,
							   GError                    **error);

extern
gboolean                g_file_copy                       (GFile                      *source,
							   GFile                      *destination,
							   GFileCopyFlags              flags,
							   GCancellable               *cancellable,
							   GFileProgressCallback       progress_callback,
							   gpointer                    progress_callback_data,
							   GError                    **error);
extern
void                    g_file_copy_async                 (GFile                      *source,
							   GFile                      *destination,
							   GFileCopyFlags              flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GFileProgressCallback       progress_callback,
							   gpointer                    progress_callback_data,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_copy_finish                (GFile                      *file,
							   GAsyncResult               *res,
							   GError                    **error);
extern
gboolean                g_file_move                       (GFile                      *source,
							   GFile                      *destination,
							   GFileCopyFlags              flags,
							   GCancellable               *cancellable,
							   GFileProgressCallback       progress_callback,
							   gpointer                    progress_callback_data,
							   GError                    **error);
extern
gboolean                g_file_make_directory             (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_make_directory_async       (GFile                      *file,
                                                           int                         io_priority,
                                                           GCancellable               *cancellable,
                                                           GAsyncReadyCallback         callback,
                                                           gpointer                    user_data);
extern
gboolean                g_file_make_directory_finish      (GFile                      *file,
                                                           GAsyncResult               *result,
                                                           GError                    **error);

extern
gboolean                g_file_make_directory_with_parents (GFile                     *file,
		                                           GCancellable               *cancellable,
		                                           GError                    **error);
extern
gboolean                g_file_make_symbolic_link         (GFile                      *file,
							   const char                 *symlink_value,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
GFileAttributeInfoList *g_file_query_settable_attributes  (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
GFileAttributeInfoList *g_file_query_writable_namespaces  (GFile                      *file,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attribute              (GFile                      *file,
							   const char                 *attribute,
							   GFileAttributeType          type,
							   gpointer                    value_p,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attributes_from_info   (GFile                      *file,
							   GFileInfo                  *info,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_set_attributes_async       (GFile                      *file,
							   GFileInfo                  *info,
							   GFileQueryInfoFlags         flags,
							   int                         io_priority,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_set_attributes_finish      (GFile                      *file,
							   GAsyncResult               *result,
							   GFileInfo                 **info,
							   GError                    **error);
extern
gboolean                g_file_set_attribute_string       (GFile                      *file,
							   const char                 *attribute,
							   const char                 *value,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attribute_byte_string  (GFile                      *file,
							   const char                 *attribute,
							   const char                 *value,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attribute_uint32       (GFile                      *file,
							   const char                 *attribute,
							   guint32                     value,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attribute_int32        (GFile                      *file,
							   const char                 *attribute,
							   gint32                      value,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attribute_uint64       (GFile                      *file,
							   const char                 *attribute,
							   guint64                     value,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
gboolean                g_file_set_attribute_int64        (GFile                      *file,
							   const char                 *attribute,
							   gint64                      value,
							   GFileQueryInfoFlags         flags,
							   GCancellable               *cancellable,
							   GError                    **error);
extern
void                    g_file_mount_enclosing_volume     (GFile                      *location,
							   GMountMountFlags            flags,
							   GMountOperation            *mount_operation,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_mount_enclosing_volume_finish (GFile                      *location,
							   GAsyncResult               *result,
							   GError                    **error);
extern
void                    g_file_mount_mountable            (GFile                      *file,
							   GMountMountFlags            flags,
							   GMountOperation            *mount_operation,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
GFile *                 g_file_mount_mountable_finish     (GFile                      *file,
							   GAsyncResult               *result,
							   GError                    **error);
__declspec(deprecated("is deprecated. Use '" "g_file_unmount_mountable_with_operation" "' instead")) extern
void                    g_file_unmount_mountable          (GFile                      *file,
                                                           GMountUnmountFlags          flags,
                                                           GCancellable               *cancellable,
                                                           GAsyncReadyCallback         callback,
                                                           gpointer                    user_data);

__declspec(deprecated("is deprecated. Use '" "g_file_unmount_mountable_with_operation_finish" "' instead")) extern
gboolean                g_file_unmount_mountable_finish   (GFile                      *file,
                                                           GAsyncResult               *result,
                                                           GError                    **error);
extern
void                    g_file_unmount_mountable_with_operation (GFile                *file,
							   GMountUnmountFlags          flags,
							   GMountOperation            *mount_operation,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_unmount_mountable_with_operation_finish (GFile         *file,
							   GAsyncResult               *result,
							   GError                    **error);
__declspec(deprecated("is deprecated. Use '" "g_file_eject_mountable_with_operation" "' instead")) extern
void                    g_file_eject_mountable            (GFile                      *file,
                                                           GMountUnmountFlags          flags,
                                                           GCancellable               *cancellable,
                                                           GAsyncReadyCallback         callback,
                                                           gpointer                    user_data);

__declspec(deprecated("is deprecated. Use '" "g_file_eject_mountable_with_operation_finish" "' instead")) extern
gboolean                g_file_eject_mountable_finish     (GFile                      *file,
                                                           GAsyncResult               *result,
                                                           GError                    **error);
extern
void                    g_file_eject_mountable_with_operation (GFile                  *file,
							   GMountUnmountFlags          flags,
							   GMountOperation            *mount_operation,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_eject_mountable_with_operation_finish (GFile           *file,
							   GAsyncResult               *result,
							   GError                    **error);

extern
gboolean                g_file_copy_attributes            (GFile                      *source,
							   GFile                      *destination,
							   GFileCopyFlags              flags,
							   GCancellable               *cancellable,
							   GError                    **error);


extern
GFileMonitor*           g_file_monitor_directory          (GFile                  *file,
							   GFileMonitorFlags       flags,
							   GCancellable           *cancellable,
							   GError                **error);
extern
GFileMonitor*           g_file_monitor_file               (GFile                  *file,
							   GFileMonitorFlags       flags,
							   GCancellable           *cancellable,
							   GError                **error);
extern
GFileMonitor*           g_file_monitor                    (GFile                  *file,
							   GFileMonitorFlags       flags,
							   GCancellable           *cancellable,
							   GError                **error);

extern
gboolean                g_file_measure_disk_usage         (GFile                         *file,
                                                           GFileMeasureFlags              flags,
                                                           GCancellable                  *cancellable,
                                                           GFileMeasureProgressCallback   progress_callback,
                                                           gpointer                       progress_data,
                                                           guint64                       *disk_usage,
                                                           guint64                       *num_dirs,
                                                           guint64                       *num_files,
                                                           GError                       **error);

extern
void                    g_file_measure_disk_usage_async   (GFile                         *file,
                                                           GFileMeasureFlags              flags,
                                                           gint                           io_priority,
                                                           GCancellable                  *cancellable,
                                                           GFileMeasureProgressCallback   progress_callback,
                                                           gpointer                       progress_data,
                                                           GAsyncReadyCallback            callback,
                                                           gpointer                       user_data);

extern
gboolean                g_file_measure_disk_usage_finish  (GFile                         *file,
                                                           GAsyncResult                  *result,
                                                           guint64                       *disk_usage,
                                                           guint64                       *num_dirs,
                                                           guint64                       *num_files,
                                                           GError                       **error);

extern
void                    g_file_start_mountable            (GFile                      *file,
							   GDriveStartFlags            flags,
							   GMountOperation            *start_operation,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_start_mountable_finish     (GFile                      *file,
							   GAsyncResult               *result,
							   GError                    **error);
extern
void                    g_file_stop_mountable             (GFile                      *file,
							   GMountUnmountFlags          flags,
                                                           GMountOperation            *mount_operation,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_stop_mountable_finish      (GFile                      *file,
							   GAsyncResult               *result,
							   GError                    **error);

extern
void                    g_file_poll_mountable             (GFile                      *file,
							   GCancellable               *cancellable,
							   GAsyncReadyCallback         callback,
							   gpointer                    user_data);
extern
gboolean                g_file_poll_mountable_finish      (GFile                      *file,
							   GAsyncResult               *result,
							   GError                    **error);



extern
GAppInfo *g_file_query_default_handler       (GFile                  *file,
					      GCancellable           *cancellable,
					      GError                **error);
extern
gboolean g_file_load_contents                (GFile                  *file,
					      GCancellable           *cancellable,
					      char                  **contents,
					      gsize                  *length,
					      char                  **etag_out,
					      GError                **error);
extern
void     g_file_load_contents_async          (GFile                  *file,
					      GCancellable           *cancellable,
					      GAsyncReadyCallback     callback,
					      gpointer                user_data);
extern
gboolean g_file_load_contents_finish         (GFile                  *file,
					      GAsyncResult           *res,
					      char                  **contents,
					      gsize                  *length,
					      char                  **etag_out,
					      GError                **error);
extern
void     g_file_load_partial_contents_async  (GFile                  *file,
					      GCancellable           *cancellable,
					      GFileReadMoreCallback   read_more_callback,
					      GAsyncReadyCallback     callback,
					      gpointer                user_data);
extern
gboolean g_file_load_partial_contents_finish (GFile                  *file,
					      GAsyncResult           *res,
					      char                  **contents,
					      gsize                  *length,
					      char                  **etag_out,
					      GError                **error);
extern
gboolean g_file_replace_contents             (GFile                  *file,
					      const char             *contents,
					      gsize                   length,
					      const char             *etag,
					      gboolean                make_backup,
					      GFileCreateFlags        flags,
					      char                  **new_etag,
					      GCancellable           *cancellable,
					      GError                **error);
extern
void     g_file_replace_contents_async       (GFile                  *file,
					      const char             *contents,
					      gsize                   length,
					      const char             *etag,
					      gboolean                make_backup,
					      GFileCreateFlags        flags,
					      GCancellable           *cancellable,
					      GAsyncReadyCallback     callback,
					      gpointer                user_data);
extern
void     g_file_replace_contents_bytes_async (GFile                  *file,
					      GBytes                 *contents,
					      const char             *etag,
					      gboolean                make_backup,
					      GFileCreateFlags        flags,
					      GCancellable           *cancellable,
					      GAsyncReadyCallback     callback,
					      gpointer                user_data);
extern
gboolean g_file_replace_contents_finish      (GFile                  *file,
					      GAsyncResult           *res,
					      char                  **new_etag,
					      GError                **error);

extern
gboolean g_file_supports_thread_contexts     (GFile                  *file);



#line 1254 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfile.h"
#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileicon.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileicon.h"

















typedef struct _GFileIconClass   GFileIconClass;

extern
GType   g_file_icon_get_type (void) ;

extern
GIcon * g_file_icon_new      (GFile     *file);

extern
GFile * g_file_icon_get_file (GFileIcon *icon);



#line 58 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileicon.h"
#line 71 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileinfo.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileinfo.h"

















typedef struct _GFileInfoClass   GFileInfoClass;




































































































































































































































































































































































































































































































































































































































































































































































































































































extern
GType              g_file_info_get_type                  (void) ;

extern
GFileInfo *        g_file_info_new                       (void);
extern
GFileInfo *        g_file_info_dup                       (GFileInfo  *other);
extern
void               g_file_info_copy_into                 (GFileInfo  *src_info,
							  GFileInfo  *dest_info);
extern
gboolean           g_file_info_has_attribute             (GFileInfo  *info,
							  const char *attribute);
extern
gboolean           g_file_info_has_namespace             (GFileInfo  *info,
							  const char *name_space);
extern
char **            g_file_info_list_attributes           (GFileInfo  *info,
							  const char *name_space);
extern
gboolean           g_file_info_get_attribute_data        (GFileInfo  *info,
							  const char *attribute,
							  GFileAttributeType *type,
							  gpointer   *value_pp,
							  GFileAttributeStatus *status);
extern
GFileAttributeType g_file_info_get_attribute_type        (GFileInfo  *info,
							  const char *attribute);
extern
void               g_file_info_remove_attribute          (GFileInfo  *info,
							  const char *attribute);
extern
GFileAttributeStatus g_file_info_get_attribute_status    (GFileInfo  *info,
							  const char *attribute);
extern
gboolean           g_file_info_set_attribute_status      (GFileInfo  *info,
							  const char *attribute,
							  GFileAttributeStatus status);
extern
char *             g_file_info_get_attribute_as_string   (GFileInfo  *info,
							  const char *attribute);
extern
const char *       g_file_info_get_attribute_string      (GFileInfo  *info,
							  const char *attribute);
extern
const char *       g_file_info_get_attribute_byte_string (GFileInfo  *info,
							  const char *attribute);
extern
gboolean           g_file_info_get_attribute_boolean     (GFileInfo  *info,
							  const char *attribute);
extern
guint32            g_file_info_get_attribute_uint32      (GFileInfo  *info,
							  const char *attribute);
extern
gint32             g_file_info_get_attribute_int32       (GFileInfo  *info,
							  const char *attribute);
extern
guint64            g_file_info_get_attribute_uint64      (GFileInfo  *info,
							  const char *attribute);
extern
gint64             g_file_info_get_attribute_int64       (GFileInfo  *info,
							  const char *attribute);
extern
GObject *          g_file_info_get_attribute_object      (GFileInfo  *info,
							  const char *attribute);
extern
char **            g_file_info_get_attribute_stringv     (GFileInfo  *info,
							  const char *attribute);

extern
void               g_file_info_set_attribute             (GFileInfo  *info,
							  const char *attribute,
							  GFileAttributeType type,
							  gpointer    value_p);
extern
void               g_file_info_set_attribute_string      (GFileInfo  *info,
							  const char *attribute,
							  const char *attr_value);
extern
void               g_file_info_set_attribute_byte_string (GFileInfo  *info,
							  const char *attribute,
							  const char *attr_value);
extern
void               g_file_info_set_attribute_boolean     (GFileInfo  *info,
							  const char *attribute,
							  gboolean    attr_value);
extern
void               g_file_info_set_attribute_uint32      (GFileInfo  *info,
							  const char *attribute,
							  guint32     attr_value);
extern
void               g_file_info_set_attribute_int32       (GFileInfo  *info,
							  const char *attribute,
							  gint32      attr_value);
extern
void               g_file_info_set_attribute_uint64      (GFileInfo  *info,
							  const char *attribute,
							  guint64     attr_value);
extern
void               g_file_info_set_attribute_int64       (GFileInfo  *info,
							  const char *attribute,
							  gint64      attr_value);
extern
void               g_file_info_set_attribute_object      (GFileInfo  *info,
							  const char *attribute,
							  GObject    *attr_value);
extern
void               g_file_info_set_attribute_stringv     (GFileInfo  *info,
							  const char *attribute,
							  char      **attr_value);

extern
void               g_file_info_clear_status              (GFileInfo  *info);


extern
GDateTime *       g_file_info_get_deletion_date      (GFileInfo         *info);
extern
GFileType         g_file_info_get_file_type          (GFileInfo         *info);
extern
gboolean          g_file_info_get_is_hidden          (GFileInfo         *info);
extern
gboolean          g_file_info_get_is_backup          (GFileInfo         *info);
extern
gboolean          g_file_info_get_is_symlink         (GFileInfo         *info);
extern
const char *      g_file_info_get_name               (GFileInfo         *info);
extern
const char *      g_file_info_get_display_name       (GFileInfo         *info);
extern
const char *      g_file_info_get_edit_name          (GFileInfo         *info);
extern
GIcon *           g_file_info_get_icon               (GFileInfo         *info);
extern
GIcon *           g_file_info_get_symbolic_icon      (GFileInfo         *info);
extern
const char *      g_file_info_get_content_type       (GFileInfo         *info);
extern
goffset           g_file_info_get_size               (GFileInfo         *info);
extern
void              g_file_info_get_modification_time  (GFileInfo         *info,
						      GTimeVal          *result);
extern
const char *      g_file_info_get_symlink_target     (GFileInfo         *info);
extern
const char *      g_file_info_get_etag               (GFileInfo         *info);
extern
gint32            g_file_info_get_sort_order         (GFileInfo         *info);

extern
void              g_file_info_set_attribute_mask     (GFileInfo         *info,
						      GFileAttributeMatcher *mask);
extern
void              g_file_info_unset_attribute_mask   (GFileInfo         *info);


extern
void              g_file_info_set_file_type          (GFileInfo         *info,
						      GFileType          type);
extern
void              g_file_info_set_is_hidden          (GFileInfo         *info,
						      gboolean           is_hidden);
extern
void              g_file_info_set_is_symlink         (GFileInfo         *info,
						      gboolean           is_symlink);
extern
void              g_file_info_set_name               (GFileInfo         *info,
						      const char        *name);
extern
void              g_file_info_set_display_name       (GFileInfo         *info,
						      const char        *display_name);
extern
void              g_file_info_set_edit_name          (GFileInfo         *info,
						      const char        *edit_name);
extern
void              g_file_info_set_icon               (GFileInfo         *info,
						      GIcon             *icon);
extern
void              g_file_info_set_symbolic_icon      (GFileInfo         *info,
						      GIcon             *icon);
extern
void              g_file_info_set_content_type       (GFileInfo         *info,
						      const char        *content_type);
extern
void              g_file_info_set_size               (GFileInfo         *info,
						      goffset            size);
extern
void              g_file_info_set_modification_time  (GFileInfo         *info,
						      GTimeVal          *mtime);
extern
void              g_file_info_set_symlink_target     (GFileInfo         *info,
						      const char        *symlink_target);
extern
void              g_file_info_set_sort_order         (GFileInfo         *info,
						      gint32             sort_order);


extern
GType g_file_attribute_matcher_get_type (void) ;

extern
GFileAttributeMatcher *g_file_attribute_matcher_new            (const char            *attributes);
extern
GFileAttributeMatcher *g_file_attribute_matcher_ref            (GFileAttributeMatcher *matcher);
extern
void                   g_file_attribute_matcher_unref          (GFileAttributeMatcher *matcher);
extern
GFileAttributeMatcher *g_file_attribute_matcher_subtract       (GFileAttributeMatcher *matcher,
                                                                GFileAttributeMatcher *subtract);
extern
gboolean               g_file_attribute_matcher_matches        (GFileAttributeMatcher *matcher,
								const char            *attribute);
extern
gboolean               g_file_attribute_matcher_matches_only   (GFileAttributeMatcher *matcher,
								const char            *attribute);
extern
gboolean               g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher,
								     const char            *ns);
extern
const char *           g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);
extern
char *                 g_file_attribute_matcher_to_string      (GFileAttributeMatcher *matcher);



#line 1107 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileinfo.h"
#line 72 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileinputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileinputstream.h"




















typedef struct _GFileInputStreamClass    GFileInputStreamClass;
typedef struct _GFileInputStreamPrivate  GFileInputStreamPrivate;

struct _GFileInputStream
{
  GInputStream parent_instance;

  
  GFileInputStreamPrivate *priv;
};

struct _GFileInputStreamClass
{
  GInputStreamClass parent_class;

  goffset     (* tell)              (GFileInputStream     *stream);
  gboolean    (* can_seek)          (GFileInputStream     *stream);
  gboolean    (* seek)	            (GFileInputStream     *stream,
                                     goffset               offset,
                                     GSeekType             type,
                                     GCancellable         *cancellable,
                                     GError              **error);
  GFileInfo * (* query_info)        (GFileInputStream     *stream,
                                     const char           *attributes,
                                     GCancellable         *cancellable,
                                     GError              **error);
  void        (* query_info_async)  (GFileInputStream     *stream,
                                     const char           *attributes,
                                     int                   io_priority,
                                     GCancellable         *cancellable,
                                     GAsyncReadyCallback   callback,
                                     gpointer              user_data);
  GFileInfo * (* query_info_finish) (GFileInputStream     *stream,
                                     GAsyncResult         *result,
                                     GError              **error);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType      g_file_input_stream_get_type          (void) ;

extern
GFileInfo *g_file_input_stream_query_info        (GFileInputStream     *stream,
						  const char           *attributes,
						  GCancellable         *cancellable,
						  GError              **error);
extern
void       g_file_input_stream_query_info_async  (GFileInputStream     *stream,
						  const char           *attributes,
						  int                   io_priority,
						  GCancellable         *cancellable,
						  GAsyncReadyCallback   callback,
						  gpointer              user_data);
extern
GFileInfo *g_file_input_stream_query_info_finish (GFileInputStream     *stream,
						  GAsyncResult         *result,
						  GError              **error);



#line 115 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileinputstream.h"
#line 73 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileiostream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileiostream.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giostream.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giostream.h"




#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioerror.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioerror.h"














extern
GQuark       g_io_error_quark      (void);
extern
GIOErrorEnum g_io_error_from_errno (gint err_no);


extern
GIOErrorEnum g_io_error_from_win32_error (gint error_code);
#line 50 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioerror.h"



#line 54 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioerror.h"
#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giostream.h"










typedef struct _GIOStreamPrivate                            GIOStreamPrivate;
typedef struct _GIOStreamClass                              GIOStreamClass;






struct _GIOStream
{
  GObject parent_instance;

  
  GIOStreamPrivate *priv;
};

struct _GIOStreamClass
{
  GObjectClass parent_class;

  GInputStream *  (*get_input_stream)  (GIOStream *stream);
  GOutputStream * (*get_output_stream) (GIOStream *stream);

  gboolean (* close_fn)	    (GIOStream           *stream,
                             GCancellable        *cancellable,
                             GError             **error);
  void     (* close_async)  (GIOStream           *stream,
                             int                  io_priority,
                             GCancellable        *cancellable,
                             GAsyncReadyCallback  callback,
                             gpointer             user_data);
  gboolean (* close_finish) (GIOStream           *stream,
                             GAsyncResult        *result,
                             GError             **error);
  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};

extern
GType          g_io_stream_get_type          (void)  ;

extern
GInputStream * g_io_stream_get_input_stream  (GIOStream            *stream);
extern
GOutputStream *g_io_stream_get_output_stream (GIOStream            *stream);

extern
void           g_io_stream_splice_async      (GIOStream            *stream1,
					      GIOStream            *stream2,
					      GIOStreamSpliceFlags  flags,
					      int                   io_priority,
					      GCancellable         *cancellable,
					      GAsyncReadyCallback   callback,
					      gpointer              user_data);

extern
gboolean       g_io_stream_splice_finish     (GAsyncResult         *result,
                                              GError              **error);

extern
gboolean       g_io_stream_close             (GIOStream            *stream,
					      GCancellable         *cancellable,
					      GError              **error);

extern
void           g_io_stream_close_async       (GIOStream            *stream,
					      int                   io_priority,
					      GCancellable         *cancellable,
					      GAsyncReadyCallback   callback,
					      gpointer              user_data);
extern
gboolean       g_io_stream_close_finish      (GIOStream            *stream,
					      GAsyncResult         *result,
					      GError              **error);

extern
gboolean       g_io_stream_is_closed         (GIOStream            *stream);
extern
gboolean       g_io_stream_has_pending       (GIOStream            *stream);
extern
gboolean       g_io_stream_set_pending       (GIOStream            *stream,
					      GError              **error);
extern
void           g_io_stream_clear_pending     (GIOStream            *stream);



#line 136 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giostream.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileiostream.h"


















typedef struct _GFileIOStreamClass    GFileIOStreamClass;
typedef struct _GFileIOStreamPrivate  GFileIOStreamPrivate;

struct _GFileIOStream
{
  GIOStream parent_instance;

  
  GFileIOStreamPrivate *priv;
};

struct _GFileIOStreamClass
{
  GIOStreamClass parent_class;

  goffset     (* tell)              (GFileIOStream    *stream);
  gboolean    (* can_seek)          (GFileIOStream    *stream);
  gboolean    (* seek)	            (GFileIOStream    *stream,
                                     goffset               offset,
                                     GSeekType             type,
                                     GCancellable         *cancellable,
                                     GError              **error);
  gboolean    (* can_truncate)      (GFileIOStream    *stream);
  gboolean    (* truncate_fn)       (GFileIOStream    *stream,
                                     goffset               size,
                                     GCancellable         *cancellable,
                                     GError              **error);
  GFileInfo * (* query_info)        (GFileIOStream    *stream,
                                     const char           *attributes,
                                     GCancellable         *cancellable,
                                     GError              **error);
  void        (* query_info_async)  (GFileIOStream     *stream,
                                     const char            *attributes,
                                     int                   io_priority,
                                     GCancellable         *cancellable,
                                     GAsyncReadyCallback   callback,
                                     gpointer              user_data);
  GFileInfo * (* query_info_finish) (GFileIOStream     *stream,
                                     GAsyncResult         *result,
                                     GError              **error);
  char      * (* get_etag)          (GFileIOStream    *stream);

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType      g_file_io_stream_get_type          (void) ;

extern
GFileInfo *g_file_io_stream_query_info        (GFileIOStream    *stream,
					       const char           *attributes,
					       GCancellable         *cancellable,
					       GError              **error);
extern
void       g_file_io_stream_query_info_async  (GFileIOStream    *stream,
					       const char           *attributes,
					       int                   io_priority,
					       GCancellable         *cancellable,
					       GAsyncReadyCallback   callback,
					       gpointer              user_data);
extern
GFileInfo *g_file_io_stream_query_info_finish (GFileIOStream    *stream,
					       GAsyncResult         *result,
					       GError              **error);
extern
char *     g_file_io_stream_get_etag          (GFileIOStream    *stream);



#line 122 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileiostream.h"
#line 74 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilemonitor.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilemonitor.h"












typedef struct _GFileMonitorClass       GFileMonitorClass;
typedef struct _GFileMonitorPrivate	GFileMonitorPrivate;






struct _GFileMonitor
{
  GObject parent_instance;

  
  GFileMonitorPrivate *priv;
};

struct _GFileMonitorClass
{
  GObjectClass parent_class;

  
  void     (* changed) (GFileMonitor      *monitor,
                        GFile             *file,
                        GFile             *other_file,
                        GFileMonitorEvent  event_type);

  
  gboolean (* cancel)  (GFileMonitor      *monitor);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType    g_file_monitor_get_type       (void) ;

extern
gboolean g_file_monitor_cancel         (GFileMonitor      *monitor);
extern
gboolean g_file_monitor_is_cancelled   (GFileMonitor      *monitor);
extern
void     g_file_monitor_set_rate_limit (GFileMonitor      *monitor,
                                        gint               limit_msecs);



extern
void     g_file_monitor_emit_event     (GFileMonitor      *monitor,
                                        GFile             *child,
                                        GFile             *other_file,
                                        GFileMonitorEvent  event_type);



#line 99 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilemonitor.h"
#line 75 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilenamecompleter.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilenamecompleter.h"

















typedef struct _GFilenameCompleterClass GFilenameCompleterClass;

struct _GFilenameCompleterClass
{
  GObjectClass parent_class;

  
  
  void (* got_completion_data) (GFilenameCompleter *filename_completer);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
};

extern
GType               g_filename_completer_get_type              (void) ;

extern
GFilenameCompleter *g_filename_completer_new                   (void);

extern
char *              g_filename_completer_get_completion_suffix (GFilenameCompleter *completer,
                                                                const char *initial_text);
extern
char **             g_filename_completer_get_completions       (GFilenameCompleter *completer,
                                                                const char *initial_text);
extern
void                g_filename_completer_set_dirs_only         (GFilenameCompleter *completer,
                                                                gboolean dirs_only);



#line 80 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfilenamecompleter.h"
#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileoutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileoutputstream.h"




















typedef struct _GFileOutputStreamClass    GFileOutputStreamClass;
typedef struct _GFileOutputStreamPrivate  GFileOutputStreamPrivate;

struct _GFileOutputStream
{
  GOutputStream parent_instance;

  
  GFileOutputStreamPrivate *priv;
};

struct _GFileOutputStreamClass
{
  GOutputStreamClass parent_class;

  goffset     (* tell)              (GFileOutputStream    *stream);
  gboolean    (* can_seek)          (GFileOutputStream    *stream);
  gboolean    (* seek)	            (GFileOutputStream    *stream,
                                     goffset               offset,
                                     GSeekType             type,
                                     GCancellable         *cancellable,
                                     GError              **error);
  gboolean    (* can_truncate)      (GFileOutputStream    *stream);
  gboolean    (* truncate_fn)       (GFileOutputStream    *stream,
                                     goffset               size,
                                     GCancellable         *cancellable,
                                     GError              **error);
  GFileInfo * (* query_info)        (GFileOutputStream    *stream,
                                     const char           *attributes,
                                     GCancellable         *cancellable,
                                     GError              **error);
  void        (* query_info_async)  (GFileOutputStream     *stream,
                                     const char            *attributes,
                                     int                   io_priority,
                                     GCancellable         *cancellable,
                                     GAsyncReadyCallback   callback,
                                     gpointer              user_data);
  GFileInfo * (* query_info_finish) (GFileOutputStream     *stream,
                                     GAsyncResult         *result,
                                     GError              **error);
  char      * (* get_etag)          (GFileOutputStream    *stream);

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType      g_file_output_stream_get_type          (void) ;


extern
GFileInfo *g_file_output_stream_query_info        (GFileOutputStream    *stream,
                                                   const char           *attributes,
                                                   GCancellable         *cancellable,
                                                   GError              **error);
extern
void       g_file_output_stream_query_info_async  (GFileOutputStream    *stream,
						   const char           *attributes,
						   int                   io_priority,
						   GCancellable         *cancellable,
						   GAsyncReadyCallback   callback,
						   gpointer              user_data);
extern
GFileInfo *g_file_output_stream_query_info_finish (GFileOutputStream    *stream,
						   GAsyncResult         *result,
						   GError              **error);
extern
char *     g_file_output_stream_get_etag          (GFileOutputStream    *stream);



#line 123 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gfileoutputstream.h"
#line 77 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"



#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetaddress.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetaddress.h"












typedef struct _GInetAddressClass   GInetAddressClass;
typedef struct _GInetAddressPrivate GInetAddressPrivate;

struct _GInetAddress
{
  GObject parent_instance;

  
  GInetAddressPrivate *priv;
};

struct _GInetAddressClass
{
  GObjectClass parent_class;

  gchar *        (*to_string) (GInetAddress *address);
  const guint8 * (*to_bytes)  (GInetAddress *address);
};

extern
GType                 g_inet_address_get_type             (void) ;

extern
GInetAddress *        g_inet_address_new_from_string      (const gchar          *string);

extern
GInetAddress *        g_inet_address_new_from_bytes       (const guint8         *bytes,
							   GSocketFamily         family);

extern
GInetAddress *        g_inet_address_new_loopback         (GSocketFamily         family);

extern
GInetAddress *        g_inet_address_new_any              (GSocketFamily         family);

extern
gboolean              g_inet_address_equal                (GInetAddress         *address,
                                                           GInetAddress         *other_address);

extern
gchar *               g_inet_address_to_string            (GInetAddress         *address);

extern
const guint8 *        g_inet_address_to_bytes             (GInetAddress         *address);

extern
gsize                 g_inet_address_get_native_size      (GInetAddress         *address);

extern
GSocketFamily         g_inet_address_get_family           (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_any           (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_loopback      (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_link_local    (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_site_local    (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_multicast     (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_mc_global     (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_mc_link_local (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_mc_node_local (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_mc_org_local  (GInetAddress         *address);

extern
gboolean              g_inet_address_get_is_mc_site_local (GInetAddress         *address);



#line 124 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetaddress.h"

#line 81 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetaddressmask.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetaddressmask.h"












typedef struct _GInetAddressMaskClass   GInetAddressMaskClass;
typedef struct _GInetAddressMaskPrivate GInetAddressMaskPrivate;

struct _GInetAddressMask
{
  GObject parent_instance;

  
  GInetAddressMaskPrivate *priv;
};

struct _GInetAddressMaskClass
{
  GObjectClass parent_class;

};

extern
GType g_inet_address_mask_get_type (void) ;

extern
GInetAddressMask *g_inet_address_mask_new             (GInetAddress      *addr,
						       guint              length,
						       GError           **error);

extern
GInetAddressMask *g_inet_address_mask_new_from_string (const gchar       *mask_string,
						       GError           **error);
extern
gchar            *g_inet_address_mask_to_string       (GInetAddressMask  *mask);

extern
GSocketFamily     g_inet_address_mask_get_family      (GInetAddressMask  *mask);
extern
GInetAddress     *g_inet_address_mask_get_address     (GInetAddressMask  *mask);
extern
guint             g_inet_address_mask_get_length      (GInetAddressMask  *mask);

extern
gboolean          g_inet_address_mask_matches         (GInetAddressMask  *mask,
						       GInetAddress      *address);
extern
gboolean          g_inet_address_mask_equal           (GInetAddressMask  *mask,
						       GInetAddressMask  *mask2);



#line 85 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetaddressmask.h"

#line 82 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetsocketaddress.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetsocketaddress.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketaddress.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketaddress.h"












typedef struct _GSocketAddressClass   GSocketAddressClass;

struct _GSocketAddress
{
  GObject parent_instance;
};

struct _GSocketAddressClass
{
  GObjectClass parent_class;

  GSocketFamily  (*get_family)      (GSocketAddress *address);

  gssize         (*get_native_size) (GSocketAddress *address);

  gboolean       (*to_native)       (GSocketAddress *address,
                                     gpointer        dest,
                                     gsize           destlen,
				     GError        **error);
};

extern
GType                 g_socket_address_get_type        (void) ;

extern
GSocketFamily         g_socket_address_get_family      (GSocketAddress *address);

extern
GSocketAddress *      g_socket_address_new_from_native (gpointer        native,
                                                        gsize           len);

extern
gboolean              g_socket_address_to_native       (GSocketAddress *address,
                                                        gpointer        dest,
                                                        gsize           destlen,
							GError        **error);

extern
gssize                g_socket_address_get_native_size (GSocketAddress *address);



#line 83 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketaddress.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetsocketaddress.h"










typedef struct _GInetSocketAddressClass   GInetSocketAddressClass;
typedef struct _GInetSocketAddressPrivate GInetSocketAddressPrivate;

struct _GInetSocketAddress
{
  GSocketAddress parent_instance;

  
  GInetSocketAddressPrivate *priv;
};

struct _GInetSocketAddressClass
{
  GSocketAddressClass parent_class;
};

extern
GType           g_inet_socket_address_get_type        (void) ;

extern
GSocketAddress *g_inet_socket_address_new             (GInetAddress       *address,
                                                       guint16             port);
extern
GSocketAddress *g_inet_socket_address_new_from_string (const char         *address,
                                                       guint               port);

extern
GInetAddress *  g_inet_socket_address_get_address     (GInetSocketAddress *address);
extern
guint16         g_inet_socket_address_get_port        (GInetSocketAddress *address);

extern
guint32         g_inet_socket_address_get_flowinfo    (GInetSocketAddress *address);
extern
guint32         g_inet_socket_address_get_scope_id    (GInetSocketAddress *address);



#line 79 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/ginetsocketaddress.h"
#line 83 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"



#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioenumtypes.h"











extern GType g_app_info_create_flags_get_type (void) ;

extern GType g_converter_flags_get_type (void) ;

extern GType g_converter_result_get_type (void) ;

extern GType g_data_stream_byte_order_get_type (void) ;

extern GType g_data_stream_newline_type_get_type (void) ;

extern GType g_file_attribute_type_get_type (void) ;

extern GType g_file_attribute_info_flags_get_type (void) ;

extern GType g_file_attribute_status_get_type (void) ;

extern GType g_file_query_info_flags_get_type (void) ;

extern GType g_file_create_flags_get_type (void) ;

extern GType g_file_measure_flags_get_type (void) ;

extern GType g_mount_mount_flags_get_type (void) ;

extern GType g_mount_unmount_flags_get_type (void) ;

extern GType g_drive_start_flags_get_type (void) ;

extern GType g_drive_start_stop_type_get_type (void) ;

extern GType g_file_copy_flags_get_type (void) ;

extern GType g_file_monitor_flags_get_type (void) ;

extern GType g_file_type_get_type (void) ;

extern GType g_filesystem_preview_type_get_type (void) ;

extern GType g_file_monitor_event_get_type (void) ;

extern GType g_io_error_enum_get_type (void) ;

extern GType g_ask_password_flags_get_type (void) ;

extern GType g_password_save_get_type (void) ;

extern GType g_mount_operation_result_get_type (void) ;

extern GType g_output_stream_splice_flags_get_type (void) ;

extern GType g_io_stream_splice_flags_get_type (void) ;

extern GType g_emblem_origin_get_type (void) ;

extern GType g_resolver_error_get_type (void) ;

extern GType g_resolver_record_type_get_type (void) ;

extern GType g_resource_error_get_type (void) ;

extern GType g_resource_flags_get_type (void) ;

extern GType g_resource_lookup_flags_get_type (void) ;

extern GType g_socket_family_get_type (void) ;

extern GType g_socket_type_get_type (void) ;

extern GType g_socket_msg_flags_get_type (void) ;

extern GType g_socket_protocol_get_type (void) ;

extern GType g_zlib_compressor_format_get_type (void) ;

extern GType g_unix_socket_address_type_get_type (void) ;

extern GType g_bus_type_get_type (void) ;

extern GType g_bus_name_owner_flags_get_type (void) ;

extern GType g_bus_name_watcher_flags_get_type (void) ;

extern GType g_dbus_proxy_flags_get_type (void) ;

extern GType g_dbus_error_get_type (void) ;

extern GType g_dbus_connection_flags_get_type (void) ;

extern GType g_dbus_capability_flags_get_type (void) ;

extern GType g_dbus_call_flags_get_type (void) ;

extern GType g_dbus_message_type_get_type (void) ;

extern GType g_dbus_message_flags_get_type (void) ;

extern GType g_dbus_message_header_field_get_type (void) ;

extern GType g_dbus_property_info_flags_get_type (void) ;

extern GType g_dbus_subtree_flags_get_type (void) ;

extern GType g_dbus_server_flags_get_type (void) ;

extern GType g_dbus_signal_flags_get_type (void) ;

extern GType g_dbus_send_message_flags_get_type (void) ;

extern GType g_credentials_type_get_type (void) ;

extern GType g_dbus_message_byte_order_get_type (void) ;

extern GType g_application_flags_get_type (void) ;

extern GType g_tls_error_get_type (void) ;

extern GType g_tls_certificate_flags_get_type (void) ;

extern GType g_tls_authentication_mode_get_type (void) ;

extern GType g_tls_rehandshake_mode_get_type (void) ;

extern GType g_tls_password_flags_get_type (void) ;

extern GType g_tls_interaction_result_get_type (void) ;

extern GType g_dbus_interface_skeleton_flags_get_type (void) ;

extern GType g_dbus_object_manager_client_flags_get_type (void) ;

extern GType g_tls_database_verify_flags_get_type (void) ;

extern GType g_tls_database_lookup_flags_get_type (void) ;

extern GType g_tls_certificate_request_flags_get_type (void) ;

extern GType g_io_module_scope_flags_get_type (void) ;

extern GType g_socket_client_event_get_type (void) ;

extern GType g_socket_listener_event_get_type (void) ;

extern GType g_test_dbus_flags_get_type (void) ;

extern GType g_subprocess_flags_get_type (void) ;

extern GType g_notification_priority_get_type (void) ;

extern GType g_network_connectivity_get_type (void) ;



extern GType g_settings_bind_flags_get_type (void) ;



#line 169 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioenumtypes.h"



#line 87 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giomodule.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giomodule.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gmodule.h"









































#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gmodule.h"

typedef enum
{
  G_MODULE_BIND_LAZY	= 1 << 0,
  G_MODULE_BIND_LOCAL	= 1 << 1,
  G_MODULE_BIND_MASK	= 0x03
} GModuleFlags;

typedef	struct _GModule			 GModule;
typedef const gchar* (*GModuleCheckInit) (GModule	*module);
typedef void	     (*GModuleUnload)	 (GModule	*module);


extern
gboolean	g_module_supported	   (void) ;


extern
GModule*              g_module_open          (const gchar  *file_name,
					      GModuleFlags  flags);


extern
gboolean              g_module_close         (GModule      *module);


extern
void                  g_module_make_resident (GModule      *module);


extern
const gchar *         g_module_error         (void);


extern
gboolean              g_module_symbol        (GModule      *module,
					      const gchar  *symbol_name,
					      gpointer     *symbol);


extern
const gchar *         g_module_name          (GModule      *module);












extern
gchar*                g_module_build_path    (const gchar  *directory,
					      const gchar  *module_name);







extern
GModule *    g_module_open_utf8 (const gchar  *file_name,
                                 GModuleFlags  flags);
extern
const gchar *g_module_name_utf8 (GModule      *module);
#line 113 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gmodule.h"
#line 114 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gmodule.h"



#line 118 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gmodule.h"
#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giomodule.h"



typedef struct _GIOModuleScope GIOModuleScope;

extern
GIOModuleScope *   g_io_module_scope_new     (GIOModuleScopeFlags  flags);
extern
void               g_io_module_scope_free    (GIOModuleScope      *scope);
extern
void               g_io_module_scope_block   (GIOModuleScope      *scope,
                                              const gchar         *basename);













typedef struct _GIOModuleClass GIOModuleClass;

extern
GType              g_io_module_get_type                       (void) ;
extern
GIOModule         *g_io_module_new                            (const gchar       *filename);

extern
void               g_io_modules_scan_all_in_directory         (const char        *dirname);
extern
GList             *g_io_modules_load_all_in_directory         (const gchar       *dirname);

extern
void               g_io_modules_scan_all_in_directory_with_scope   (const gchar       *dirname,
                                                                    GIOModuleScope    *scope);
extern
GList             *g_io_modules_load_all_in_directory_with_scope   (const gchar       *dirname,
                                                                    GIOModuleScope    *scope);

extern
GIOExtensionPoint *g_io_extension_point_register              (const char        *name);
extern
GIOExtensionPoint *g_io_extension_point_lookup                (const char        *name);
extern
void               g_io_extension_point_set_required_type     (GIOExtensionPoint *extension_point,
							       GType              type);
extern
GType              g_io_extension_point_get_required_type     (GIOExtensionPoint *extension_point);
extern
GList             *g_io_extension_point_get_extensions        (GIOExtensionPoint *extension_point);
extern
GIOExtension *     g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point,
							       const char        *name);
extern
GIOExtension *     g_io_extension_point_implement             (const char        *extension_point_name,
							       GType              type,
							       const char        *extension_name,
							       gint               priority);

extern
GType              g_io_extension_get_type                    (GIOExtension      *extension);
extern
const char *       g_io_extension_get_name                    (GIOExtension      *extension);
extern
gint               g_io_extension_get_priority                (GIOExtension      *extension);
extern
GTypeClass*        g_io_extension_ref_class                   (GIOExtension      *extension);














extern
void   g_io_module_load   (GIOModule *module);










extern
void   g_io_module_unload (GIOModule *module);


































extern
char **g_io_module_query (void);



#line 170 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/giomodule.h"
#line 89 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioscheduler.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioscheduler.h"






__declspec(deprecated("is deprecated. Use '" "\"GThreadPool or g_task_run_in_thread\"" "' instead")) extern
void     g_io_scheduler_push_job                   (GIOSchedulerJobFunc  job_func,
						    gpointer             user_data,
						    GDestroyNotify       notify,
						    gint                 io_priority,
						    GCancellable        *cancellable);
__declspec(deprecated) extern
void     g_io_scheduler_cancel_all_jobs            (void);
__declspec(deprecated("is deprecated. Use '" "g_main_context_invoke" "' instead")) extern
gboolean g_io_scheduler_job_send_to_mainloop       (GIOSchedulerJob     *job,
						    GSourceFunc          func,
						    gpointer             user_data,
						    GDestroyNotify       notify);
__declspec(deprecated("is deprecated. Use '" "g_main_context_invoke" "' instead")) extern
void     g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob     *job,
						    GSourceFunc          func,
						    gpointer             user_data,
						    GDestroyNotify       notify);



#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gioscheduler.h"
#line 90 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gloadableicon.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gloadableicon.h"
















typedef struct _GLoadableIconIface    		GLoadableIconIface;










struct _GLoadableIconIface
{
  GTypeInterface g_iface;

  

  GInputStream * (* load)        (GLoadableIcon       *icon,
                                  int                  size,
                                  char               **type,
                                  GCancellable        *cancellable,
                                  GError             **error);
  void           (* load_async)  (GLoadableIcon       *icon,
                                  int                  size,
                                  GCancellable        *cancellable,
                                  GAsyncReadyCallback  callback,
                                  gpointer             user_data);
  GInputStream * (* load_finish) (GLoadableIcon       *icon,
                                  GAsyncResult        *res,
                                  char               **type,
                                  GError             **error);
};

extern
GType         g_loadable_icon_get_type    (void) ;

extern
GInputStream *g_loadable_icon_load        (GLoadableIcon        *icon,
					   int                   size,
					   char                **type,
					   GCancellable         *cancellable,
					   GError              **error);
extern
void          g_loadable_icon_load_async  (GLoadableIcon        *icon,
					   int                   size,
					   GCancellable         *cancellable,
					   GAsyncReadyCallback   callback,
					   gpointer              user_data);
extern
GInputStream *g_loadable_icon_load_finish (GLoadableIcon        *icon,
					   GAsyncResult         *res,
					   char                **type,
					   GError              **error);



#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gloadableicon.h"
#line 92 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmemoryinputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmemoryinputstream.h"

















typedef struct _GMemoryInputStreamClass    GMemoryInputStreamClass;
typedef struct _GMemoryInputStreamPrivate  GMemoryInputStreamPrivate;

struct _GMemoryInputStream
{
  GInputStream parent_instance;

  
  GMemoryInputStreamPrivate *priv;
};

struct _GMemoryInputStreamClass
{
  GInputStreamClass parent_class;

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};


extern
GType          g_memory_input_stream_get_type      (void) ;
extern
GInputStream * g_memory_input_stream_new           (void);
extern
GInputStream * g_memory_input_stream_new_from_data (const void         *data,
                                                    gssize              len,
                                                    GDestroyNotify      destroy);
extern
GInputStream * g_memory_input_stream_new_from_bytes (GBytes            *bytes);

extern
void           g_memory_input_stream_add_data      (GMemoryInputStream *stream,
                                                    const void         *data,
                                                    gssize              len,
                                                    GDestroyNotify      destroy);
extern
void           g_memory_input_stream_add_bytes     (GMemoryInputStream     *stream,
						    GBytes                 *bytes);



#line 91 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmemoryinputstream.h"
#line 93 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmemoryoutputstream.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmemoryoutputstream.h"

















typedef struct _GMemoryOutputStreamClass    GMemoryOutputStreamClass;
typedef struct _GMemoryOutputStreamPrivate  GMemoryOutputStreamPrivate;

struct _GMemoryOutputStream
{
  GOutputStream parent_instance;

  
  GMemoryOutputStreamPrivate *priv;
};

struct _GMemoryOutputStreamClass
{
  GOutputStreamClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};













typedef gpointer (* GReallocFunc) (gpointer data,
                                   gsize    size);

extern
GType          g_memory_output_stream_get_type      (void) ;

extern
GOutputStream *g_memory_output_stream_new           (gpointer             data,
                                                     gsize                size,
                                                     GReallocFunc         realloc_function,
                                                     GDestroyNotify       destroy_function);
extern
GOutputStream *g_memory_output_stream_new_resizable (void);
extern
gpointer       g_memory_output_stream_get_data      (GMemoryOutputStream *ostream);
extern
gsize          g_memory_output_stream_get_size      (GMemoryOutputStream *ostream);
extern
gsize          g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);
extern
gpointer       g_memory_output_stream_steal_data    (GMemoryOutputStream *ostream);

extern
GBytes *       g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);



#line 108 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmemoryoutputstream.h"
#line 94 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmount.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmount.h"










typedef struct _GMountIface    GMountIface;




































struct _GMountIface
{
  GTypeInterface g_iface;

  

  void        (* changed)                   (GMount              *mount);
  void        (* unmounted)                 (GMount              *mount);

  

  GFile     * (* get_root)                  (GMount              *mount);
  char      * (* get_name)                  (GMount              *mount);
  GIcon     * (* get_icon)                  (GMount              *mount);
  char      * (* get_uuid)                  (GMount              *mount);
  GVolume   * (* get_volume)                (GMount              *mount);
  GDrive    * (* get_drive)                 (GMount              *mount);
  gboolean    (* can_unmount)               (GMount              *mount);
  gboolean    (* can_eject)                 (GMount              *mount);

  void        (* unmount)                   (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* unmount_finish)            (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* eject)                     (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_finish)              (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* remount)                   (GMount              *mount,
                                             GMountMountFlags     flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* remount_finish)            (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* guess_content_type)        (GMount              *mount,
                                             gboolean             force_rescan,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gchar    ** (* guess_content_type_finish) (GMount              *mount,
                                             GAsyncResult        *result,
                                             GError             **error);
  gchar    ** (* guess_content_type_sync)   (GMount              *mount,
                                             gboolean             force_rescan,
                                             GCancellable        *cancellable,
                                             GError             **error);

  
  void        (* pre_unmount)               (GMount              *mount);

  void        (* unmount_with_operation)    (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* unmount_with_operation_finish) (GMount          *mount,
                                             GAsyncResult        *result,
                                             GError             **error);

  void        (* eject_with_operation)      (GMount              *mount,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_with_operation_finish) (GMount            *mount,
                                             GAsyncResult        *result,
                                             GError             **error);
  GFile     * (* get_default_location)      (GMount              *mount);

  const gchar * (* get_sort_key)            (GMount              *mount);
  GIcon       * (* get_symbolic_icon)       (GMount              *mount);
};

extern
GType       g_mount_get_type                  (void) ;

extern
GFile     * g_mount_get_root                  (GMount              *mount);
extern
GFile     * g_mount_get_default_location      (GMount              *mount);
extern
char      * g_mount_get_name                  (GMount              *mount);
extern
GIcon     * g_mount_get_icon                  (GMount              *mount);
extern
GIcon     * g_mount_get_symbolic_icon         (GMount              *mount);
extern
char      * g_mount_get_uuid                  (GMount              *mount);
extern
GVolume   * g_mount_get_volume                (GMount              *mount);
extern
GDrive    * g_mount_get_drive                 (GMount              *mount);
extern
gboolean    g_mount_can_unmount               (GMount              *mount);
extern
gboolean    g_mount_can_eject                 (GMount              *mount);

__declspec(deprecated("is deprecated. Use '" "g_mount_unmount_with_operation" "' instead")) extern
void        g_mount_unmount                   (GMount              *mount,
                                               GMountUnmountFlags   flags,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);

__declspec(deprecated("is deprecated. Use '" "g_mount_unmount_with_operation_finish" "' instead")) extern
gboolean    g_mount_unmount_finish            (GMount              *mount,
                                               GAsyncResult        *result,
                                               GError             **error);

__declspec(deprecated("is deprecated. Use '" "g_mount_eject_with_operation" "' instead")) extern
void        g_mount_eject                     (GMount              *mount,
                                               GMountUnmountFlags   flags,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);

__declspec(deprecated("is deprecated. Use '" "g_mount_eject_with_operation_finish" "' instead")) extern
gboolean    g_mount_eject_finish              (GMount              *mount,
                                               GAsyncResult        *result,
                                               GError             **error);

extern
void        g_mount_remount                   (GMount              *mount,
                                               GMountMountFlags     flags,
                                               GMountOperation     *mount_operation,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);
extern
gboolean    g_mount_remount_finish            (GMount              *mount,
                                               GAsyncResult        *result,
                                               GError             **error);

extern
void        g_mount_guess_content_type        (GMount              *mount,
                                               gboolean             force_rescan,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);
extern
gchar    ** g_mount_guess_content_type_finish (GMount              *mount,
                                               GAsyncResult        *result,
                                               GError             **error);
extern
gchar    ** g_mount_guess_content_type_sync   (GMount              *mount,
                                               gboolean             force_rescan,
                                               GCancellable        *cancellable,
                                               GError             **error);

extern
gboolean    g_mount_is_shadowed               (GMount              *mount);
extern
void        g_mount_shadow                    (GMount              *mount);
extern
void        g_mount_unshadow                  (GMount              *mount);

extern
void        g_mount_unmount_with_operation    (GMount              *mount,
                                               GMountUnmountFlags   flags,
                                               GMountOperation     *mount_operation,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);
extern
gboolean    g_mount_unmount_with_operation_finish (GMount          *mount,
                                               GAsyncResult        *result,
                                               GError             **error);

extern
void        g_mount_eject_with_operation      (GMount              *mount,
                                               GMountUnmountFlags   flags,
                                               GMountOperation     *mount_operation,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);
extern
gboolean    g_mount_eject_with_operation_finish (GMount            *mount,
                                               GAsyncResult        *result,
                                               GError             **error);

extern
const gchar *g_mount_get_sort_key             (GMount              *mount);



#line 277 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmount.h"
#line 95 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmountoperation.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmountoperation.h"


















typedef struct _GMountOperationClass   GMountOperationClass;
typedef struct _GMountOperationPrivate GMountOperationPrivate;

struct _GMountOperation
{
  GObject parent_instance;

  GMountOperationPrivate *priv;
};

struct _GMountOperationClass
{
  GObjectClass parent_class;

  

  void (* ask_password) (GMountOperation       *op,
			 const char            *message,
			 const char            *default_user,
			 const char            *default_domain,
			 GAskPasswordFlags      flags);

  void (* ask_question) (GMountOperation       *op,
			 const char            *message,
			 const char            *choices[]);

  void (* reply)        (GMountOperation       *op,
			 GMountOperationResult  result);

  void (* aborted)      (GMountOperation       *op);

  void (* show_processes) (GMountOperation      *op,
                           const gchar          *message,
                           GArray               *processes,
                           const gchar          *choices[]);

  void (* show_unmount_progress) (GMountOperation *op,
                                  const gchar     *message,
                                  gint64           time_left,
                                  gint64           bytes_left);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
};

extern
GType             g_mount_operation_get_type      (void) ;
extern
GMountOperation * g_mount_operation_new           (void);

extern
const char *  g_mount_operation_get_username      (GMountOperation *op);
extern
void          g_mount_operation_set_username      (GMountOperation *op,
						   const char      *username);
extern
const char *  g_mount_operation_get_password      (GMountOperation *op);
extern
void          g_mount_operation_set_password      (GMountOperation *op,
						   const char      *password);
extern
gboolean      g_mount_operation_get_anonymous     (GMountOperation *op);
extern
void          g_mount_operation_set_anonymous     (GMountOperation *op,
						   gboolean         anonymous);
extern
const char *  g_mount_operation_get_domain        (GMountOperation *op);
extern
void          g_mount_operation_set_domain        (GMountOperation *op,
						   const char      *domain);
extern
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);
extern
void          g_mount_operation_set_password_save (GMountOperation *op,
						   GPasswordSave    save);
extern
int           g_mount_operation_get_choice        (GMountOperation *op);
extern
void          g_mount_operation_set_choice        (GMountOperation *op,
						   int              choice);
extern
void          g_mount_operation_reply             (GMountOperation *op,
						   GMountOperationResult result);



#line 141 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmountoperation.h"
#line 96 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnativevolumemonitor.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnativevolumemonitor.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvolumemonitor.h"




























#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvolumemonitor.h"

























typedef struct _GVolumeMonitorClass GVolumeMonitorClass;

struct _GVolumeMonitor
{
  GObject parent_instance;

  
  gpointer priv;
};

struct _GVolumeMonitorClass
{
  GObjectClass parent_class;

  
  
  void      (* volume_added)         (GVolumeMonitor *volume_monitor,
                                      GVolume        *volume);
  void      (* volume_removed)       (GVolumeMonitor *volume_monitor,
                                      GVolume        *volume);
  void      (* volume_changed)       (GVolumeMonitor *volume_monitor,
                                      GVolume        *volume);

  void      (* mount_added)          (GVolumeMonitor *volume_monitor,
                                      GMount         *mount);
  void      (* mount_removed)        (GVolumeMonitor *volume_monitor,
                                      GMount         *mount);
  void      (* mount_pre_unmount)    (GVolumeMonitor *volume_monitor,
                                      GMount         *mount);
  void      (* mount_changed)        (GVolumeMonitor *volume_monitor,
                                      GMount         *mount);

  void      (* drive_connected)      (GVolumeMonitor *volume_monitor,
                                      GDrive	     *drive);
  void      (* drive_disconnected)   (GVolumeMonitor *volume_monitor,
                                      GDrive         *drive);
  void      (* drive_changed)        (GVolumeMonitor *volume_monitor,
                                      GDrive         *drive);

  

  gboolean  (* is_supported)         (void);

  GList   * (* get_connected_drives) (GVolumeMonitor *volume_monitor);
  GList   * (* get_volumes)          (GVolumeMonitor *volume_monitor);
  GList   * (* get_mounts)           (GVolumeMonitor *volume_monitor);

  GVolume * (* get_volume_for_uuid)  (GVolumeMonitor *volume_monitor,
                                      const char     *uuid);

  GMount  * (* get_mount_for_uuid)   (GVolumeMonitor *volume_monitor,
                                      const char     *uuid);


  
  GVolume * (* adopt_orphan_mount)   (GMount         *mount,
                                      GVolumeMonitor *volume_monitor);

  
  void      (* drive_eject_button)   (GVolumeMonitor *volume_monitor,
                                      GDrive         *drive);

  
  void      (* drive_stop_button)   (GVolumeMonitor *volume_monitor,
                                     GDrive         *drive);

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

extern
GType           g_volume_monitor_get_type             (void) ;

extern
GVolumeMonitor *g_volume_monitor_get                  (void);
extern
GList *         g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);
extern
GList *         g_volume_monitor_get_volumes          (GVolumeMonitor *volume_monitor);
extern
GList *         g_volume_monitor_get_mounts           (GVolumeMonitor *volume_monitor);
extern
GVolume *       g_volume_monitor_get_volume_for_uuid  (GVolumeMonitor *volume_monitor,
                                                       const char     *uuid);
extern
GMount *        g_volume_monitor_get_mount_for_uuid   (GVolumeMonitor *volume_monitor,
                                                       const char     *uuid);

__declspec(deprecated) extern
GVolume *       g_volume_monitor_adopt_orphan_mount   (GMount         *mount);



#line 155 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvolumemonitor.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnativevolumemonitor.h"











typedef struct _GNativeVolumeMonitor      GNativeVolumeMonitor;
typedef struct _GNativeVolumeMonitorClass GNativeVolumeMonitorClass;

struct _GNativeVolumeMonitor
{
  GVolumeMonitor parent_instance;
};

struct _GNativeVolumeMonitorClass
{
  GVolumeMonitorClass parent_class;

  GMount * (* get_mount_for_mount_path) (const char   *mount_path,
                                         GCancellable *cancellable);
};

extern
GType g_native_volume_monitor_get_type (void) ;



#line 62 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnativevolumemonitor.h"
#line 97 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkaddress.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkaddress.h"












typedef struct _GNetworkAddressClass   GNetworkAddressClass;
typedef struct _GNetworkAddressPrivate GNetworkAddressPrivate;

struct _GNetworkAddress
{
  GObject parent_instance;

  
  GNetworkAddressPrivate *priv;
};

struct _GNetworkAddressClass
{
  GObjectClass parent_class;

};

extern
GType               g_network_address_get_type     (void) ;

extern
GSocketConnectable *g_network_address_new          (const gchar      *hostname,
						    guint16           port);
extern
GSocketConnectable *g_network_address_new_loopback (guint16           port);
extern
GSocketConnectable *g_network_address_parse        (const gchar      *host_and_port,
						    guint16           default_port,
						    GError          **error);
extern
GSocketConnectable *g_network_address_parse_uri    (const gchar      *uri,
    						    guint16           default_port,
						    GError          **error);
extern
const gchar        *g_network_address_get_hostname (GNetworkAddress  *addr);
extern
guint16             g_network_address_get_port     (GNetworkAddress  *addr);
extern
const gchar        *g_network_address_get_scheme   (GNetworkAddress  *addr);




#line 81 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkaddress.h"
#line 98 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkmonitor.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkmonitor.h"




















typedef struct _GNetworkMonitorInterface GNetworkMonitorInterface;

struct _GNetworkMonitorInterface {
  GTypeInterface g_iface;

  void     (*network_changed)  (GNetworkMonitor      *monitor,
				gboolean              available);

  gboolean (*can_reach)        (GNetworkMonitor      *monitor,
				GSocketConnectable   *connectable,
				GCancellable         *cancellable,
				GError              **error);
  void     (*can_reach_async)  (GNetworkMonitor      *monitor,
				GSocketConnectable   *connectable,
				GCancellable         *cancellable,
				GAsyncReadyCallback   callback,
				gpointer              user_data);
  gboolean (*can_reach_finish) (GNetworkMonitor      *monitor,
				GAsyncResult         *result,
				GError              **error);
};

extern
GType                 g_network_monitor_get_type              (void) ;
extern
GNetworkMonitor      *g_network_monitor_get_default           (void);

extern
gboolean              g_network_monitor_get_network_available (GNetworkMonitor     *monitor);

extern
gboolean              g_network_monitor_get_network_metered   (GNetworkMonitor     *monitor);

extern
GNetworkConnectivity  g_network_monitor_get_connectivity      (GNetworkMonitor     *monitor);

extern
gboolean              g_network_monitor_can_reach             (GNetworkMonitor     *monitor,
                                                               GSocketConnectable  *connectable,
                                                               GCancellable        *cancellable,
                                                               GError             **error);
extern
void                  g_network_monitor_can_reach_async       (GNetworkMonitor     *monitor,
                                                               GSocketConnectable  *connectable,
                                                               GCancellable        *cancellable,
                                                               GAsyncReadyCallback  callback,
                                                               gpointer             user_data);
extern
gboolean              g_network_monitor_can_reach_finish      (GNetworkMonitor     *monitor,
                                                               GAsyncResult        *result,
                                                               GError             **error);



#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkmonitor.h"
#line 99 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkservice.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkservice.h"












typedef struct _GNetworkServiceClass   GNetworkServiceClass;
typedef struct _GNetworkServicePrivate GNetworkServicePrivate;

struct _GNetworkService
{
  GObject parent_instance;

  
  GNetworkServicePrivate *priv;
};

struct _GNetworkServiceClass
{
  GObjectClass parent_class;

};

extern
GType                g_network_service_get_type      (void) ;

extern
GSocketConnectable  *g_network_service_new           (const gchar     *service,
						      const gchar     *protocol,
						      const gchar     *domain);

extern
const gchar         *g_network_service_get_service   (GNetworkService *srv);
extern
const gchar         *g_network_service_get_protocol  (GNetworkService *srv);
extern
const gchar         *g_network_service_get_domain    (GNetworkService *srv);
extern
const gchar         *g_network_service_get_scheme    (GNetworkService *srv);
extern
void                 g_network_service_set_scheme    (GNetworkService *srv, const gchar *scheme);



#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnetworkservice.h"

#line 100 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpermission.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpermission.h"

















typedef struct _GPermissionPrivate    GPermissionPrivate;
typedef struct _GPermissionClass      GPermissionClass;

struct _GPermission
{
  GObject parent_instance;

  
  GPermissionPrivate *priv;
};

struct _GPermissionClass {
  GObjectClass parent_class;

  gboolean (*acquire)        (GPermission          *permission,
                              GCancellable         *cancellable,
                              GError              **error);
  void     (*acquire_async)  (GPermission          *permission,
                              GCancellable         *cancellable,
                              GAsyncReadyCallback   callback,
                              gpointer              user_data);
  gboolean (*acquire_finish) (GPermission          *permission,
                              GAsyncResult         *result,
                              GError              **error);

  gboolean (*release)        (GPermission          *permission,
                              GCancellable         *cancellable,
                              GError              **error);
  void     (*release_async)  (GPermission          *permission,
                              GCancellable         *cancellable,
                              GAsyncReadyCallback   callback,
                              gpointer              user_data);
  gboolean (*release_finish) (GPermission          *permission,
                              GAsyncResult         *result,
                              GError              **error);

  gpointer reserved[16];
};

extern
GType           g_permission_get_type           (void);
extern
gboolean        g_permission_acquire            (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GError              **error);
extern
void            g_permission_acquire_async      (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GAsyncReadyCallback   callback,
                                                 gpointer              user_data);
extern
gboolean        g_permission_acquire_finish     (GPermission          *permission,
                                                 GAsyncResult         *result,
                                                 GError              **error);

extern
gboolean        g_permission_release            (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GError              **error);
extern
void            g_permission_release_async      (GPermission          *permission,
                                                 GCancellable         *cancellable,
                                                 GAsyncReadyCallback   callback,
                                                 gpointer              user_data);
extern
gboolean        g_permission_release_finish     (GPermission          *permission,
                                                 GAsyncResult         *result,
                                                 GError              **error);

extern
gboolean        g_permission_get_allowed        (GPermission   *permission);
extern
gboolean        g_permission_get_can_acquire    (GPermission   *permission);
extern
gboolean        g_permission_get_can_release    (GPermission   *permission);

extern
void            g_permission_impl_update        (GPermission  *permission,
                                                 gboolean      allowed,
                                                 gboolean      can_acquire,
                                                 gboolean      can_release);



#line 128 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpermission.h"
#line 102 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableinputstream.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableinputstream.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
















































































































































































#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableinputstream.h"















typedef struct _GPollableInputStreamInterface GPollableInputStreamInterface;























struct _GPollableInputStreamInterface
{
  GTypeInterface g_iface;

  
  gboolean     (*can_poll)         (GPollableInputStream  *stream);

  gboolean     (*is_readable)      (GPollableInputStream  *stream);
  GSource *    (*create_source)    (GPollableInputStream  *stream,
				    GCancellable          *cancellable);
  gssize       (*read_nonblocking) (GPollableInputStream  *stream,
				    void                  *buffer,
				    gsize                  count,
				    GError               **error);
};

extern
GType    g_pollable_input_stream_get_type         (void) ;

extern
gboolean g_pollable_input_stream_can_poll         (GPollableInputStream  *stream);

extern
gboolean g_pollable_input_stream_is_readable      (GPollableInputStream  *stream);
extern
GSource *g_pollable_input_stream_create_source    (GPollableInputStream  *stream,
						   GCancellable          *cancellable);

extern
gssize   g_pollable_input_stream_read_nonblocking (GPollableInputStream  *stream,
						   void                  *buffer,
						   gsize                  count,
						   GCancellable          *cancellable,
						   GError               **error);




#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableinputstream.h"

#line 103 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableoutputstream.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableoutputstream.h"

















typedef struct _GPollableOutputStreamInterface GPollableOutputStreamInterface;























struct _GPollableOutputStreamInterface
{
  GTypeInterface g_iface;

  
  gboolean     (*can_poll)          (GPollableOutputStream  *stream);

  gboolean     (*is_writable)       (GPollableOutputStream  *stream);
  GSource *    (*create_source)     (GPollableOutputStream  *stream,
				     GCancellable           *cancellable);
  gssize       (*write_nonblocking) (GPollableOutputStream  *stream,
				     const void             *buffer,
				     gsize                   count,
				     GError                **error);
};

extern
GType    g_pollable_output_stream_get_type          (void) ;

extern
gboolean g_pollable_output_stream_can_poll          (GPollableOutputStream  *stream);

extern
gboolean g_pollable_output_stream_is_writable       (GPollableOutputStream  *stream);
extern
GSource *g_pollable_output_stream_create_source     (GPollableOutputStream  *stream,
						     GCancellable           *cancellable);

extern
gssize   g_pollable_output_stream_write_nonblocking (GPollableOutputStream  *stream,
						     const void             *buffer,
						     gsize                   count,
						     GCancellable           *cancellable,
						     GError                **error);




#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableoutputstream.h"

#line 104 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableutils.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableutils.h"





extern
GSource *g_pollable_source_new       (GObject        *pollable_stream);

extern
GSource *g_pollable_source_new_full  (gpointer        pollable_stream,
				      GSource        *child_source,
				      GCancellable   *cancellable);

extern
gssize   g_pollable_stream_read      (GInputStream   *stream,
				      void           *buffer,
				      gsize           count,
				      gboolean        blocking,
				      GCancellable   *cancellable,
				      GError        **error);

extern
gssize   g_pollable_stream_write     (GOutputStream  *stream,
				      const void     *buffer,
				      gsize           count,
				      gboolean        blocking,
				      GCancellable   *cancellable,
				      GError        **error);
extern
gboolean g_pollable_stream_write_all (GOutputStream  *stream,
				      const void     *buffer,
				      gsize           count,
				      gboolean        blocking,
				      gsize          *bytes_written,
				      GCancellable   *cancellable,
				      GError        **error);



#line 65 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpollableutils.h"
#line 105 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpropertyaction.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpropertyaction.h"











extern
GType                   g_property_action_get_type                      (void) ;

extern
GPropertyAction *       g_property_action_new                           (const gchar *name,
                                                                         gpointer     object,
                                                                         const gchar *property_name);



#line 48 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gpropertyaction.h"
#line 106 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxy.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxy.h"



























typedef struct _GProxyInterface GProxyInterface;














struct _GProxyInterface
{
  GTypeInterface g_iface;

  

  GIOStream * (* connect)           (GProxy               *proxy,
				     GIOStream            *connection,
				     GProxyAddress        *proxy_address,
				     GCancellable         *cancellable,
				     GError              **error);

  void        (* connect_async)     (GProxy               *proxy,
				     GIOStream            *connection,
				     GProxyAddress	  *proxy_address,
				     GCancellable         *cancellable,
				     GAsyncReadyCallback   callback,
				     gpointer              user_data);

  GIOStream * (* connect_finish)    (GProxy               *proxy,
				     GAsyncResult         *result,
				     GError              **error);

  gboolean    (* supports_hostname) (GProxy             *proxy);
};

extern
GType      g_proxy_get_type                 (void) ;

extern
GProxy    *g_proxy_get_default_for_protocol (const gchar *protocol);

extern
GIOStream *g_proxy_connect           (GProxy               *proxy,
				      GIOStream            *connection,
				      GProxyAddress        *proxy_address,
				      GCancellable         *cancellable,
				      GError              **error);

extern
void       g_proxy_connect_async     (GProxy               *proxy,
				      GIOStream            *connection,
				      GProxyAddress        *proxy_address,
				      GCancellable         *cancellable,
				      GAsyncReadyCallback   callback,
				      gpointer              user_data);

extern
GIOStream *g_proxy_connect_finish    (GProxy               *proxy,
				      GAsyncResult         *result,
				      GError              **error);

extern
gboolean   g_proxy_supports_hostname (GProxy               *proxy);



#line 129 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxy.h"
#line 107 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddress.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddress.h"












typedef struct _GProxyAddressClass   GProxyAddressClass;
typedef struct _GProxyAddressPrivate GProxyAddressPrivate;

struct _GProxyAddress
{
  GInetSocketAddress parent_instance;

  
  GProxyAddressPrivate *priv;
};

struct _GProxyAddressClass
{
  GInetSocketAddressClass parent_class;
};


extern
GType           g_proxy_address_get_type    (void) ;

extern
GSocketAddress *g_proxy_address_new         (GInetAddress *inetaddr,
					     guint16       port,
					     const gchar  *protocol,
					     const gchar  *dest_hostname,
		                             guint16       dest_port,
					     const gchar  *username,
					     const gchar  *password);

extern
const gchar    *g_proxy_address_get_protocol                (GProxyAddress *proxy);
extern
const gchar    *g_proxy_address_get_destination_protocol    (GProxyAddress *proxy);
extern
const gchar    *g_proxy_address_get_destination_hostname    (GProxyAddress *proxy);
extern
guint16         g_proxy_address_get_destination_port        (GProxyAddress *proxy);
extern
const gchar    *g_proxy_address_get_username                (GProxyAddress *proxy);
extern
const gchar    *g_proxy_address_get_password                (GProxyAddress *proxy);

extern
const gchar    *g_proxy_address_get_uri                     (GProxyAddress *proxy);



#line 87 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddress.h"
#line 108 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddressenumerator.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddressenumerator.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketaddressenumerator.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketaddressenumerator.h"


















typedef struct _GSocketAddressEnumeratorClass GSocketAddressEnumeratorClass;

struct _GSocketAddressEnumerator
{
  GObject parent_instance;

};

struct _GSocketAddressEnumeratorClass
{
  GObjectClass parent_class;

  

  GSocketAddress * (* next)        (GSocketAddressEnumerator  *enumerator,
				    GCancellable              *cancellable,
				    GError                   **error);

  void             (* next_async)  (GSocketAddressEnumerator  *enumerator,
				    GCancellable              *cancellable,
				    GAsyncReadyCallback        callback,
				    gpointer                   user_data);
  GSocketAddress * (* next_finish) (GSocketAddressEnumerator  *enumerator,
				    GAsyncResult              *result,
				    GError                   **error);
};

extern
GType           g_socket_address_enumerator_get_type        (void) ;

extern
GSocketAddress *g_socket_address_enumerator_next        (GSocketAddressEnumerator  *enumerator,
							 GCancellable              *cancellable,
							 GError                   **error);

extern
void            g_socket_address_enumerator_next_async  (GSocketAddressEnumerator  *enumerator,
							 GCancellable              *cancellable,
							 GAsyncReadyCallback        callback,
							 gpointer                   user_data);
extern
GSocketAddress *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator  *enumerator,
							 GAsyncResult              *result,
							 GError                   **error);




#line 92 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketaddressenumerator.h"
#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddressenumerator.h"


















typedef struct _GProxyAddressEnumeratorClass GProxyAddressEnumeratorClass;
typedef struct _GProxyAddressEnumeratorPrivate GProxyAddressEnumeratorPrivate;

struct _GProxyAddressEnumerator
{
  GSocketAddressEnumerator parent_instance;
  GProxyAddressEnumeratorPrivate *priv;
};

struct _GProxyAddressEnumeratorClass
{
  GSocketAddressEnumeratorClass parent_class;

  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
};

extern
GType           g_proxy_address_enumerator_get_type    (void) ;



#line 75 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyaddressenumerator.h"
#line 109 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyresolver.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyresolver.h"


















typedef struct _GProxyResolverInterface GProxyResolverInterface;

struct _GProxyResolverInterface {
  GTypeInterface g_iface;

  
  gboolean (* is_supported)  (GProxyResolver       *resolver);

  gchar	** (* lookup)        (GProxyResolver       *resolver,
			      const gchar          *uri,
			      GCancellable         *cancellable,
			      GError              **error);

  void     (* lookup_async)  (GProxyResolver       *resolver,
			      const gchar          *uri,
			      GCancellable         *cancellable,
			      GAsyncReadyCallback   callback,
			      gpointer              user_data);

  gchar	** (* lookup_finish) (GProxyResolver       *resolver,
			      GAsyncResult         *result,
			      GError              **error);
};

extern
GType		g_proxy_resolver_get_type       (void) ;
extern
GProxyResolver *g_proxy_resolver_get_default    (void);

extern
gboolean        g_proxy_resolver_is_supported   (GProxyResolver       *resolver);
extern
gchar	      **g_proxy_resolver_lookup		(GProxyResolver       *resolver,
						 const gchar          *uri,
						 GCancellable         *cancellable,
						 GError              **error);
extern
void		g_proxy_resolver_lookup_async   (GProxyResolver       *resolver,
						 const gchar          *uri,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
extern
gchar	      **g_proxy_resolver_lookup_finish  (GProxyResolver       *resolver,
						 GAsyncResult         *result,
						 GError              **error);




#line 96 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gproxyresolver.h"
#line 110 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gresolver.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gresolver.h"












typedef struct _GResolverPrivate GResolverPrivate;
typedef struct _GResolverClass   GResolverClass;

struct _GResolver {
  GObject parent_instance;

  GResolverPrivate *priv;
};

struct _GResolverClass {
  GObjectClass parent_class;

  
  void    ( *reload)                   (GResolver            *resolver);

  
  GList * ( *lookup_by_name)           (GResolver            *resolver,
					const gchar          *hostname,
					GCancellable         *cancellable,
					GError              **error);
  void    ( *lookup_by_name_async)     (GResolver            *resolver,
					const gchar          *hostname,
					GCancellable         *cancellable,
					GAsyncReadyCallback   callback,
					gpointer              user_data);
  GList * ( *lookup_by_name_finish)    (GResolver            *resolver,
					GAsyncResult         *result,
					GError              **error);

  gchar * ( *lookup_by_address)        (GResolver            *resolver,
					GInetAddress         *address,
					GCancellable         *cancellable,
					GError              **error);
  void    ( *lookup_by_address_async)  (GResolver            *resolver,
					GInetAddress         *address,
					GCancellable         *cancellable,
					GAsyncReadyCallback   callback,
					gpointer              user_data);
  gchar * ( *lookup_by_address_finish) (GResolver            *resolver,
					GAsyncResult         *result,
					GError              **error);

  GList * ( *lookup_service)           (GResolver            *resolver,
					const gchar          *rrname,
					GCancellable         *cancellable,
					GError              **error);
  void    ( *lookup_service_async)     (GResolver            *resolver,
					const gchar          *rrname,
					GCancellable         *cancellable,
					GAsyncReadyCallback   callback,
					gpointer              user_data);
  GList * ( *lookup_service_finish)    (GResolver            *resolver,
					GAsyncResult         *result,
					GError              **error);

  GList * ( *lookup_records)           (GResolver            *resolver,
                                        const gchar          *rrname,
                                        GResolverRecordType   record_type,
                                        GCancellable         *cancellable,
                                        GError              **error);

  void    ( *lookup_records_async)     (GResolver            *resolver,
                                        const gchar          *rrname,
                                        GResolverRecordType   record_type,
                                        GCancellable         *cancellable,
                                        GAsyncReadyCallback   callback,
                                        gpointer              user_data);

  GList * ( *lookup_records_finish)    (GResolver            *resolver,
                                        GAsyncResult         *result,
                                        GError              **error);

  
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);

};

extern
GType      g_resolver_get_type                  (void) ;
extern
GResolver *g_resolver_get_default               (void);
extern
void       g_resolver_set_default               (GResolver            *resolver);

extern
GList     *g_resolver_lookup_by_name            (GResolver            *resolver,
						 const gchar          *hostname,
						 GCancellable         *cancellable,
						 GError              **error);
extern
void       g_resolver_lookup_by_name_async      (GResolver            *resolver,
						 const gchar          *hostname,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
extern
GList     *g_resolver_lookup_by_name_finish     (GResolver            *resolver,
						 GAsyncResult         *result,
						 GError              **error);

extern
void       g_resolver_free_addresses            (GList                *addresses);

extern
gchar     *g_resolver_lookup_by_address         (GResolver            *resolver,
						 GInetAddress         *address,
						 GCancellable         *cancellable,
						 GError              **error);
extern
void       g_resolver_lookup_by_address_async   (GResolver            *resolver,
						 GInetAddress         *address,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
extern
gchar     *g_resolver_lookup_by_address_finish  (GResolver            *resolver,
						 GAsyncResult         *result,
						 GError              **error);

extern
GList     *g_resolver_lookup_service            (GResolver            *resolver,
						 const gchar          *service,
						 const gchar          *protocol,
						 const gchar          *domain,
						 GCancellable         *cancellable,
						 GError              **error);
extern
void       g_resolver_lookup_service_async      (GResolver            *resolver,
						 const gchar          *service,
						 const gchar          *protocol,
						 const gchar          *domain,
						 GCancellable         *cancellable,
						 GAsyncReadyCallback   callback,
						 gpointer              user_data);
extern
GList     *g_resolver_lookup_service_finish     (GResolver            *resolver,
						 GAsyncResult         *result,
						 GError              **error);

extern
GList     *g_resolver_lookup_records            (GResolver            *resolver,
                                                 const gchar          *rrname,
                                                 GResolverRecordType   record_type,
                                                 GCancellable         *cancellable,
                                                 GError              **error);
extern
void       g_resolver_lookup_records_async      (GResolver            *resolver,
                                                 const gchar          *rrname,
                                                 GResolverRecordType   record_type,
                                                 GCancellable         *cancellable,
                                                 GAsyncReadyCallback   callback,
                                                 gpointer              user_data);
extern
GList     *g_resolver_lookup_records_finish     (GResolver            *resolver,
                                                 GAsyncResult         *result,
                                                 GError              **error);

extern
void       g_resolver_free_targets              (GList                *targets);









extern
GQuark g_resolver_error_quark (void);



#line 213 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gresolver.h"
#line 111 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gresource.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gresource.h"





















extern
GQuark g_resource_error_quark (void);

typedef struct _GStaticResource GStaticResource;

struct _GStaticResource {
  
  const guint8 *data;
  gsize data_len;
  GResource *resource;
  GStaticResource *next;
  gpointer padding;
};

extern
GType         g_resource_get_type            (void) ;
extern
GResource *   g_resource_new_from_data       (GBytes                *data,
					      GError               **error);
extern
GResource *   g_resource_ref                 (GResource             *resource);
extern
void          g_resource_unref               (GResource             *resource);
extern
GResource *   g_resource_load                (const gchar           *filename,
					      GError               **error);
extern
GInputStream *g_resource_open_stream         (GResource             *resource,
					      const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      GError               **error);
extern
GBytes *      g_resource_lookup_data         (GResource             *resource,
					      const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      GError               **error);
extern
char **       g_resource_enumerate_children  (GResource             *resource,
					      const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      GError               **error);
extern
gboolean      g_resource_get_info            (GResource             *resource,
					      const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      gsize                 *size,
					      guint32               *flags,
					      GError               **error);

extern
void          g_resources_register           (GResource             *resource);
extern
void          g_resources_unregister         (GResource             *resource);
extern
GInputStream *g_resources_open_stream        (const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      GError               **error);
extern
GBytes *      g_resources_lookup_data        (const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      GError               **error);
extern
char **       g_resources_enumerate_children (const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      GError               **error);
extern
gboolean      g_resources_get_info           (const char            *path,
					      GResourceLookupFlags   lookup_flags,
					      gsize                 *size,
					      guint32               *flags,
					      GError               **error);


extern
void          g_static_resource_init          (GStaticResource *static_resource);
extern
void          g_static_resource_fini          (GStaticResource *static_resource);
extern
GResource    *g_static_resource_get_resource  (GStaticResource *static_resource);



#line 131 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gresource.h"
#line 112 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gseekable.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gseekable.h"















typedef struct _GSeekableIface   GSeekableIface;












struct _GSeekableIface
{
  GTypeInterface g_iface;

  

  goffset     (* tell)	         (GSeekable    *seekable);

  gboolean    (* can_seek)       (GSeekable    *seekable);
  gboolean    (* seek)	         (GSeekable    *seekable,
				  goffset       offset,
				  GSeekType     type,
				  GCancellable *cancellable,
				  GError      **error);

  gboolean    (* can_truncate)   (GSeekable    *seekable);
  gboolean    (* truncate_fn)    (GSeekable    *seekable,
				  goffset       offset,
				  GCancellable *cancellable,
				  GError       **error);

  
};

extern
GType    g_seekable_get_type     (void) ;

extern
goffset  g_seekable_tell         (GSeekable     *seekable);
extern
gboolean g_seekable_can_seek     (GSeekable     *seekable);
extern
gboolean g_seekable_seek         (GSeekable     *seekable,
				  goffset        offset,
				  GSeekType      type,
				  GCancellable  *cancellable,
				  GError       **error);
extern
gboolean g_seekable_can_truncate (GSeekable     *seekable);
extern
gboolean g_seekable_truncate     (GSeekable     *seekable,
				  goffset        offset,
				  GCancellable  *cancellable,
				  GError       **error);




#line 104 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gseekable.h"
#line 113 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsettingsschema.h"

























typedef struct _GSettingsSchemaSource                       GSettingsSchemaSource;
typedef struct _GSettingsSchema                             GSettingsSchema;
typedef struct _GSettingsSchemaKey                          GSettingsSchemaKey;


extern
GType                   g_settings_schema_source_get_type               (void) ;

extern
GSettingsSchemaSource * g_settings_schema_source_get_default            (void);
extern
GSettingsSchemaSource * g_settings_schema_source_ref                    (GSettingsSchemaSource  *source);
extern
void                    g_settings_schema_source_unref                  (GSettingsSchemaSource  *source);

extern
GSettingsSchemaSource * g_settings_schema_source_new_from_directory     (const gchar            *directory,
                                                                         GSettingsSchemaSource  *parent,
                                                                         gboolean                trusted,
                                                                         GError                **error);

extern
GSettingsSchema *       g_settings_schema_source_lookup                 (GSettingsSchemaSource  *source,
                                                                         const gchar            *schema_id,
                                                                         gboolean                recursive);

extern
void                    g_settings_schema_source_list_schemas           (GSettingsSchemaSource   *source,
                                                                         gboolean                 recursive,
                                                                         gchar                 ***non_relocatable,
                                                                         gchar                 ***relocatable);


extern
GType                   g_settings_schema_get_type                      (void) ;

extern
GSettingsSchema *       g_settings_schema_ref                           (GSettingsSchema        *schema);
extern
void                    g_settings_schema_unref                         (GSettingsSchema        *schema);

extern
const gchar *           g_settings_schema_get_id                        (GSettingsSchema        *schema);
extern
const gchar *           g_settings_schema_get_path                      (GSettingsSchema        *schema);
extern
GSettingsSchemaKey *    g_settings_schema_get_key                       (GSettingsSchema        *schema,
                                                                         const gchar            *name);
extern
gboolean                g_settings_schema_has_key                       (GSettingsSchema        *schema,
                                                                         const gchar            *name);
extern
gchar**                 g_settings_schema_list_keys                     (GSettingsSchema        *schema);


extern
gchar **                g_settings_schema_list_children                 (GSettingsSchema        *schema);


extern
GType                   g_settings_schema_key_get_type                  (void) ;

extern
GSettingsSchemaKey *    g_settings_schema_key_ref                       (GSettingsSchemaKey     *key);
extern
void                    g_settings_schema_key_unref                     (GSettingsSchemaKey     *key);

extern
const GVariantType *    g_settings_schema_key_get_value_type            (GSettingsSchemaKey     *key);
extern
GVariant *              g_settings_schema_key_get_default_value         (GSettingsSchemaKey     *key);
extern
GVariant *              g_settings_schema_key_get_range                 (GSettingsSchemaKey     *key);
extern
gboolean                g_settings_schema_key_range_check               (GSettingsSchemaKey     *key,
                                                                         GVariant               *value);

extern
const gchar *           g_settings_schema_key_get_name                  (GSettingsSchemaKey     *key);
extern
const gchar *           g_settings_schema_key_get_summary               (GSettingsSchemaKey     *key);
extern
const gchar *           g_settings_schema_key_get_description           (GSettingsSchemaKey     *key);



#line 113 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsettingsschema.h"
#line 114 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsettings.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsettings.h"
















typedef struct _GSettingsPrivate                            GSettingsPrivate;
typedef struct _GSettingsClass                              GSettingsClass;

struct _GSettingsClass
{
  GObjectClass parent_class;

  
  void        (*writable_changed)      (GSettings    *settings,
                                        const gchar  *key);
  void        (*changed)               (GSettings    *settings,
                                        const gchar  *key);
  gboolean    (*writable_change_event) (GSettings    *settings,
                                        GQuark        key);
  gboolean    (*change_event)          (GSettings    *settings,
                                        const GQuark *keys,
                                        gint          n_keys);

  gpointer padding[20];
};

struct _GSettings
{
  GObject parent_instance;
  GSettingsPrivate *priv;
};


extern
GType                   g_settings_get_type                             (void);

__declspec(deprecated("is deprecated. Use '" "g_settings_schema_source_list_schemas" "' instead")) extern
const gchar * const *   g_settings_list_schemas                         (void);
__declspec(deprecated("is deprecated. Use '" "g_settings_schema_source_list_schemas" "' instead")) extern
const gchar * const *   g_settings_list_relocatable_schemas             (void);
extern
GSettings *             g_settings_new                                  (const gchar        *schema_id);
extern
GSettings *             g_settings_new_with_path                        (const gchar        *schema_id,
                                                                         const gchar        *path);
extern
GSettings *             g_settings_new_with_backend                     (const gchar        *schema_id,
                                                                         GSettingsBackend   *backend);
extern
GSettings *             g_settings_new_with_backend_and_path            (const gchar        *schema_id,
                                                                         GSettingsBackend   *backend,
                                                                         const gchar        *path);
extern
GSettings *             g_settings_new_full                             (GSettingsSchema    *schema,
                                                                         GSettingsBackend   *backend,
                                                                         const gchar        *path);
extern
gchar **                g_settings_list_children                        (GSettings          *settings);
__declspec(deprecated("is deprecated. Use '" "g_settings_schema_list_keys" "' instead")) extern
gchar **                g_settings_list_keys                            (GSettings          *settings);
__declspec(deprecated("is deprecated. Use '" "g_settings_schema_key_get_range" "' instead")) extern
GVariant *              g_settings_get_range                            (GSettings          *settings,
                                                                         const gchar        *key);
__declspec(deprecated("is deprecated. Use '" "g_settings_schema_key_range_check" "' instead")) extern
gboolean                g_settings_range_check                          (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         GVariant           *value);

extern
gboolean                g_settings_set_value                            (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         GVariant           *value);
extern
GVariant *              g_settings_get_value                            (GSettings          *settings,
                                                                         const gchar        *key);

extern
GVariant *              g_settings_get_user_value                       (GSettings          *settings,
                                                                         const gchar        *key);
extern
GVariant *              g_settings_get_default_value                    (GSettings          *settings,
                                                                         const gchar        *key);

extern
gboolean                g_settings_set                                  (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         const gchar        *format,
                                                                         ...);
extern
void                    g_settings_get                                  (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         const gchar        *format,
                                                                         ...);
extern
void                    g_settings_reset                                (GSettings          *settings,
                                                                         const gchar        *key);

extern
gint                    g_settings_get_int                              (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_int                              (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         gint                value);
extern
gint64                  g_settings_get_int64                            (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_int64                            (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         gint64              value);
extern
guint                   g_settings_get_uint                             (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_uint                             (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         guint               value);
extern
guint64                 g_settings_get_uint64                           (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_uint64                           (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         guint64             value);
extern
gchar *                 g_settings_get_string                           (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_string                           (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         const gchar        *value);
extern
gboolean                g_settings_get_boolean                          (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_boolean                          (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         gboolean            value);
extern
gdouble                 g_settings_get_double                           (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_double                           (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         gdouble             value);
extern
gchar **                g_settings_get_strv                             (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_strv                             (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         const gchar *const *value);
extern
gint                    g_settings_get_enum                             (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_enum                             (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         gint                value);
extern
guint                   g_settings_get_flags                            (GSettings          *settings,
                                                                         const gchar        *key);
extern
gboolean                g_settings_set_flags                            (GSettings          *settings,
                                                                         const gchar        *key,
                                                                         guint               value);
extern
GSettings *             g_settings_get_child                            (GSettings          *settings,
                                                                         const gchar        *name);

extern
gboolean                g_settings_is_writable                          (GSettings          *settings,
                                                                         const gchar        *name);

extern
void                    g_settings_delay                                (GSettings          *settings);
extern
void                    g_settings_apply                                (GSettings          *settings);
extern
void                    g_settings_revert                               (GSettings          *settings);
extern
gboolean                g_settings_get_has_unapplied                    (GSettings          *settings);
extern
void                    g_settings_sync                                 (void);













typedef GVariant *    (*GSettingsBindSetMapping)                        (const GValue       *value,
                                                                         const GVariantType *expected_type,
                                                                         gpointer            user_data);













typedef gboolean      (*GSettingsBindGetMapping)                        (GValue             *value,
                                                                         GVariant           *variant,
                                                                         gpointer            user_data);





















typedef gboolean      (*GSettingsGetMapping)                            (GVariant           *value,
                                                                         gpointer           *result,
                                                                         gpointer            user_data);



















typedef enum
{
  G_SETTINGS_BIND_DEFAULT,
  G_SETTINGS_BIND_GET            = (1<<0),
  G_SETTINGS_BIND_SET            = (1<<1),
  G_SETTINGS_BIND_NO_SENSITIVITY = (1<<2),
  G_SETTINGS_BIND_GET_NO_CHANGES = (1<<3),
  G_SETTINGS_BIND_INVERT_BOOLEAN = (1<<4)
} GSettingsBindFlags;

extern
void                    g_settings_bind                                 (GSettings               *settings,
                                                                         const gchar             *key,
                                                                         gpointer                 object,
                                                                         const gchar             *property,
                                                                         GSettingsBindFlags       flags);
extern
void                    g_settings_bind_with_mapping                    (GSettings               *settings,
                                                                         const gchar             *key,
                                                                         gpointer                 object,
                                                                         const gchar             *property,
                                                                         GSettingsBindFlags       flags,
                                                                         GSettingsBindGetMapping  get_mapping,
                                                                         GSettingsBindSetMapping  set_mapping,
                                                                         gpointer                 user_data,
                                                                         GDestroyNotify           destroy);
extern
void                    g_settings_bind_writable                        (GSettings               *settings,
                                                                         const gchar             *key,
                                                                         gpointer                 object,
                                                                         const gchar             *property,
                                                                         gboolean                 inverted);
extern
void                    g_settings_unbind                               (gpointer                 object,
                                                                         const gchar             *property);

extern
GAction *               g_settings_create_action                        (GSettings               *settings,
                                                                         const gchar             *key);

extern
gpointer                g_settings_get_mapped                           (GSettings               *settings,
                                                                         const gchar             *key,
                                                                         GSettingsGetMapping      mapping,
                                                                         gpointer                 user_data);



#line 346 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsettings.h"
#line 115 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleaction.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleaction.h"











extern
GType                   g_simple_action_get_type                        (void) ;

extern
GSimpleAction *         g_simple_action_new                             (const gchar        *name,
                                                                         const GVariantType *parameter_type);

extern
GSimpleAction *         g_simple_action_new_stateful                    (const gchar        *name,
                                                                         const GVariantType *parameter_type,
                                                                         GVariant           *state);

extern
void                    g_simple_action_set_enabled                     (GSimpleAction      *simple,
                                                                         gboolean            enabled);

extern
void                    g_simple_action_set_state                       (GSimpleAction      *simple,
                                                                         GVariant           *value);

extern
void                    g_simple_action_set_state_hint                  (GSimpleAction      *simple,
                                                                         GVariant           *state_hint);



#line 64 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleaction.h"
#line 116 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleactiongroup.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleactiongroup.h"


















typedef struct _GSimpleActionGroupPrivate                   GSimpleActionGroupPrivate;
typedef struct _GSimpleActionGroupClass                     GSimpleActionGroupClass;








struct _GSimpleActionGroup
{
  
  GObject parent_instance;

  GSimpleActionGroupPrivate *priv;
};

struct _GSimpleActionGroupClass
{
  
  GObjectClass parent_class;

  
  gpointer padding[12];
};

extern
GType                   g_simple_action_group_get_type                  (void) ;

extern
GSimpleActionGroup *    g_simple_action_group_new                       (void);

__declspec(deprecated("is deprecated. Use '" "g_action_map_lookup_action" "' instead")) extern
GAction *               g_simple_action_group_lookup                    (GSimpleActionGroup *simple,
                                                                         const gchar        *action_name);

__declspec(deprecated("is deprecated. Use '" "g_action_map_add_action" "' instead")) extern
void                    g_simple_action_group_insert                    (GSimpleActionGroup *simple,
                                                                         GAction            *action);

__declspec(deprecated("is deprecated. Use '" "g_action_map_remove_action" "' instead")) extern
void                    g_simple_action_group_remove                    (GSimpleActionGroup *simple,
                                                                         const gchar        *action_name);

__declspec(deprecated("is deprecated. Use '" "g_action_map_add_action_entries" "' instead")) extern
void                    g_simple_action_group_add_entries               (GSimpleActionGroup *simple,
                                                                         const GActionEntry *entries,
                                                                         gint                n_entries,
                                                                         gpointer            user_data);



#line 98 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleactiongroup.h"
#line 117 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleasyncresult.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleasyncresult.h"

















typedef struct _GSimpleAsyncResultClass   GSimpleAsyncResultClass;


extern
GType               g_simple_async_result_get_type         (void) ;

__declspec(deprecated("is deprecated. Use '" "g_task_new" "' instead")) extern
GSimpleAsyncResult *g_simple_async_result_new              (GObject                 *source_object,
							    GAsyncReadyCallback      callback,
							    gpointer                 user_data,
							    gpointer                 source_tag);
__declspec(deprecated("is deprecated. Use '" "g_task_new" "' instead")) extern
GSimpleAsyncResult *g_simple_async_result_new_error        (GObject                 *source_object,
							    GAsyncReadyCallback      callback,
							    gpointer                 user_data,
							    GQuark                   domain,
							    gint                     code,
							    const char              *format,
							    ...) ;
__declspec(deprecated("is deprecated. Use '" "g_task_new" "' instead")) extern
GSimpleAsyncResult *g_simple_async_result_new_from_error   (GObject                 *source_object,
							    GAsyncReadyCallback      callback,
							    gpointer                 user_data,
							    const GError            *error);
__declspec(deprecated("is deprecated. Use '" "g_task_new" "' instead")) extern
GSimpleAsyncResult *g_simple_async_result_new_take_error   (GObject                 *source_object,
							    GAsyncReadyCallback      callback,
							    gpointer                 user_data,
							    GError                  *error);

__declspec(deprecated) extern
void                g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult      *simple,
                                                               gpointer                 op_res,
                                                               GDestroyNotify           destroy_op_res);
__declspec(deprecated) extern
gpointer            g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult      *simple);

__declspec(deprecated) extern
void                g_simple_async_result_set_op_res_gssize   (GSimpleAsyncResult      *simple,
                                                               gssize                   op_res);
__declspec(deprecated) extern
gssize              g_simple_async_result_get_op_res_gssize   (GSimpleAsyncResult      *simple);

__declspec(deprecated) extern
void                g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult      *simple,
                                                               gboolean                 op_res);
__declspec(deprecated) extern
gboolean            g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult      *simple);



extern 
void                g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple,
                                                                 GCancellable       *check_cancellable);
__declspec(deprecated) extern
gpointer            g_simple_async_result_get_source_tag   (GSimpleAsyncResult      *simple);
__declspec(deprecated) extern
void                g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult      *simple,
								   gboolean          handle_cancellation);
__declspec(deprecated) extern
void                g_simple_async_result_complete         (GSimpleAsyncResult      *simple);
__declspec(deprecated) extern
void                g_simple_async_result_complete_in_idle (GSimpleAsyncResult      *simple);
__declspec(deprecated) extern
void                g_simple_async_result_run_in_thread    (GSimpleAsyncResult      *simple,
							    GSimpleAsyncThreadFunc   func,
							    int                      io_priority,
							    GCancellable            *cancellable);
__declspec(deprecated) extern
void                g_simple_async_result_set_from_error   (GSimpleAsyncResult      *simple,
							    const GError            *error);
__declspec(deprecated) extern
void                g_simple_async_result_take_error       (GSimpleAsyncResult      *simple,
							    GError            *error);
__declspec(deprecated) extern
gboolean            g_simple_async_result_propagate_error  (GSimpleAsyncResult      *simple,
							    GError                 **dest);
__declspec(deprecated) extern
void                g_simple_async_result_set_error        (GSimpleAsyncResult      *simple,
							    GQuark                   domain,
							    gint                     code,
							    const char              *format,
							    ...) ;
__declspec(deprecated) extern
void                g_simple_async_result_set_error_va     (GSimpleAsyncResult      *simple,
							    GQuark                   domain,
							    gint                     code,
							    const char              *format,
							    va_list                  args)
							    ;
__declspec(deprecated) extern
gboolean            g_simple_async_result_is_valid         (GAsyncResult            *result,
                                                            GObject                 *source,
                                                            gpointer                 source_tag);

__declspec(deprecated("is deprecated. Use '" "g_task_report_error" "' instead")) extern
void g_simple_async_report_error_in_idle  (GObject            *object,
					   GAsyncReadyCallback callback,
					   gpointer            user_data,
					   GQuark              domain,
					   gint                code,
					   const char         *format,
					   ...) ;
__declspec(deprecated("is deprecated. Use '" "g_task_report_error" "' instead")) extern
void g_simple_async_report_gerror_in_idle (GObject            *object,
					   GAsyncReadyCallback callback,
					   gpointer            user_data,
					   const GError       *error);
__declspec(deprecated("is deprecated. Use '" "g_task_report_error" "' instead")) extern
void g_simple_async_report_take_gerror_in_idle (GObject            *object,
                                                GAsyncReadyCallback callback,
                                                gpointer            user_data,
                                                GError             *error);





#line 163 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleasyncresult.h"
#line 118 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleiostream.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleiostream.h"










extern
GType                g_simple_io_stream_get_type         (void) ;

extern
GIOStream           *g_simple_io_stream_new              (GInputStream  *input_stream,
                                                          GOutputStream *output_stream);



#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleiostream.h"
#line 119 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimplepermission.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimplepermission.h"












extern
GType                   g_simple_permission_get_type            (void);
extern
GPermission *           g_simple_permission_new                 (gboolean allowed);



#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimplepermission.h"
#line 120 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketclient.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketclient.h"

















typedef struct _GSocketClientPrivate                        GSocketClientPrivate;
typedef struct _GSocketClientClass                          GSocketClientClass;

struct _GSocketClientClass
{
  GObjectClass parent_class;

  void (* event) (GSocketClient       *client,
		  GSocketClientEvent  event,
		  GSocketConnectable  *connectable,
		  GIOStream           *connection);

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
};

struct _GSocketClient
{
  GObject parent_instance;
  GSocketClientPrivate *priv;
};

extern
GType                   g_socket_client_get_type                        (void) ;

extern
GSocketClient          *g_socket_client_new                             (void);

extern
GSocketFamily           g_socket_client_get_family                      (GSocketClient        *client);
extern
void                    g_socket_client_set_family                      (GSocketClient        *client,
									 GSocketFamily         family);
extern
GSocketType             g_socket_client_get_socket_type                 (GSocketClient        *client);
extern
void                    g_socket_client_set_socket_type                 (GSocketClient        *client,
									 GSocketType           type);
extern
GSocketProtocol         g_socket_client_get_protocol                    (GSocketClient        *client);
extern
void                    g_socket_client_set_protocol                    (GSocketClient        *client,
									 GSocketProtocol       protocol);
extern
GSocketAddress         *g_socket_client_get_local_address               (GSocketClient        *client);
extern
void                    g_socket_client_set_local_address               (GSocketClient        *client,
									 GSocketAddress       *address);
extern
guint                   g_socket_client_get_timeout                     (GSocketClient        *client);
extern
void                    g_socket_client_set_timeout                     (GSocketClient        *client,
									 guint                 timeout);
extern
gboolean                g_socket_client_get_enable_proxy                (GSocketClient        *client);
extern
void                    g_socket_client_set_enable_proxy                (GSocketClient        *client,
    									 gboolean	      enable);

extern
gboolean                g_socket_client_get_tls                         (GSocketClient        *client);
extern
void                    g_socket_client_set_tls                         (GSocketClient        *client,
									 gboolean              tls);
extern
GTlsCertificateFlags    g_socket_client_get_tls_validation_flags        (GSocketClient        *client);
extern
void                    g_socket_client_set_tls_validation_flags        (GSocketClient        *client,
									 GTlsCertificateFlags  flags);
extern
GProxyResolver         *g_socket_client_get_proxy_resolver              (GSocketClient        *client);
extern
void                    g_socket_client_set_proxy_resolver              (GSocketClient        *client,
                                                                         GProxyResolver       *proxy_resolver);

extern
GSocketConnection *     g_socket_client_connect                         (GSocketClient        *client,
                                                                         GSocketConnectable   *connectable,
                                                                         GCancellable         *cancellable,
                                                                         GError              **error);
extern
GSocketConnection *     g_socket_client_connect_to_host                 (GSocketClient        *client,
									 const gchar          *host_and_port,
									 guint16               default_port,
                                                                         GCancellable         *cancellable,
                                                                         GError              **error);
extern
GSocketConnection *     g_socket_client_connect_to_service              (GSocketClient        *client,
									 const gchar          *domain,
									 const gchar          *service,
                                                                         GCancellable         *cancellable,
                                                                         GError              **error);
extern
GSocketConnection *     g_socket_client_connect_to_uri                  (GSocketClient        *client,
									 const gchar          *uri,
									 guint16               default_port,
                                                                         GCancellable         *cancellable,
                                                                         GError              **error);
extern
void                    g_socket_client_connect_async                   (GSocketClient        *client,
                                                                         GSocketConnectable   *connectable,
                                                                         GCancellable         *cancellable,
                                                                         GAsyncReadyCallback   callback,
                                                                         gpointer              user_data);
extern
GSocketConnection *     g_socket_client_connect_finish                  (GSocketClient        *client,
                                                                         GAsyncResult         *result,
                                                                         GError              **error);
extern
void                    g_socket_client_connect_to_host_async           (GSocketClient        *client,
									 const gchar          *host_and_port,
									 guint16               default_port,
                                                                         GCancellable         *cancellable,
                                                                         GAsyncReadyCallback   callback,
                                                                         gpointer              user_data);
extern
GSocketConnection *     g_socket_client_connect_to_host_finish          (GSocketClient        *client,
                                                                         GAsyncResult         *result,
                                                                         GError              **error);

extern
void                    g_socket_client_connect_to_service_async        (GSocketClient        *client,
									 const gchar          *domain,
									 const gchar          *service,
                                                                         GCancellable         *cancellable,
                                                                         GAsyncReadyCallback   callback,
                                                                         gpointer              user_data);
extern
GSocketConnection *     g_socket_client_connect_to_service_finish       (GSocketClient        *client,
                                                                         GAsyncResult         *result,
                                                                         GError              **error);
extern
void                    g_socket_client_connect_to_uri_async            (GSocketClient        *client,
									 const gchar          *uri,
									 guint16               default_port,
                                                                         GCancellable         *cancellable,
                                                                         GAsyncReadyCallback   callback,
                                                                         gpointer              user_data);
extern
GSocketConnection *     g_socket_client_connect_to_uri_finish           (GSocketClient        *client,
                                                                         GAsyncResult         *result,
                                                                         GError              **error);
extern
void			g_socket_client_add_application_proxy		(GSocketClient        *client,
									 const gchar          *protocol);



#line 198 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketclient.h"
#line 123 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnectable.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnectable.h"















typedef struct _GSocketConnectableIface GSocketConnectableIface;












struct _GSocketConnectableIface
{
  GTypeInterface g_iface;

  

  GSocketAddressEnumerator * (* enumerate)       (GSocketConnectable *connectable);

  GSocketAddressEnumerator * (* proxy_enumerate) (GSocketConnectable *connectable);

  gchar                    * (* to_string)       (GSocketConnectable *connectable);
};

extern
GType                     g_socket_connectable_get_type  (void) ;

extern
GSocketAddressEnumerator *g_socket_connectable_enumerate (GSocketConnectable *connectable);

extern
GSocketAddressEnumerator *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);

extern
gchar                    *g_socket_connectable_to_string (GSocketConnectable *connectable);




#line 82 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnectable.h"
#line 124 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnection.h"




























#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnection.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocket.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocket.h"

















typedef struct _GSocketPrivate                              GSocketPrivate;
typedef struct _GSocketClass                                GSocketClass;

struct _GSocketClass
{
  GObjectClass parent_class;

  

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
  void (*_g_reserved7) (void);
  void (*_g_reserved8) (void);
  void (*_g_reserved9) (void);
  void (*_g_reserved10) (void);
};

struct _GSocket
{
  GObject parent_instance;
  GSocketPrivate *priv;
};

extern
GType                  g_socket_get_type                (void) ;
extern
GSocket *              g_socket_new                     (GSocketFamily            family,
							 GSocketType              type,
							 GSocketProtocol          protocol,
							 GError                 **error);
extern
GSocket *              g_socket_new_from_fd             (gint                     fd,
							 GError                 **error);
extern
int                    g_socket_get_fd                  (GSocket                 *socket);
extern
GSocketFamily          g_socket_get_family              (GSocket                 *socket);
extern
GSocketType            g_socket_get_socket_type         (GSocket                 *socket);
extern
GSocketProtocol        g_socket_get_protocol            (GSocket                 *socket);
extern
GSocketAddress *       g_socket_get_local_address       (GSocket                 *socket,
							 GError                 **error);
extern
GSocketAddress *       g_socket_get_remote_address      (GSocket                 *socket,
							 GError                 **error);
extern
void                   g_socket_set_blocking            (GSocket                 *socket,
							 gboolean                 blocking);
extern
gboolean               g_socket_get_blocking            (GSocket                 *socket);
extern
void                   g_socket_set_keepalive           (GSocket                 *socket,
							 gboolean                 keepalive);
extern
gboolean               g_socket_get_keepalive           (GSocket                 *socket);
extern
gint                   g_socket_get_listen_backlog      (GSocket                 *socket);
extern
void                   g_socket_set_listen_backlog      (GSocket                 *socket,
							 gint                     backlog);
extern
guint                  g_socket_get_timeout             (GSocket                 *socket);
extern
void                   g_socket_set_timeout             (GSocket                 *socket,
							 guint                    timeout);

extern
guint                  g_socket_get_ttl                 (GSocket                 *socket);
extern
void                   g_socket_set_ttl                 (GSocket                 *socket,
                                                         guint                    ttl);

extern
gboolean               g_socket_get_broadcast           (GSocket                 *socket);
extern
void                   g_socket_set_broadcast           (GSocket                 *socket,
                                                         gboolean		  broadcast);

extern
gboolean               g_socket_get_multicast_loopback  (GSocket                 *socket);
extern
void                   g_socket_set_multicast_loopback  (GSocket                 *socket,
                                                         gboolean		  loopback);
extern
guint                  g_socket_get_multicast_ttl       (GSocket                 *socket);
extern
void                   g_socket_set_multicast_ttl       (GSocket                 *socket,
                                                         guint                    ttl);
extern
gboolean               g_socket_is_connected            (GSocket                 *socket);
extern
gboolean               g_socket_bind                    (GSocket                 *socket,
							 GSocketAddress          *address,
							 gboolean                 allow_reuse,
							 GError                 **error);
extern
gboolean               g_socket_join_multicast_group    (GSocket                 *socket,
                                                         GInetAddress            *group,
                                                         gboolean                 source_specific,
                                                         const gchar             *iface,
                                                         GError                 **error);
extern
gboolean               g_socket_leave_multicast_group   (GSocket                 *socket,
                                                         GInetAddress            *group,
                                                         gboolean                 source_specific,
                                                         const gchar             *iface,
                                                         GError                 **error);
extern
gboolean               g_socket_connect                 (GSocket                 *socket,
							 GSocketAddress          *address,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gboolean               g_socket_check_connect_result    (GSocket                 *socket,
							 GError                 **error);

extern
gssize                 g_socket_get_available_bytes     (GSocket                 *socket);

extern
GIOCondition           g_socket_condition_check         (GSocket                 *socket,
							 GIOCondition             condition);
extern
gboolean               g_socket_condition_wait          (GSocket                 *socket,
							 GIOCondition             condition,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gboolean               g_socket_condition_timed_wait    (GSocket                 *socket,
							 GIOCondition             condition,
							 gint64                   timeout,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
GSocket *              g_socket_accept                  (GSocket                 *socket,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gboolean               g_socket_listen                  (GSocket                 *socket,
							 GError                 **error);
extern
gssize                 g_socket_receive                 (GSocket                 *socket,
							 gchar                   *buffer,
							 gsize                    size,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gssize                 g_socket_receive_from            (GSocket                 *socket,
							 GSocketAddress         **address,
							 gchar                   *buffer,
							 gsize                    size,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gssize                 g_socket_send                    (GSocket                 *socket,
							 const gchar             *buffer,
							 gsize                    size,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gssize                 g_socket_send_to                 (GSocket                 *socket,
							 GSocketAddress          *address,
							 const gchar             *buffer,
							 gsize                    size,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gssize                 g_socket_receive_message         (GSocket                 *socket,
							 GSocketAddress         **address,
							 GInputVector            *vectors,
							 gint                     num_vectors,
							 GSocketControlMessage ***messages,
							 gint                    *num_messages,
							 gint                    *flags,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gssize                 g_socket_send_message            (GSocket                 *socket,
							 GSocketAddress          *address,
							 GOutputVector           *vectors,
							 gint                     num_vectors,
							 GSocketControlMessage  **messages,
							 gint                     num_messages,
							 gint                     flags,
							 GCancellable            *cancellable,
							 GError                 **error);

extern
gint                   g_socket_receive_messages        (GSocket                 *socket,
                                                         GInputMessage           *messages,
                                                         guint                    num_messages,
                                                         gint                     flags,
                                                         GCancellable            *cancellable,
                                                         GError                 **error);
extern
gint                   g_socket_send_messages           (GSocket                 *socket,
							 GOutputMessage          *messages,
							 guint                    num_messages,
							 gint                     flags,
							 GCancellable            *cancellable,
							 GError                 **error);

extern
gboolean               g_socket_close                   (GSocket                 *socket,
							 GError                 **error);
extern
gboolean               g_socket_shutdown                (GSocket                 *socket,
							 gboolean                 shutdown_read,
							 gboolean                 shutdown_write,
							 GError                 **error);
extern
gboolean               g_socket_is_closed               (GSocket                 *socket);
extern
GSource *              g_socket_create_source           (GSocket                 *socket,
							 GIOCondition             condition,
							 GCancellable            *cancellable);
extern
gboolean               g_socket_speaks_ipv4             (GSocket                 *socket);
extern
GCredentials          *g_socket_get_credentials         (GSocket                 *socket,
                                                         GError                 **error);

extern
gssize                 g_socket_receive_with_blocking   (GSocket                 *socket,
							 gchar                   *buffer,
							 gsize                    size,
							 gboolean                 blocking,
							 GCancellable            *cancellable,
							 GError                 **error);
extern
gssize                 g_socket_send_with_blocking      (GSocket                 *socket,
							 const gchar             *buffer,
							 gsize                    size,
							 gboolean                 blocking,
							 GCancellable            *cancellable,
							 GError                 **error);

extern
gboolean               g_socket_get_option              (GSocket                 *socket,
							 gint                     level,
							 gint                     optname,
							 gint                    *value,
							 GError                 **error);
extern
gboolean               g_socket_set_option              (GSocket                 *socket,
							 gint                     level,
							 gint                     optname,
							 gint                     value,
							 GError                 **error);



#line 306 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocket.h"
#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnection.h"
















typedef struct _GSocketConnectionPrivate                    GSocketConnectionPrivate;
typedef struct _GSocketConnectionClass                      GSocketConnectionClass;

struct _GSocketConnectionClass
{
  GIOStreamClass parent_class;

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketConnection
{
  GIOStream parent_instance;
  GSocketConnectionPrivate *priv;
};

extern
GType              g_socket_connection_get_type                  (void) ;

extern
gboolean           g_socket_connection_is_connected              (GSocketConnection  *connection);
extern
gboolean           g_socket_connection_connect                   (GSocketConnection  *connection,
								  GSocketAddress     *address,
								  GCancellable       *cancellable,
								  GError            **error);
extern
void               g_socket_connection_connect_async             (GSocketConnection  *connection,
								  GSocketAddress     *address,
								  GCancellable       *cancellable,
								  GAsyncReadyCallback callback,
								  gpointer            user_data);
extern
gboolean           g_socket_connection_connect_finish            (GSocketConnection  *connection,
								  GAsyncResult       *result,
								  GError            **error);

extern
GSocket           *g_socket_connection_get_socket                (GSocketConnection  *connection);
extern
GSocketAddress    *g_socket_connection_get_local_address         (GSocketConnection  *connection,
								  GError            **error);
extern
GSocketAddress    *g_socket_connection_get_remote_address        (GSocketConnection  *connection,
								  GError            **error);

extern
void               g_socket_connection_factory_register_type     (GType               g_type,
								  GSocketFamily       family,
								  GSocketType         type,
								  gint                protocol);
extern
GType              g_socket_connection_factory_lookup_type       (GSocketFamily       family,
								  GSocketType         type,
								  gint                protocol_id);
extern
GSocketConnection *g_socket_connection_factory_create_connection (GSocket            *socket);



#line 116 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketconnection.h"
#line 125 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketcontrolmessage.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketcontrolmessage.h"




















typedef struct _GSocketControlMessagePrivate                GSocketControlMessagePrivate;
typedef struct _GSocketControlMessageClass                  GSocketControlMessageClass;












struct _GSocketControlMessageClass
{
  GObjectClass parent_class;

  gsize                  (* get_size)  (GSocketControlMessage  *message);
  int                    (* get_level) (GSocketControlMessage  *message);
  int                    (* get_type)  (GSocketControlMessage  *message);
  void                   (* serialize) (GSocketControlMessage  *message,
					gpointer                data);
  GSocketControlMessage *(* deserialize) (int                   level,
					  int                   type,
					  gsize                 size,
					  gpointer              data);

  

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GSocketControlMessage
{
  GObject parent_instance;
  GSocketControlMessagePrivate *priv;
};

extern
GType                  g_socket_control_message_get_type     (void) ;
extern
gsize                  g_socket_control_message_get_size     (GSocketControlMessage *message);
extern
int                    g_socket_control_message_get_level    (GSocketControlMessage *message);
extern
int                    g_socket_control_message_get_msg_type (GSocketControlMessage *message);
extern
void                   g_socket_control_message_serialize    (GSocketControlMessage *message,
							      gpointer               data);
extern
GSocketControlMessage *g_socket_control_message_deserialize  (int                    level,
							      int                    type,
							      gsize                  size,
							      gpointer               data);




#line 112 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketcontrolmessage.h"
#line 126 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketlistener.h"






























#line 32 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketlistener.h"

















typedef struct _GSocketListenerPrivate                      GSocketListenerPrivate;
typedef struct _GSocketListenerClass                        GSocketListenerClass;







struct _GSocketListenerClass
{
  GObjectClass parent_class;

  void (* changed) (GSocketListener *listener);

  void (* event) (GSocketListener      *listener,
                  GSocketListenerEvent *event,
                  GSocket              *socket);

  
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketListener
{
  GObject parent_instance;
  GSocketListenerPrivate *priv;
};

extern
GType                   g_socket_listener_get_type                      (void) ;

extern
GSocketListener *       g_socket_listener_new                           (void);

extern
void                    g_socket_listener_set_backlog                   (GSocketListener     *listener,
									 int                  listen_backlog);

extern
gboolean                g_socket_listener_add_socket                    (GSocketListener     *listener,
                                                                         GSocket             *socket,
									 GObject             *source_object,
									 GError             **error);
extern
gboolean                g_socket_listener_add_address                   (GSocketListener     *listener,
                                                                         GSocketAddress      *address,
									 GSocketType          type,
									 GSocketProtocol      protocol,
									 GObject             *source_object,
                                                                         GSocketAddress     **effective_address,
									 GError             **error);
extern
gboolean                g_socket_listener_add_inet_port                 (GSocketListener     *listener,
                                                                         guint16              port,
									 GObject             *source_object,
									 GError             **error);
extern
guint16                 g_socket_listener_add_any_inet_port             (GSocketListener     *listener,
									 GObject             *source_object,
									 GError             **error);

extern
GSocket *               g_socket_listener_accept_socket                 (GSocketListener      *listener,
									 GObject             **source_object,
                                                                         GCancellable         *cancellable,
                                                                         GError              **error);
extern
void                    g_socket_listener_accept_socket_async           (GSocketListener      *listener,
                                                                         GCancellable         *cancellable,
                                                                         GAsyncReadyCallback   callback,
                                                                         gpointer              user_data);
extern
GSocket *               g_socket_listener_accept_socket_finish          (GSocketListener      *listener,
                                                                         GAsyncResult         *result,
									 GObject             **source_object,
                                                                         GError              **error);


extern
GSocketConnection *     g_socket_listener_accept                        (GSocketListener      *listener,
									 GObject             **source_object,
                                                                         GCancellable         *cancellable,
                                                                         GError              **error);

extern
void                    g_socket_listener_accept_async                  (GSocketListener      *listener,
                                                                         GCancellable         *cancellable,
                                                                         GAsyncReadyCallback   callback,
                                                                         gpointer              user_data);

extern
GSocketConnection *     g_socket_listener_accept_finish                 (GSocketListener      *listener,
                                                                         GAsyncResult         *result,
									 GObject             **source_object,
                                                                         GError              **error);

extern
void                    g_socket_listener_close                         (GSocketListener      *listener);



#line 156 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketlistener.h"
#line 128 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketservice.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketservice.h"

















typedef struct _GSocketServicePrivate                       GSocketServicePrivate;
typedef struct _GSocketServiceClass                         GSocketServiceClass;







struct _GSocketServiceClass
{
  GSocketListenerClass parent_class;

  gboolean (* incoming) (GSocketService    *service,
                         GSocketConnection *connection,
			 GObject           *source_object);

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

struct _GSocketService
{
  GSocketListener parent_instance;
  GSocketServicePrivate *priv;
};

extern
GType           g_socket_service_get_type  (void);

extern
GSocketService *g_socket_service_new       (void);
extern
void            g_socket_service_start     (GSocketService *service);
extern
void            g_socket_service_stop      (GSocketService *service);
extern
gboolean        g_socket_service_is_active (GSocketService *service);




#line 94 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsocketservice.h"
#line 129 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsrvtarget.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsrvtarget.h"





extern
GType g_srv_target_get_type (void) ;


extern
GSrvTarget  *g_srv_target_new          (const gchar *hostname,
				        guint16      port,
				        guint16      priority,
				        guint16      weight);
extern
GSrvTarget  *g_srv_target_copy         (GSrvTarget  *target);
extern
void         g_srv_target_free         (GSrvTarget  *target);

extern
const gchar *g_srv_target_get_hostname (GSrvTarget  *target);
extern
guint16      g_srv_target_get_port     (GSrvTarget  *target);
extern
guint16      g_srv_target_get_priority (GSrvTarget  *target);
extern
guint16      g_srv_target_get_weight   (GSrvTarget  *target);

extern
GList       *g_srv_target_list_sort    (GList       *targets);



#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsrvtarget.h"

#line 130 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleproxyresolver.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleproxyresolver.h"

















typedef struct _GSimpleProxyResolver GSimpleProxyResolver;
typedef struct _GSimpleProxyResolverPrivate GSimpleProxyResolverPrivate;
typedef struct _GSimpleProxyResolverClass GSimpleProxyResolverClass;

struct _GSimpleProxyResolver
{
  GObject parent_instance;

  
  GSimpleProxyResolverPrivate *priv;
};

struct _GSimpleProxyResolverClass
{
  GObjectClass parent_class;

  
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

extern
GType           g_simple_proxy_resolver_get_type          (void) ;

extern
GProxyResolver *g_simple_proxy_resolver_new               (const gchar           *default_proxy,
                                                           gchar                **ignore_hosts);

extern
void            g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver  *resolver,
                                                           const gchar           *default_proxy);

extern
void            g_simple_proxy_resolver_set_ignore_hosts  (GSimpleProxyResolver  *resolver,
                                                           gchar                **ignore_hosts);

extern
void            g_simple_proxy_resolver_set_uri_proxy     (GSimpleProxyResolver  *resolver,
                                                           const gchar           *uri_scheme,
                                                           const gchar           *proxy);



#line 90 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsimpleproxyresolver.h"
#line 131 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtask.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtask.h"












typedef struct _GTaskClass   GTaskClass;

extern
GType         g_task_get_type              (void) ;

extern
GTask        *g_task_new                   (gpointer             source_object,
                                            GCancellable        *cancellable,
                                            GAsyncReadyCallback  callback,
                                            gpointer             callback_data);

extern
void          g_task_report_error          (gpointer             source_object,
                                            GAsyncReadyCallback  callback,
                                            gpointer             callback_data,
                                            gpointer             source_tag,
                                            GError              *error);
extern
void          g_task_report_new_error      (gpointer             source_object,
                                            GAsyncReadyCallback  callback,
                                            gpointer             callback_data,
                                            gpointer             source_tag,
                                            GQuark               domain,
                                            gint                 code,
                                            const char          *format,
                                            ...) ;

extern
void          g_task_set_task_data         (GTask               *task,
                                            gpointer             task_data,
                                            GDestroyNotify       task_data_destroy);
extern
void          g_task_set_priority          (GTask               *task,
                                            gint                 priority);
extern
void          g_task_set_check_cancellable (GTask               *task,
                                            gboolean             check_cancellable);
extern
void          g_task_set_source_tag        (GTask               *task,
                                            gpointer             source_tag);

extern
gpointer      g_task_get_source_object     (GTask               *task);
extern
gpointer      g_task_get_task_data         (GTask               *task);
extern
gint          g_task_get_priority          (GTask               *task);
extern
GMainContext *g_task_get_context           (GTask               *task);
extern
GCancellable *g_task_get_cancellable       (GTask               *task);
extern
gboolean      g_task_get_check_cancellable (GTask               *task);
extern
gpointer      g_task_get_source_tag        (GTask               *task);

extern
gboolean      g_task_is_valid              (gpointer             result,
                                            gpointer             source_object);


typedef void (*GTaskThreadFunc)           (GTask           *task,
                                           gpointer         source_object,
                                           gpointer         task_data,
                                           GCancellable    *cancellable);
extern
void          g_task_run_in_thread        (GTask           *task,
                                           GTaskThreadFunc  task_func);
extern
void          g_task_run_in_thread_sync   (GTask           *task,
                                           GTaskThreadFunc  task_func);
extern
gboolean      g_task_set_return_on_cancel (GTask           *task,
                                           gboolean         return_on_cancel);
extern
gboolean      g_task_get_return_on_cancel (GTask           *task);

extern
void          g_task_attach_source        (GTask           *task,
                                           GSource         *source,
                                           GSourceFunc      callback);


extern
void          g_task_return_pointer            (GTask           *task,
                                                gpointer         result,
                                                GDestroyNotify   result_destroy);
extern
void          g_task_return_boolean            (GTask           *task,
                                                gboolean         result);
extern
void          g_task_return_int                (GTask           *task,
                                                gssize           result);

extern
void          g_task_return_error              (GTask           *task,
                                                GError          *error);
extern
void          g_task_return_new_error          (GTask           *task,
                                                GQuark           domain,
                                                gint             code,
                                                const char      *format,
                                                ...) ;

extern
gboolean      g_task_return_error_if_cancelled (GTask           *task);

extern
gpointer      g_task_propagate_pointer         (GTask           *task,
                                                GError         **error);
extern
gboolean      g_task_propagate_boolean         (GTask           *task,
                                                GError         **error);
extern
gssize        g_task_propagate_int             (GTask           *task,
                                                GError         **error);
extern
gboolean      g_task_had_error                 (GTask           *task);
extern
gboolean      g_task_get_completed             (GTask           *task);



#line 161 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtask.h"
#line 132 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsubprocess.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsubprocess.h"












extern
GType            g_subprocess_get_type                  (void) ;



extern
GSubprocess *    g_subprocess_new                       (GSubprocessFlags        flags,
                                                         GError                **error,
                                                         const gchar            *argv0,
                                                         ...) ;
extern
GSubprocess *    g_subprocess_newv                      (const gchar * const  *argv,
                                                         GSubprocessFlags      flags,
                                                         GError              **error);

extern
GOutputStream *  g_subprocess_get_stdin_pipe            (GSubprocess          *subprocess);

extern
GInputStream *   g_subprocess_get_stdout_pipe           (GSubprocess          *subprocess);

extern
GInputStream *   g_subprocess_get_stderr_pipe           (GSubprocess          *subprocess);

extern
const gchar *    g_subprocess_get_identifier            (GSubprocess          *subprocess);







extern
void             g_subprocess_force_exit                (GSubprocess          *subprocess);

extern
gboolean         g_subprocess_wait                      (GSubprocess          *subprocess,
                                                         GCancellable         *cancellable,
                                                         GError              **error);

extern
void             g_subprocess_wait_async                (GSubprocess          *subprocess,
                                                         GCancellable         *cancellable,
                                                         GAsyncReadyCallback   callback,
                                                         gpointer              user_data);

extern
gboolean         g_subprocess_wait_finish               (GSubprocess          *subprocess,
                                                         GAsyncResult         *result,
                                                         GError              **error);

extern
gboolean         g_subprocess_wait_check                (GSubprocess          *subprocess,
                                                         GCancellable         *cancellable,
                                                         GError              **error);

extern
void             g_subprocess_wait_check_async          (GSubprocess          *subprocess,
                                                         GCancellable         *cancellable,
                                                         GAsyncReadyCallback   callback,
                                                         gpointer              user_data);

extern
gboolean         g_subprocess_wait_check_finish         (GSubprocess          *subprocess,
                                                         GAsyncResult         *result,
                                                         GError              **error);


extern
gint             g_subprocess_get_status                (GSubprocess          *subprocess);

extern
gboolean         g_subprocess_get_successful            (GSubprocess          *subprocess);

extern
gboolean         g_subprocess_get_if_exited             (GSubprocess          *subprocess);

extern
gint             g_subprocess_get_exit_status           (GSubprocess          *subprocess);

extern
gboolean         g_subprocess_get_if_signaled           (GSubprocess          *subprocess);

extern
gint             g_subprocess_get_term_sig              (GSubprocess          *subprocess);

extern
gboolean         g_subprocess_communicate               (GSubprocess          *subprocess,
                                                         GBytes               *stdin_buf,
                                                         GCancellable         *cancellable,
                                                         GBytes              **stdout_buf,
                                                         GBytes              **stderr_buf,
                                                         GError              **error);
extern
void            g_subprocess_communicate_async          (GSubprocess          *subprocess,
                                                         GBytes               *stdin_buf,
                                                         GCancellable         *cancellable,
                                                         GAsyncReadyCallback   callback,
                                                         gpointer              user_data);

extern
gboolean        g_subprocess_communicate_finish         (GSubprocess          *subprocess,
                                                         GAsyncResult         *result,
                                                         GBytes              **stdout_buf,
                                                         GBytes              **stderr_buf,
                                                         GError              **error);

extern
gboolean         g_subprocess_communicate_utf8          (GSubprocess          *subprocess,
                                                         const char           *stdin_buf,
                                                         GCancellable         *cancellable,
                                                         char                **stdout_buf,
                                                         char                **stderr_buf,
                                                         GError              **error);
extern
void            g_subprocess_communicate_utf8_async     (GSubprocess          *subprocess,
                                                         const char           *stdin_buf,
                                                         GCancellable         *cancellable,
                                                         GAsyncReadyCallback   callback,
                                                         gpointer              user_data);

extern
gboolean        g_subprocess_communicate_utf8_finish    (GSubprocess          *subprocess,
                                                         GAsyncResult         *result,
                                                         char                **stdout_buf,
                                                         char                **stderr_buf,
                                                         GError              **error);



#line 168 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsubprocess.h"
#line 133 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsubprocesslauncher.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsubprocesslauncher.h"












extern
GType                   g_subprocess_launcher_get_type                  (void) ;

extern
GSubprocessLauncher *   g_subprocess_launcher_new                       (GSubprocessFlags       flags);

extern
GSubprocess *           g_subprocess_launcher_spawn                     (GSubprocessLauncher   *self,
                                                                         GError               **error,
                                                                         const gchar           *argv0,
                                                                         ...) ;

extern
GSubprocess *           g_subprocess_launcher_spawnv                    (GSubprocessLauncher   *self,
                                                                         const gchar * const   *argv,
                                                                         GError               **error);

extern
void                    g_subprocess_launcher_set_environ               (GSubprocessLauncher   *self,
                                                                         gchar                **env);

extern
void                    g_subprocess_launcher_setenv                    (GSubprocessLauncher   *self,
                                                                         const gchar           *variable,
                                                                         const gchar           *value,
                                                                         gboolean               overwrite);

extern
void                    g_subprocess_launcher_unsetenv                  (GSubprocessLauncher *self,
                                                                         const gchar         *variable);

extern
const gchar *           g_subprocess_launcher_getenv                    (GSubprocessLauncher   *self,
                                                                         const gchar           *variable);

extern
void                    g_subprocess_launcher_set_cwd                   (GSubprocessLauncher   *self,
                                                                         const gchar           *cwd);
extern
void                    g_subprocess_launcher_set_flags                 (GSubprocessLauncher   *self,
                                                                         GSubprocessFlags       flags);





































#line 117 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gsubprocesslauncher.h"
#line 134 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtcpconnection.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtcpconnection.h"

















typedef struct _GTcpConnectionPrivate                       GTcpConnectionPrivate;
typedef struct _GTcpConnectionClass                         GTcpConnectionClass;

struct _GTcpConnectionClass
{
  GSocketConnectionClass parent_class;
};

struct _GTcpConnection
{
  GSocketConnection parent_instance;
  GTcpConnectionPrivate *priv;
};

extern
GType    g_tcp_connection_get_type                (void) ;

extern
void     g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection,
						   gboolean        graceful_disconnect);
extern
gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);



#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtcpconnection.h"
#line 135 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtcpwrapperconnection.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtcpwrapperconnection.h"

















typedef struct _GTcpWrapperConnectionPrivate GTcpWrapperConnectionPrivate;
typedef struct _GTcpWrapperConnectionClass   GTcpWrapperConnectionClass;

struct _GTcpWrapperConnectionClass
{
  GTcpConnectionClass parent_class;
};

struct _GTcpWrapperConnection
{
  GTcpConnection parent_instance;
  GTcpWrapperConnectionPrivate *priv;
};

extern
GType              g_tcp_wrapper_connection_get_type (void) ;

extern
GSocketConnection *g_tcp_wrapper_connection_new                (GIOStream             *base_io_stream,
								GSocket               *socket);
extern
GIOStream         *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);



#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtcpwrapperconnection.h"
#line 136 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtestdbus.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtestdbus.h"













extern
GType          g_test_dbus_get_type        (void) ;

extern
GTestDBus *    g_test_dbus_new             (GTestDBusFlags flags);

extern
GTestDBusFlags g_test_dbus_get_flags       (GTestDBus     *self);

extern
const gchar *  g_test_dbus_get_bus_address (GTestDBus     *self);

extern
void           g_test_dbus_add_service_dir (GTestDBus     *self,
                                            const gchar   *path);

extern
void           g_test_dbus_up              (GTestDBus     *self);

extern
void           g_test_dbus_stop            (GTestDBus     *self);

extern
void           g_test_dbus_down            (GTestDBus     *self);

extern
void           g_test_dbus_unset           (void);



#line 73 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtestdbus.h"
#line 137 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gthemedicon.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gthemedicon.h"

















typedef struct _GThemedIconClass   GThemedIconClass;

extern
GType  g_themed_icon_get_type                   (void) ;

extern
GIcon *g_themed_icon_new                        (const char  *iconname);
extern
GIcon *g_themed_icon_new_with_default_fallbacks (const char  *iconname);
extern
GIcon *g_themed_icon_new_from_names             (char       **iconnames,
                                                 int          len);
extern
void   g_themed_icon_prepend_name               (GThemedIcon *icon,
                                                 const char  *iconname);
extern
void   g_themed_icon_append_name                (GThemedIcon *icon,
                                                 const char  *iconname);

extern
const gchar* const * g_themed_icon_get_names     (GThemedIcon *icon);



#line 69 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gthemedicon.h"
#line 138 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gthreadedsocketservice.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gthreadedsocketservice.h"




















typedef struct _GThreadedSocketServicePrivate               GThreadedSocketServicePrivate;
typedef struct _GThreadedSocketServiceClass                 GThreadedSocketServiceClass;

struct _GThreadedSocketServiceClass
{
  GSocketServiceClass parent_class;

  gboolean (* run) (GThreadedSocketService *service,
                    GSocketConnection      *connection,
                    GObject                *source_object);

  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
};

struct _GThreadedSocketService
{
  GSocketService parent_instance;
  GThreadedSocketServicePrivate *priv;
};

extern
GType                   g_threaded_socket_service_get_type              (void);
extern
GSocketService *        g_threaded_socket_service_new                   (int max_threads);



#line 82 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gthreadedsocketservice.h"
#line 139 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsbackend.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsbackend.h"


















typedef struct _GTlsBackend          GTlsBackend;
typedef struct _GTlsBackendInterface GTlsBackendInterface;


















struct _GTlsBackendInterface
{
  GTypeInterface g_iface;

  
  gboolean       ( *supports_tls)               (GTlsBackend *backend);
  GType          ( *get_certificate_type)       (void);
  GType          ( *get_client_connection_type) (void);
  GType          ( *get_server_connection_type) (void);
  GType          ( *get_file_database_type)     (void);
  GTlsDatabase * ( *get_default_database)       (GTlsBackend *backend);
  gboolean       ( *supports_dtls)              (GTlsBackend *backend);
  GType          ( *get_dtls_client_connection_type) (void);
  GType          ( *get_dtls_server_connection_type) (void);
};

extern
GType          g_tls_backend_get_type                   (void) ;

extern
GTlsBackend *  g_tls_backend_get_default                (void);

extern
GTlsDatabase * g_tls_backend_get_default_database       (GTlsBackend *backend);

extern
gboolean       g_tls_backend_supports_tls               (GTlsBackend *backend);
extern
gboolean       g_tls_backend_supports_dtls              (GTlsBackend *backend);

extern
GType          g_tls_backend_get_certificate_type       (GTlsBackend *backend);
extern
GType          g_tls_backend_get_client_connection_type (GTlsBackend *backend);
extern
GType          g_tls_backend_get_server_connection_type (GTlsBackend *backend);
extern
GType          g_tls_backend_get_file_database_type     (GTlsBackend *backend);

extern
GType          g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);
extern
GType          g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);



#line 111 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsbackend.h"
#line 140 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlscertificate.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlscertificate.h"












typedef struct _GTlsCertificateClass   GTlsCertificateClass;
typedef struct _GTlsCertificatePrivate GTlsCertificatePrivate;

struct _GTlsCertificate {
  GObject parent_instance;

  GTlsCertificatePrivate *priv;
};

struct _GTlsCertificateClass
{
  GObjectClass parent_class;

  GTlsCertificateFlags  (* verify) (GTlsCertificate     *cert,
				    GSocketConnectable  *identity,
				    GTlsCertificate     *trusted_ca);

  
  
  gpointer padding[8];
};

extern
GType                 g_tls_certificate_get_type           (void) ;

extern
GTlsCertificate      *g_tls_certificate_new_from_pem       (const gchar         *data,
							    gssize               length,
							    GError             **error);

extern
GTlsCertificate      *g_tls_certificate_new_from_file      (const gchar         *file,
							    GError             **error);
extern
GTlsCertificate      *g_tls_certificate_new_from_files     (const gchar         *cert_file,
							    const gchar         *key_file,
							    GError             **error);
extern
GList                *g_tls_certificate_list_new_from_file (const gchar         *file,
							    GError             **error);

extern
GTlsCertificate      *g_tls_certificate_get_issuer         (GTlsCertificate     *cert);

extern
GTlsCertificateFlags  g_tls_certificate_verify             (GTlsCertificate     *cert,
							    GSocketConnectable  *identity,
							    GTlsCertificate     *trusted_ca);

extern
gboolean              g_tls_certificate_is_same            (GTlsCertificate     *cert_one,
                                                            GTlsCertificate     *cert_two);



#line 93 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlscertificate.h"
#line 141 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsclientconnection.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsclientconnection.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsconnection.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsconnection.h"












typedef struct _GTlsConnectionClass   GTlsConnectionClass;
typedef struct _GTlsConnectionPrivate GTlsConnectionPrivate;

struct _GTlsConnection {
  GIOStream parent_instance;

  GTlsConnectionPrivate *priv;
};

struct _GTlsConnectionClass
{
  GIOStreamClass parent_class;

  
  gboolean          ( *accept_certificate) (GTlsConnection       *connection,
					    GTlsCertificate      *peer_cert,
					    GTlsCertificateFlags  errors);

  
  gboolean ( *handshake )        (GTlsConnection       *conn,
				  GCancellable         *cancellable,
				  GError              **error);

  void     ( *handshake_async )  (GTlsConnection       *conn,
				  int                   io_priority,
				  GCancellable         *cancellable,
				  GAsyncReadyCallback   callback,
				  gpointer              user_data);
  gboolean ( *handshake_finish ) (GTlsConnection       *conn,
				  GAsyncResult         *result,
				  GError              **error);

  
  
  gpointer padding[8];
};

extern
GType                 g_tls_connection_get_type                    (void) ;

__declspec(deprecated) extern
void                  g_tls_connection_set_use_system_certdb       (GTlsConnection       *conn,
                                                                    gboolean              use_system_certdb);
__declspec(deprecated) extern
gboolean              g_tls_connection_get_use_system_certdb       (GTlsConnection       *conn);

extern
void                  g_tls_connection_set_database                (GTlsConnection       *conn,
								    GTlsDatabase         *database);
extern
GTlsDatabase *        g_tls_connection_get_database                (GTlsConnection       *conn);

extern
void                  g_tls_connection_set_certificate             (GTlsConnection       *conn,
                                                                    GTlsCertificate      *certificate);
extern
GTlsCertificate      *g_tls_connection_get_certificate             (GTlsConnection       *conn);

extern
void                  g_tls_connection_set_interaction             (GTlsConnection       *conn,
                                                                    GTlsInteraction      *interaction);
extern
GTlsInteraction *     g_tls_connection_get_interaction             (GTlsConnection       *conn);

extern
GTlsCertificate      *g_tls_connection_get_peer_certificate        (GTlsConnection       *conn);
extern
GTlsCertificateFlags  g_tls_connection_get_peer_certificate_errors (GTlsConnection       *conn);

extern
void                  g_tls_connection_set_require_close_notify    (GTlsConnection       *conn,
								    gboolean              require_close_notify);
extern
gboolean              g_tls_connection_get_require_close_notify    (GTlsConnection       *conn);

extern
void                  g_tls_connection_set_rehandshake_mode        (GTlsConnection       *conn,
								    GTlsRehandshakeMode   mode);
extern
GTlsRehandshakeMode   g_tls_connection_get_rehandshake_mode        (GTlsConnection       *conn);

extern
gboolean              g_tls_connection_handshake                   (GTlsConnection       *conn,
								    GCancellable         *cancellable,
								    GError              **error);

extern
void                  g_tls_connection_handshake_async             (GTlsConnection       *conn,
								    int                   io_priority,
								    GCancellable         *cancellable,
								    GAsyncReadyCallback   callback,
								    gpointer              user_data);
extern
gboolean              g_tls_connection_handshake_finish            (GTlsConnection       *conn,
								    GAsyncResult         *result,
								    GError              **error);









extern
GQuark g_tls_error_quark (void);



extern
gboolean              g_tls_connection_emit_accept_certificate     (GTlsConnection       *conn,
								    GTlsCertificate      *peer_cert,
								    GTlsCertificateFlags  errors);



#line 155 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsconnection.h"
#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsclientconnection.h"








typedef struct _GTlsClientConnectionInterface GTlsClientConnectionInterface;










struct _GTlsClientConnectionInterface
{
  GTypeInterface g_iface;

  void     ( *copy_session_state )     (GTlsClientConnection       *conn,
                                        GTlsClientConnection       *source);
};

extern
GType                 g_tls_client_connection_get_type             (void) ;

extern
GIOStream *           g_tls_client_connection_new                  (GIOStream               *base_io_stream,
								    GSocketConnectable      *server_identity,
								    GError                 **error);

extern
GTlsCertificateFlags  g_tls_client_connection_get_validation_flags (GTlsClientConnection    *conn);
extern
void                  g_tls_client_connection_set_validation_flags (GTlsClientConnection    *conn,
								    GTlsCertificateFlags     flags);
extern
GSocketConnectable   *g_tls_client_connection_get_server_identity  (GTlsClientConnection    *conn);
extern
void                  g_tls_client_connection_set_server_identity  (GTlsClientConnection    *conn,
								    GSocketConnectable      *identity);
extern
gboolean              g_tls_client_connection_get_use_ssl3         (GTlsClientConnection    *conn);
extern
void                  g_tls_client_connection_set_use_ssl3         (GTlsClientConnection    *conn,
								    gboolean                 use_ssl3);
extern
GList *               g_tls_client_connection_get_accepted_cas     (GTlsClientConnection    *conn);

extern
void                  g_tls_client_connection_copy_session_state   (GTlsClientConnection    *conn,
                                                                    GTlsClientConnection    *source);



#line 87 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsclientconnection.h"
#line 142 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsdatabase.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsdatabase.h"















typedef struct _GTlsDatabaseClass   GTlsDatabaseClass;
typedef struct _GTlsDatabasePrivate GTlsDatabasePrivate;

struct _GTlsDatabase
{
  GObject parent_instance;

  GTlsDatabasePrivate *priv;
};

struct _GTlsDatabaseClass
{
  GObjectClass parent_class;

  

  GTlsCertificateFlags  (*verify_chain)                         (GTlsDatabase            *self,
                                                                 GTlsCertificate         *chain,
                                                                 const gchar             *purpose,
                                                                 GSocketConnectable      *identity,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseVerifyFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);

  void                  (*verify_chain_async)                   (GTlsDatabase            *self,
                                                                 GTlsCertificate         *chain,
                                                                 const gchar             *purpose,
                                                                 GSocketConnectable      *identity,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseVerifyFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);

  GTlsCertificateFlags  (*verify_chain_finish)                  (GTlsDatabase            *self,
                                                                 GAsyncResult            *result,
                                                                 GError                 **error);

  gchar*                (*create_certificate_handle)            (GTlsDatabase            *self,
                                                                 GTlsCertificate         *certificate);

  GTlsCertificate*      (*lookup_certificate_for_handle)        (GTlsDatabase            *self,
                                                                 const gchar             *handle,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseLookupFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);

  void                  (*lookup_certificate_for_handle_async)  (GTlsDatabase            *self,
                                                                 const gchar             *handle,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseLookupFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);

  GTlsCertificate*      (*lookup_certificate_for_handle_finish) (GTlsDatabase            *self,
                                                                 GAsyncResult            *result,
                                                                 GError                 **error);

  GTlsCertificate*      (*lookup_certificate_issuer)            (GTlsDatabase            *self,
                                                                 GTlsCertificate         *certificate,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseLookupFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);

  void                  (*lookup_certificate_issuer_async)      (GTlsDatabase            *self,
                                                                 GTlsCertificate         *certificate,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseLookupFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);

  GTlsCertificate*      (*lookup_certificate_issuer_finish)     (GTlsDatabase            *self,
                                                                 GAsyncResult            *result,
                                                                 GError                 **error);

  GList*                (*lookup_certificates_issued_by)        (GTlsDatabase            *self,
                                                                 GByteArray              *issuer_raw_dn,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseLookupFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GError                 **error);

  void                  (*lookup_certificates_issued_by_async)  (GTlsDatabase            *self,
                                                                 GByteArray              *issuer_raw_dn,
                                                                 GTlsInteraction         *interaction,
                                                                 GTlsDatabaseLookupFlags  flags,
                                                                 GCancellable            *cancellable,
                                                                 GAsyncReadyCallback      callback,
                                                                 gpointer                 user_data);

  GList*                (*lookup_certificates_issued_by_finish) (GTlsDatabase            *self,
                                                                 GAsyncResult            *result,
                                                                 GError                 **error);

  
  
  gpointer padding[16];
};

extern
GType                g_tls_database_get_type                              (void) ;

extern
GTlsCertificateFlags g_tls_database_verify_chain                          (GTlsDatabase            *self,
                                                                           GTlsCertificate         *chain,
                                                                           const gchar             *purpose,
                                                                           GSocketConnectable      *identity,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseVerifyFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GError                 **error);

extern
void                 g_tls_database_verify_chain_async                    (GTlsDatabase            *self,
                                                                           GTlsCertificate         *chain,
                                                                           const gchar             *purpose,
                                                                           GSocketConnectable      *identity,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseVerifyFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GAsyncReadyCallback      callback,
                                                                           gpointer                 user_data);

extern
GTlsCertificateFlags g_tls_database_verify_chain_finish                   (GTlsDatabase            *self,
                                                                           GAsyncResult            *result,
                                                                           GError                 **error);

extern
gchar*               g_tls_database_create_certificate_handle             (GTlsDatabase            *self,
                                                                           GTlsCertificate         *certificate);

extern
GTlsCertificate*     g_tls_database_lookup_certificate_for_handle         (GTlsDatabase            *self,
                                                                           const gchar             *handle,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseLookupFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GError                 **error);

extern
void                 g_tls_database_lookup_certificate_for_handle_async   (GTlsDatabase            *self,
                                                                           const gchar             *handle,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseLookupFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GAsyncReadyCallback      callback,
                                                                           gpointer                 user_data);

extern
GTlsCertificate*     g_tls_database_lookup_certificate_for_handle_finish  (GTlsDatabase            *self,
                                                                           GAsyncResult            *result,
                                                                           GError                 **error);

extern
GTlsCertificate*     g_tls_database_lookup_certificate_issuer             (GTlsDatabase            *self,
                                                                           GTlsCertificate         *certificate,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseLookupFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GError                 **error);

extern
void                 g_tls_database_lookup_certificate_issuer_async       (GTlsDatabase            *self,
                                                                           GTlsCertificate         *certificate,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseLookupFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GAsyncReadyCallback      callback,
                                                                           gpointer                 user_data);

extern
GTlsCertificate*     g_tls_database_lookup_certificate_issuer_finish      (GTlsDatabase            *self,
                                                                           GAsyncResult            *result,
                                                                           GError                 **error);

extern
GList*               g_tls_database_lookup_certificates_issued_by         (GTlsDatabase            *self,
                                                                           GByteArray              *issuer_raw_dn,
                                                                           GTlsInteraction         *interaction,
                                                                           GTlsDatabaseLookupFlags  flags,
                                                                           GCancellable            *cancellable,
                                                                           GError                 **error);

extern
void                 g_tls_database_lookup_certificates_issued_by_async    (GTlsDatabase            *self,
                                                                            GByteArray              *issuer_raw_dn,
                                                                            GTlsInteraction         *interaction,
                                                                            GTlsDatabaseLookupFlags  flags,
                                                                            GCancellable            *cancellable,
                                                                            GAsyncReadyCallback      callback,
                                                                            gpointer                 user_data);

extern
GList*               g_tls_database_lookup_certificates_issued_by_finish   (GTlsDatabase            *self,
                                                                            GAsyncResult            *result,
                                                                            GError                 **error);



#line 248 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsdatabase.h"
#line 144 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsfiledatabase.h"



















#line 21 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsfiledatabase.h"










typedef struct _GTlsFileDatabaseInterface GTlsFileDatabaseInterface;








struct _GTlsFileDatabaseInterface
{
  GTypeInterface g_iface;

  
  
  gpointer padding[8];
};

extern
GType                        g_tls_file_database_get_type              (void) ;

extern
GTlsDatabase*                g_tls_file_database_new                   (const gchar  *anchors,
                                                                        GError      **error);



#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsfiledatabase.h"
#line 145 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsinteraction.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsinteraction.h"












typedef struct _GTlsInteractionClass   GTlsInteractionClass;
typedef struct _GTlsInteractionPrivate GTlsInteractionPrivate;

struct _GTlsInteraction
{
  
  GObject parent_instance;
  GTlsInteractionPrivate *priv;
};

struct _GTlsInteractionClass
{
  
  GObjectClass parent_class;

  
  GTlsInteractionResult  (* ask_password)        (GTlsInteraction    *interaction,
                                                  GTlsPassword       *password,
                                                  GCancellable       *cancellable,
                                                  GError            **error);

  void                   (* ask_password_async)  (GTlsInteraction    *interaction,
                                                  GTlsPassword       *password,
                                                  GCancellable       *cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer            user_data);

  GTlsInteractionResult  (* ask_password_finish) (GTlsInteraction    *interaction,
                                                  GAsyncResult       *result,
                                                  GError            **error);

  GTlsInteractionResult  (* request_certificate)        (GTlsInteraction              *interaction,
                                                         GTlsConnection               *connection,
                                                         GTlsCertificateRequestFlags   flags,
                                                         GCancellable                 *cancellable,
                                                         GError                      **error);

  void                   (* request_certificate_async)  (GTlsInteraction              *interaction,
                                                         GTlsConnection               *connection,
                                                         GTlsCertificateRequestFlags   flags,
                                                         GCancellable                 *cancellable,
                                                         GAsyncReadyCallback           callback,
                                                         gpointer                      user_data);

  GTlsInteractionResult  (* request_certificate_finish) (GTlsInteraction              *interaction,
                                                         GAsyncResult                 *result,
                                                         GError                      **error);

  
  
  gpointer padding[21];
};

extern
GType                  g_tls_interaction_get_type            (void) ;

extern
GTlsInteractionResult  g_tls_interaction_invoke_ask_password (GTlsInteraction    *interaction,
                                                              GTlsPassword       *password,
                                                              GCancellable       *cancellable,
                                                              GError            **error);

extern
GTlsInteractionResult  g_tls_interaction_ask_password        (GTlsInteraction    *interaction,
                                                              GTlsPassword       *password,
                                                              GCancellable       *cancellable,
                                                              GError            **error);

extern
void                   g_tls_interaction_ask_password_async  (GTlsInteraction    *interaction,
                                                              GTlsPassword       *password,
                                                              GCancellable       *cancellable,
                                                              GAsyncReadyCallback callback,
                                                              gpointer            user_data);

extern
GTlsInteractionResult  g_tls_interaction_ask_password_finish (GTlsInteraction    *interaction,
                                                              GAsyncResult       *result,
                                                              GError            **error);

extern
GTlsInteractionResult  g_tls_interaction_invoke_request_certificate (GTlsInteraction              *interaction,
                                                                     GTlsConnection               *connection,
                                                                     GTlsCertificateRequestFlags   flags,
                                                                     GCancellable                 *cancellable,
                                                                     GError                      **error);

extern
GTlsInteractionResult  g_tls_interaction_request_certificate        (GTlsInteraction              *interaction,
                                                                     GTlsConnection               *connection,
                                                                     GTlsCertificateRequestFlags   flags,
                                                                     GCancellable                 *cancellable,
                                                                     GError                      **error);

extern
void                   g_tls_interaction_request_certificate_async  (GTlsInteraction              *interaction,
                                                                     GTlsConnection               *connection,
                                                                     GTlsCertificateRequestFlags   flags,
                                                                     GCancellable                 *cancellable,
                                                                     GAsyncReadyCallback           callback,
                                                                     gpointer                      user_data);

extern
GTlsInteractionResult  g_tls_interaction_request_certificate_finish (GTlsInteraction              *interaction,
                                                                     GAsyncResult                 *result,
                                                                     GError                      **error);



#line 149 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsinteraction.h"
#line 146 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsserverconnection.h"























#line 25 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsserverconnection.h"


















typedef struct _GTlsServerConnectionInterface GTlsServerConnectionInterface;









struct _GTlsServerConnectionInterface
{
  GTypeInterface g_iface;

};

extern
GType                 g_tls_server_connection_get_type                 (void) ;

extern
GIOStream *           g_tls_server_connection_new                      (GIOStream        *base_io_stream,
									GTlsCertificate  *certificate,
									GError          **error);



#line 70 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlsserverconnection.h"
#line 147 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlspassword.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlspassword.h"












typedef struct _GTlsPasswordClass   GTlsPasswordClass;
typedef struct _GTlsPasswordPrivate GTlsPasswordPrivate;

struct _GTlsPassword
{
  GObject parent_instance;

  GTlsPasswordPrivate *priv;
};










struct _GTlsPasswordClass
{
  GObjectClass parent_class;

  

  const guchar *    ( *get_value)            (GTlsPassword  *password,
                                              gsize         *length);

  void              ( *set_value)            (GTlsPassword  *password,
                                              guchar        *value,
                                              gssize         length,
                                              GDestroyNotify destroy);

  const gchar*      ( *get_default_warning)  (GTlsPassword  *password);

  
  
  gpointer padding[4];
};

extern
GType             g_tls_password_get_type            (void) ;

extern
GTlsPassword *    g_tls_password_new                 (GTlsPasswordFlags  flags,
                                                      const gchar       *description);

extern
const guchar *    g_tls_password_get_value           (GTlsPassword      *password,
                                                      gsize             *length);
extern
void              g_tls_password_set_value           (GTlsPassword      *password,
                                                      const guchar      *value,
                                                      gssize             length);
extern
void              g_tls_password_set_value_full      (GTlsPassword      *password,
                                                      guchar            *value,
                                                      gssize             length,
                                                      GDestroyNotify     destroy);

extern
GTlsPasswordFlags g_tls_password_get_flags           (GTlsPassword      *password);
extern
void              g_tls_password_set_flags           (GTlsPassword      *password,
                                                      GTlsPasswordFlags  flags);

extern
const gchar*      g_tls_password_get_description     (GTlsPassword      *password);
extern
void              g_tls_password_set_description     (GTlsPassword      *password,
                                                      const gchar       *description);

extern
const gchar *     g_tls_password_get_warning         (GTlsPassword      *password);
extern
void              g_tls_password_set_warning         (GTlsPassword      *password,
                                                      const gchar       *warning);



#line 120 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gtlspassword.h"
#line 148 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvfs.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvfs.h"






























typedef GFile * (* GVfsFileLookupFunc) (GVfs       *vfs,
                                        const char *identifier,
                                        gpointer    user_data);














typedef struct _GVfsClass    GVfsClass;

struct _GVfs
{
  GObject parent_instance;
};

struct _GVfsClass
{
  GObjectClass parent_class;

  

  gboolean              (* is_active)                 (GVfs       *vfs);
  GFile               * (* get_file_for_path)         (GVfs       *vfs,
                                                       const char *path);
  GFile               * (* get_file_for_uri)          (GVfs       *vfs,
                                                       const char *uri);
  const gchar * const * (* get_supported_uri_schemes) (GVfs       *vfs);
  GFile               * (* parse_name)                (GVfs       *vfs,
                                                       const char *parse_name);

  
  void                  (* local_file_add_info)       (GVfs       *vfs,
						       const char *filename,
						       guint64     device,
						       GFileAttributeMatcher *attribute_matcher,
						       GFileInfo  *info,
						       GCancellable *cancellable,
						       gpointer   *extra_data,
						       GDestroyNotify *free_extra_data);
  void                  (* add_writable_namespaces)   (GVfs       *vfs,
						       GFileAttributeInfoList *list);
  gboolean              (* local_file_set_attributes) (GVfs       *vfs,
						       const char *filename,
						       GFileInfo  *info,
                                                       GFileQueryInfoFlags flags,
                                                       GCancellable *cancellable,
						       GError    **error);
  void                  (* local_file_removed)        (GVfs       *vfs,
						       const char *filename);
  void                  (* local_file_moved)          (GVfs       *vfs,
						       const char *source,
						       const char *dest);
  GIcon *               (* deserialize_icon)          (GVfs       *vfs,
                                                       GVariant   *value);
  
  void (*_g_reserved1) (void);
  void (*_g_reserved2) (void);
  void (*_g_reserved3) (void);
  void (*_g_reserved4) (void);
  void (*_g_reserved5) (void);
  void (*_g_reserved6) (void);
};

extern
GType                 g_vfs_get_type                  (void) ;

extern
gboolean              g_vfs_is_active                 (GVfs       *vfs);
extern
GFile *               g_vfs_get_file_for_path         (GVfs       *vfs,
                                                       const char *path);
extern
GFile *               g_vfs_get_file_for_uri          (GVfs       *vfs,
                                                       const char *uri);
extern
const gchar* const * g_vfs_get_supported_uri_schemes  (GVfs       *vfs);

extern
GFile *               g_vfs_parse_name                (GVfs       *vfs,
                                                       const char *parse_name);

extern
GVfs *                g_vfs_get_default               (void);
extern
GVfs *                g_vfs_get_local                 (void);

extern
gboolean              g_vfs_register_uri_scheme       (GVfs               *vfs,
                                                       const char         *scheme,
                                                       GVfsFileLookupFunc  uri_func,
                                                       gpointer            uri_data,
                                                       GDestroyNotify      uri_destroy,
                                                       GVfsFileLookupFunc  parse_name_func,
                                                       gpointer            parse_name_data,
                                                       GDestroyNotify      parse_name_destroy);
extern
gboolean              g_vfs_unregister_uri_scheme     (GVfs               *vfs,
                                                       const char         *scheme);




#line 169 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvfs.h"
#line 149 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvolume.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvolume.h"






























































































typedef struct _GVolumeIface    GVolumeIface;

struct _GVolumeIface
{
  GTypeInterface g_iface;

  

  void        (* changed)               (GVolume             *volume);
  void        (* removed)               (GVolume             *volume);

  

  char      * (* get_name)              (GVolume             *volume);
  GIcon     * (* get_icon)              (GVolume             *volume);
  char      * (* get_uuid)              (GVolume             *volume);
  GDrive    * (* get_drive)             (GVolume             *volume);
  GMount    * (* get_mount)             (GVolume             *volume);
  gboolean    (* can_mount)             (GVolume             *volume);
  gboolean    (* can_eject)             (GVolume             *volume);
  void        (* mount_fn)              (GVolume             *volume,
                                         GMountMountFlags     flags,
                                         GMountOperation     *mount_operation,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean    (* mount_finish)          (GVolume             *volume,
                                         GAsyncResult        *result,
                                         GError             **error);
  void        (* eject)                 (GVolume             *volume,
                                         GMountUnmountFlags   flags,
                                         GCancellable        *cancellable,
                                         GAsyncReadyCallback  callback,
                                         gpointer             user_data);
  gboolean    (* eject_finish)          (GVolume             *volume,
                                         GAsyncResult        *result,
                                         GError             **error);

  char      * (* get_identifier)        (GVolume             *volume,
                                         const char          *kind);
  char     ** (* enumerate_identifiers) (GVolume             *volume);

  gboolean    (* should_automount)      (GVolume             *volume);

  GFile     * (* get_activation_root)   (GVolume             *volume);

  void        (* eject_with_operation)      (GVolume             *volume,
                                             GMountUnmountFlags   flags,
                                             GMountOperation     *mount_operation,
                                             GCancellable        *cancellable,
                                             GAsyncReadyCallback  callback,
                                             gpointer             user_data);
  gboolean    (* eject_with_operation_finish) (GVolume           *volume,
                                             GAsyncResult        *result,
                                             GError             **error);

  const gchar * (* get_sort_key)        (GVolume             *volume);
  GIcon       * (* get_symbolic_icon)   (GVolume             *volume);
};

extern
GType    g_volume_get_type              (void) ;

extern
char *   g_volume_get_name              (GVolume              *volume);
extern
GIcon *  g_volume_get_icon              (GVolume              *volume);
extern
GIcon *  g_volume_get_symbolic_icon     (GVolume              *volume);
extern
char *   g_volume_get_uuid              (GVolume              *volume);
extern
GDrive * g_volume_get_drive             (GVolume              *volume);
extern
GMount * g_volume_get_mount             (GVolume              *volume);
extern
gboolean g_volume_can_mount             (GVolume              *volume);
extern
gboolean g_volume_can_eject             (GVolume              *volume);
extern
gboolean g_volume_should_automount      (GVolume              *volume);
extern
void     g_volume_mount                 (GVolume              *volume,
					 GMountMountFlags      flags,
					 GMountOperation      *mount_operation,
					 GCancellable         *cancellable,
					 GAsyncReadyCallback   callback,
					 gpointer              user_data);
extern
gboolean g_volume_mount_finish          (GVolume              *volume,
					 GAsyncResult         *result,
					 GError              **error);
__declspec(deprecated("is deprecated. Use '" "g_volume_eject_with_operation" "' instead")) extern
void     g_volume_eject                 (GVolume              *volume,
                                         GMountUnmountFlags    flags,
                                         GCancellable         *cancellable,
                                         GAsyncReadyCallback   callback,
                                         gpointer              user_data);

__declspec(deprecated("is deprecated. Use '" "g_volume_eject_with_operation_finish" "' instead")) extern
gboolean g_volume_eject_finish          (GVolume              *volume,
                                         GAsyncResult         *result,
                                         GError              **error);
extern
char *   g_volume_get_identifier        (GVolume              *volume,
					 const char           *kind);
extern
char **  g_volume_enumerate_identifiers (GVolume              *volume);

extern
GFile *  g_volume_get_activation_root   (GVolume              *volume);

extern
void        g_volume_eject_with_operation     (GVolume             *volume,
                                               GMountUnmountFlags   flags,
                                               GMountOperation     *mount_operation,
                                               GCancellable        *cancellable,
                                               GAsyncReadyCallback  callback,
                                               gpointer             user_data);
extern
gboolean    g_volume_eject_with_operation_finish (GVolume          *volume,
                                               GAsyncResult        *result,
                                               GError             **error);

extern
const gchar *g_volume_get_sort_key            (GVolume              *volume);



#line 252 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gvolume.h"
#line 150 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gzlibcompressor.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gzlibcompressor.h"













typedef struct _GZlibCompressorClass   GZlibCompressorClass;

struct _GZlibCompressorClass
{
  GObjectClass parent_class;
};

extern
GType            g_zlib_compressor_get_type (void) ;

extern
GZlibCompressor *g_zlib_compressor_new (GZlibCompressorFormat format,
					int level);

extern
GFileInfo       *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);
extern
void             g_zlib_compressor_set_file_info (GZlibCompressor *compressor,
                                                  GFileInfo       *file_info);



#line 63 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gzlibcompressor.h"
#line 152 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gzlibdecompressor.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gzlibdecompressor.h"













typedef struct _GZlibDecompressorClass   GZlibDecompressorClass;

struct _GZlibDecompressorClass
{
  GObjectClass parent_class;
};

extern
GType              g_zlib_decompressor_get_type (void) ;

extern
GZlibDecompressor *g_zlib_decompressor_new (GZlibCompressorFormat format);

extern
GFileInfo         *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);



#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gzlibdecompressor.h"
#line 153 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusinterface.h"








































typedef struct _GDBusInterfaceIface GDBusInterfaceIface;













struct _GDBusInterfaceIface
{
  GTypeInterface parent_iface;

  
  GDBusInterfaceInfo   *(*get_info)   (GDBusInterface      *interface_);
  GDBusObject          *(*get_object) (GDBusInterface      *interface_);
  void                  (*set_object) (GDBusInterface      *interface_,
                                       GDBusObject         *object);
  GDBusObject          *(*dup_object) (GDBusInterface      *interface_);
};

extern
GType                 g_dbus_interface_get_type         (void) ;
extern
GDBusInterfaceInfo   *g_dbus_interface_get_info         (GDBusInterface      *interface_);
extern
GDBusObject          *g_dbus_interface_get_object       (GDBusInterface      *interface_);
extern
void                  g_dbus_interface_set_object       (GDBusInterface      *interface_,
                                                         GDBusObject         *object);
extern
GDBusObject          *g_dbus_interface_dup_object       (GDBusInterface      *interface_);



#line 82 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusinterface.h"
#line 154 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusinterfaceskeleton.h"


































typedef struct _GDBusInterfaceSkeletonClass   GDBusInterfaceSkeletonClass;
typedef struct _GDBusInterfaceSkeletonPrivate GDBusInterfaceSkeletonPrivate;









struct _GDBusInterfaceSkeleton
{
  
  GObject parent_instance;
  GDBusInterfaceSkeletonPrivate *priv;
};














struct _GDBusInterfaceSkeletonClass
{
  GObjectClass parent_class;

  
  GDBusInterfaceInfo   *(*get_info)       (GDBusInterfaceSkeleton  *interface_);
  GDBusInterfaceVTable *(*get_vtable)     (GDBusInterfaceSkeleton  *interface_);
  GVariant             *(*get_properties) (GDBusInterfaceSkeleton  *interface_);
  void                  (*flush)          (GDBusInterfaceSkeleton  *interface_);

  
  gpointer vfunc_padding[8];
  

  
  gboolean (*g_authorize_method) (GDBusInterfaceSkeleton  *interface_,
                                  GDBusMethodInvocation   *invocation);

  
  gpointer signal_padding[8];
};

extern
GType                        g_dbus_interface_skeleton_get_type        (void) ;
extern
GDBusInterfaceSkeletonFlags  g_dbus_interface_skeleton_get_flags       (GDBusInterfaceSkeleton      *interface_);
extern
void                         g_dbus_interface_skeleton_set_flags       (GDBusInterfaceSkeleton      *interface_,
                                                                        GDBusInterfaceSkeletonFlags  flags);
extern
GDBusInterfaceInfo          *g_dbus_interface_skeleton_get_info        (GDBusInterfaceSkeleton      *interface_);
extern
GDBusInterfaceVTable        *g_dbus_interface_skeleton_get_vtable      (GDBusInterfaceSkeleton      *interface_);
extern
GVariant                    *g_dbus_interface_skeleton_get_properties  (GDBusInterfaceSkeleton      *interface_);
extern
void                         g_dbus_interface_skeleton_flush           (GDBusInterfaceSkeleton      *interface_);

extern
gboolean                     g_dbus_interface_skeleton_export          (GDBusInterfaceSkeleton      *interface_,
                                                                        GDBusConnection             *connection,
                                                                        const gchar                 *object_path,
                                                                        GError                     **error);
extern
void                         g_dbus_interface_skeleton_unexport        (GDBusInterfaceSkeleton      *interface_);
extern
void                g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton      *interface_,
                                                                        GDBusConnection             *connection);

extern
GDBusConnection             *g_dbus_interface_skeleton_get_connection  (GDBusInterfaceSkeleton      *interface_);
extern
GList                       *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton      *interface_);
extern
gboolean                     g_dbus_interface_skeleton_has_connection  (GDBusInterfaceSkeleton      *interface_,
                                                                        GDBusConnection             *connection);
extern
const gchar                 *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton      *interface_);



#line 128 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusinterfaceskeleton.h"
#line 155 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobject.h"
































typedef struct _GDBusObjectIface GDBusObjectIface;














struct _GDBusObjectIface
{
  GTypeInterface parent_iface;

  
  const gchar     *(*get_object_path) (GDBusObject  *object);
  GList           *(*get_interfaces)  (GDBusObject  *object);
  GDBusInterface  *(*get_interface)   (GDBusObject  *object,
                                       const gchar  *interface_name);

  
  void (*interface_added)   (GDBusObject     *object,
                             GDBusInterface  *interface_);
  void (*interface_removed) (GDBusObject     *object,
                             GDBusInterface  *interface_);

};

extern
GType            g_dbus_object_get_type        (void) ;
extern
const gchar     *g_dbus_object_get_object_path (GDBusObject  *object);
extern
GList           *g_dbus_object_get_interfaces  (GDBusObject  *object);
extern
GDBusInterface  *g_dbus_object_get_interface   (GDBusObject  *object,
                                                const gchar  *interface_name);



#line 79 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobject.h"
#line 156 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectskeleton.h"


































typedef struct _GDBusObjectSkeletonClass   GDBusObjectSkeletonClass;
typedef struct _GDBusObjectSkeletonPrivate GDBusObjectSkeletonPrivate;









struct _GDBusObjectSkeleton
{
  
  GObject parent_instance;
  GDBusObjectSkeletonPrivate *priv;
};










struct _GDBusObjectSkeletonClass
{
  GObjectClass parent_class;

  
  gboolean (*authorize_method) (GDBusObjectSkeleton       *object,
                                GDBusInterfaceSkeleton    *interface_,
                                GDBusMethodInvocation *invocation);

  
  gpointer padding[8];
};

extern
GType                g_dbus_object_skeleton_get_type                  (void) ;
extern
GDBusObjectSkeleton *g_dbus_object_skeleton_new                       (const gchar            *object_path);
extern
void                 g_dbus_object_skeleton_flush                     (GDBusObjectSkeleton    *object);
extern
void                 g_dbus_object_skeleton_add_interface             (GDBusObjectSkeleton    *object,
                                                                       GDBusInterfaceSkeleton *interface_);
extern
void                 g_dbus_object_skeleton_remove_interface          (GDBusObjectSkeleton    *object,
                                                                       GDBusInterfaceSkeleton *interface_);
extern
void                 g_dbus_object_skeleton_remove_interface_by_name  (GDBusObjectSkeleton    *object,
                                                                       const gchar            *interface_name);
extern
void                 g_dbus_object_skeleton_set_object_path           (GDBusObjectSkeleton    *object,
                                                                       const gchar            *object_path);



#line 97 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectskeleton.h"
#line 157 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectproxy.h"


































typedef struct _GDBusObjectProxyClass   GDBusObjectProxyClass;
typedef struct _GDBusObjectProxyPrivate GDBusObjectProxyPrivate;









struct _GDBusObjectProxy
{
  
  GObject parent_instance;
  GDBusObjectProxyPrivate *priv;
};









struct _GDBusObjectProxyClass
{
  GObjectClass parent_class;

  
  gpointer padding[8];
};

extern
GType             g_dbus_object_proxy_get_type       (void) ;
extern
GDBusObjectProxy *g_dbus_object_proxy_new            (GDBusConnection   *connection,
                                                      const gchar       *object_path);
extern
GDBusConnection  *g_dbus_object_proxy_get_connection (GDBusObjectProxy  *proxy);



#line 80 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectproxy.h"
#line 158 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectmanager.h"
































typedef struct _GDBusObjectManagerIface GDBusObjectManagerIface;

















struct _GDBusObjectManagerIface
{
  GTypeInterface parent_iface;

  
  const gchar     *(*get_object_path) (GDBusObjectManager    *manager);
  GList           *(*get_objects)     (GDBusObjectManager    *manager);
  GDBusObject     *(*get_object)      (GDBusObjectManager    *manager,
                                       const gchar           *object_path);
  GDBusInterface  *(*get_interface)   (GDBusObjectManager    *manager,
                                       const gchar           *object_path,
                                       const gchar           *interface_name);

  
  void    (*object_added)                 (GDBusObjectManager   *manager,
                                           GDBusObject          *object);
  void    (*object_removed)               (GDBusObjectManager   *manager,
                                           GDBusObject          *object);

  void    (*interface_added)              (GDBusObjectManager   *manager,
                                           GDBusObject          *object,
                                           GDBusInterface       *interface_);
  void    (*interface_removed)            (GDBusObjectManager   *manager,
                                           GDBusObject          *object,
                                           GDBusInterface       *interface_);
};

extern
GType            g_dbus_object_manager_get_type        (void) ;
extern
const gchar     *g_dbus_object_manager_get_object_path (GDBusObjectManager    *manager);
extern
GList           *g_dbus_object_manager_get_objects     (GDBusObjectManager    *manager);
extern
GDBusObject     *g_dbus_object_manager_get_object      (GDBusObjectManager    *manager,
                                                        const gchar           *object_path);
extern
GDBusInterface  *g_dbus_object_manager_get_interface   (GDBusObjectManager    *manager,
                                                        const gchar           *object_path,
                                                        const gchar           *interface_name);



#line 95 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectmanager.h"
#line 159 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectmanagerclient.h"


































typedef struct _GDBusObjectManagerClientClass   GDBusObjectManagerClientClass;
typedef struct _GDBusObjectManagerClientPrivate GDBusObjectManagerClientPrivate;









struct _GDBusObjectManagerClient
{
  
  GObject parent_instance;
  GDBusObjectManagerClientPrivate *priv;
};











struct _GDBusObjectManagerClientClass
{
  GObjectClass parent_class;

  
  void    (*interface_proxy_signal)             (GDBusObjectManagerClient *manager,
                                                 GDBusObjectProxy         *object_proxy,
                                                 GDBusProxy               *interface_proxy,
                                                 const gchar              *sender_name,
                                                 const gchar              *signal_name,
                                                 GVariant                 *parameters);

  void    (*interface_proxy_properties_changed) (GDBusObjectManagerClient   *manager,
                                                 GDBusObjectProxy           *object_proxy,
                                                 GDBusProxy                 *interface_proxy,
                                                 GVariant                   *changed_properties,
                                                 const gchar* const         *invalidated_properties);

  
  gpointer padding[8];
};

extern
GType                         g_dbus_object_manager_client_get_type           (void) ;
extern
void                          g_dbus_object_manager_client_new                (GDBusConnection               *connection,
                                                                               GDBusObjectManagerClientFlags  flags,
                                                                               const gchar                   *name,
                                                                               const gchar                   *object_path,
                                                                               GDBusProxyTypeFunc             get_proxy_type_func,
                                                                               gpointer                       get_proxy_type_user_data,
                                                                               GDestroyNotify                 get_proxy_type_destroy_notify,
                                                                               GCancellable                  *cancellable,
                                                                               GAsyncReadyCallback            callback,
                                                                               gpointer                       user_data);
extern
GDBusObjectManager           *g_dbus_object_manager_client_new_finish         (GAsyncResult                  *res,
                                                                               GError                       **error);
extern
GDBusObjectManager           *g_dbus_object_manager_client_new_sync           (GDBusConnection               *connection,
                                                                               GDBusObjectManagerClientFlags  flags,
                                                                               const gchar                   *name,
                                                                               const gchar                   *object_path,
                                                                               GDBusProxyTypeFunc             get_proxy_type_func,
                                                                               gpointer                       get_proxy_type_user_data,
                                                                               GDestroyNotify                 get_proxy_type_destroy_notify,
                                                                               GCancellable                  *cancellable,
                                                                               GError                       **error);
extern
void                          g_dbus_object_manager_client_new_for_bus        (GBusType                       bus_type,
                                                                               GDBusObjectManagerClientFlags  flags,
                                                                               const gchar                   *name,
                                                                               const gchar                   *object_path,
                                                                               GDBusProxyTypeFunc             get_proxy_type_func,
                                                                               gpointer                       get_proxy_type_user_data,
                                                                               GDestroyNotify                 get_proxy_type_destroy_notify,
                                                                               GCancellable                  *cancellable,
                                                                               GAsyncReadyCallback            callback,
                                                                               gpointer                       user_data);
extern
GDBusObjectManager           *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult                  *res,
                                                                               GError                       **error);
extern
GDBusObjectManager           *g_dbus_object_manager_client_new_for_bus_sync   (GBusType                       bus_type,
                                                                               GDBusObjectManagerClientFlags  flags,
                                                                               const gchar                   *name,
                                                                               const gchar                   *object_path,
                                                                               GDBusProxyTypeFunc             get_proxy_type_func,
                                                                               gpointer                       get_proxy_type_user_data,
                                                                               GDestroyNotify                 get_proxy_type_destroy_notify,
                                                                               GCancellable                  *cancellable,
                                                                               GError                       **error);
extern
GDBusConnection              *g_dbus_object_manager_client_get_connection     (GDBusObjectManagerClient      *manager);
extern
GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags          (GDBusObjectManagerClient      *manager);
extern
const gchar                  *g_dbus_object_manager_client_get_name           (GDBusObjectManagerClient      *manager);
extern
gchar                        *g_dbus_object_manager_client_get_name_owner     (GDBusObjectManagerClient      *manager);



#line 147 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectmanagerclient.h"
#line 160 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectmanagerserver.h"


































typedef struct _GDBusObjectManagerServerClass   GDBusObjectManagerServerClass;
typedef struct _GDBusObjectManagerServerPrivate GDBusObjectManagerServerPrivate;









struct _GDBusObjectManagerServer
{
  
  GObject parent_instance;
  GDBusObjectManagerServerPrivate *priv;
};









struct _GDBusObjectManagerServerClass
{
  GObjectClass parent_class;

  
  gpointer padding[8];
};

extern
GType                     g_dbus_object_manager_server_get_type            (void) ;
extern
GDBusObjectManagerServer *g_dbus_object_manager_server_new                 (const gchar               *object_path);
extern
GDBusConnection          *g_dbus_object_manager_server_get_connection      (GDBusObjectManagerServer  *manager);
extern
void                      g_dbus_object_manager_server_set_connection      (GDBusObjectManagerServer  *manager,
                                                                            GDBusConnection           *connection);
extern
void                      g_dbus_object_manager_server_export              (GDBusObjectManagerServer  *manager,
                                                                            GDBusObjectSkeleton       *object);
extern
void                      g_dbus_object_manager_server_export_uniquely     (GDBusObjectManagerServer  *manager,
                                                                            GDBusObjectSkeleton       *object);
extern
gboolean                  g_dbus_object_manager_server_is_exported         (GDBusObjectManagerServer  *manager,
                                                                            GDBusObjectSkeleton       *object);
extern
gboolean                  g_dbus_object_manager_server_unexport            (GDBusObjectManagerServer  *manager,
                                                                            const gchar               *object_path);



#line 94 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusobjectmanagerserver.h"
#line 161 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusactiongroup.h"

























#line 27 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusactiongroup.h"

















extern
GType                   g_dbus_action_group_get_type                  (void) ;

extern
GDBusActionGroup *      g_dbus_action_group_get                       (GDBusConnection        *connection,
                                                                       const gchar            *bus_name,
                                                                       const gchar            *object_path);



#line 55 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusactiongroup.h"
#line 162 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gremoteactiongroup.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gremoteactiongroup.h"















typedef struct _GRemoteActionGroupInterface                 GRemoteActionGroupInterface;

struct _GRemoteActionGroupInterface
{
  GTypeInterface g_iface;

  void (* activate_action_full)     (GRemoteActionGroup *remote,
                                     const gchar        *action_name,
                                     GVariant           *parameter,
                                     GVariant           *platform_data);

  void (* change_action_state_full) (GRemoteActionGroup *remote,
                                     const gchar        *action_name,
                                     GVariant           *value,
                                     GVariant           *platform_data);
};

extern
GType                   g_remote_action_group_get_type                  (void) ;

extern
void                    g_remote_action_group_activate_action_full      (GRemoteActionGroup *remote,
                                                                         const gchar        *action_name,
                                                                         GVariant           *parameter,
                                                                         GVariant           *platform_data);

extern
void                    g_remote_action_group_change_action_state_full  (GRemoteActionGroup *remote,
                                                                         const gchar        *action_name,
                                                                         GVariant           *value,
                                                                         GVariant           *platform_data);



#line 76 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gremoteactiongroup.h"
#line 163 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmenumodel.h"




























































































































typedef struct _GMenuModelPrivate                           GMenuModelPrivate;
typedef struct _GMenuModelClass                             GMenuModelClass;

typedef struct _GMenuAttributeIterPrivate                   GMenuAttributeIterPrivate;
typedef struct _GMenuAttributeIterClass                     GMenuAttributeIterClass;
typedef struct _GMenuAttributeIter                          GMenuAttributeIter;

typedef struct _GMenuLinkIterPrivate                        GMenuLinkIterPrivate;
typedef struct _GMenuLinkIterClass                          GMenuLinkIterClass;
typedef struct _GMenuLinkIter                               GMenuLinkIter;

struct _GMenuModel
{
  GObject            parent_instance;
  GMenuModelPrivate *priv;
};

















struct _GMenuModelClass
{
  GObjectClass parent_class;

  gboolean              (*is_mutable)                       (GMenuModel          *model);
  gint                  (*get_n_items)                      (GMenuModel          *model);
  void                  (*get_item_attributes)              (GMenuModel          *model,
                                                             gint                 item_index,
                                                             GHashTable         **attributes);
  GMenuAttributeIter *  (*iterate_item_attributes)          (GMenuModel          *model,
                                                             gint                 item_index);
  GVariant *            (*get_item_attribute_value)         (GMenuModel          *model,
                                                             gint                 item_index,
                                                             const gchar         *attribute,
                                                             const GVariantType  *expected_type);
  void                  (*get_item_links)                   (GMenuModel          *model,
                                                             gint                 item_index,
                                                             GHashTable         **links);
  GMenuLinkIter *       (*iterate_item_links)               (GMenuModel          *model,
                                                             gint                 item_index);
  GMenuModel *          (*get_item_link)                    (GMenuModel          *model,
                                                             gint                 item_index,
                                                             const gchar         *link);
};

extern
GType                   g_menu_model_get_type                           (void) ;

extern
gboolean                g_menu_model_is_mutable                         (GMenuModel         *model);
extern
gint                    g_menu_model_get_n_items                        (GMenuModel         *model);

extern
GMenuAttributeIter *    g_menu_model_iterate_item_attributes            (GMenuModel         *model,
                                                                         gint                item_index);
extern
GVariant *              g_menu_model_get_item_attribute_value           (GMenuModel         *model,
                                                                         gint                item_index,
                                                                         const gchar        *attribute,
                                                                         const GVariantType *expected_type);
extern
gboolean                g_menu_model_get_item_attribute                 (GMenuModel         *model,
                                                                         gint                item_index,
                                                                         const gchar        *attribute,
                                                                         const gchar        *format_string,
                                                                         ...);
extern
GMenuLinkIter *         g_menu_model_iterate_item_links                 (GMenuModel         *model,
                                                                         gint                item_index);
extern
GMenuModel *            g_menu_model_get_item_link                      (GMenuModel         *model,
                                                                         gint                item_index,
                                                                         const gchar        *link);

extern
void                    g_menu_model_items_changed                      (GMenuModel         *model,
                                                                         gint                position,
                                                                         gint                removed,
                                                                         gint                added);














struct _GMenuAttributeIter
{
  GObject parent_instance;
  GMenuAttributeIterPrivate *priv;
};

struct _GMenuAttributeIterClass
{
  GObjectClass parent_class;

  gboolean      (*get_next) (GMenuAttributeIter  *iter,
                             const gchar        **out_name,
                             GVariant           **value);
};

extern
GType                   g_menu_attribute_iter_get_type                  (void) ;

extern
gboolean                g_menu_attribute_iter_get_next                  (GMenuAttributeIter  *iter,
                                                                         const gchar        **out_name,
                                                                         GVariant           **value);
extern
gboolean                g_menu_attribute_iter_next                      (GMenuAttributeIter  *iter);
extern
const gchar *           g_menu_attribute_iter_get_name                  (GMenuAttributeIter  *iter);
extern
GVariant *              g_menu_attribute_iter_get_value                 (GMenuAttributeIter  *iter);














struct _GMenuLinkIter
{
  GObject parent_instance;
  GMenuLinkIterPrivate *priv;
};

struct _GMenuLinkIterClass
{
  GObjectClass parent_class;

  gboolean      (*get_next) (GMenuLinkIter  *iter,
                             const gchar   **out_link,
                             GMenuModel    **value);
};

extern
GType                   g_menu_link_iter_get_type                       (void) ;

extern
gboolean                g_menu_link_iter_get_next                       (GMenuLinkIter  *iter,
                                                                         const gchar   **out_link,
                                                                         GMenuModel    **value);
extern
gboolean                g_menu_link_iter_next                           (GMenuLinkIter  *iter);
extern
const gchar *           g_menu_link_iter_get_name                       (GMenuLinkIter  *iter);
extern
GMenuModel *            g_menu_link_iter_get_value                      (GMenuLinkIter  *iter);



#line 306 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmenumodel.h"
#line 164 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmenu.h"






































typedef struct _GMenuItem GMenuItem;
typedef struct _GMenu     GMenu;

extern
GType       g_menu_get_type                         (void) ;
extern
GMenu *     g_menu_new                              (void);

extern
void        g_menu_freeze                           (GMenu       *menu);

extern
void        g_menu_insert_item                      (GMenu       *menu,
                                                     gint         position,
                                                     GMenuItem   *item);
extern
void        g_menu_prepend_item                     (GMenu       *menu,
                                                     GMenuItem   *item);
extern
void        g_menu_append_item                      (GMenu       *menu,
                                                     GMenuItem   *item);
extern
void        g_menu_remove                           (GMenu       *menu,
                                                     gint         position);

extern
void        g_menu_remove_all                       (GMenu       *menu);

extern
void        g_menu_insert                           (GMenu       *menu,
                                                     gint         position,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void        g_menu_prepend                          (GMenu       *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);
extern
void        g_menu_append                           (GMenu       *menu,
                                                     const gchar *label,
                                                     const gchar *detailed_action);

extern
void        g_menu_insert_section                   (GMenu       *menu,
                                                     gint         position,
                                                     const gchar *label,
                                                     GMenuModel  *section);
extern
void        g_menu_prepend_section                  (GMenu       *menu,
                                                     const gchar *label,
                                                     GMenuModel  *section);
extern
void        g_menu_append_section                   (GMenu       *menu,
                                                     const gchar *label,
                                                     GMenuModel  *section);

extern
void        g_menu_insert_submenu                   (GMenu       *menu,
                                                     gint        position,
                                                     const gchar *label,
                                                     GMenuModel  *submenu);
extern
void        g_menu_prepend_submenu                  (GMenu       *menu,
                                                     const gchar *label,
                                                     GMenuModel  *submenu);
extern
void        g_menu_append_submenu                   (GMenu       *menu,
                                                     const gchar *label,
                                                     GMenuModel  *submenu);


extern
GType       g_menu_item_get_type                    (void) ;
extern
GMenuItem * g_menu_item_new                         (const gchar *label,
                                                     const gchar *detailed_action);

extern
GMenuItem * g_menu_item_new_from_model              (GMenuModel  *model,
                                                     gint         item_index);

extern
GMenuItem * g_menu_item_new_submenu                 (const gchar *label,
                                                     GMenuModel  *submenu);

extern
GMenuItem * g_menu_item_new_section                 (const gchar *label,
                                                     GMenuModel  *section);

extern
GVariant *  g_menu_item_get_attribute_value         (GMenuItem   *menu_item,
                                                     const gchar *attribute,
                                                     const GVariantType *expected_type);
extern
gboolean    g_menu_item_get_attribute               (GMenuItem   *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
extern
GMenuModel *g_menu_item_get_link                    (GMenuItem   *menu_item,
                                                     const gchar *link);

extern
void        g_menu_item_set_attribute_value         (GMenuItem   *menu_item,
                                                     const gchar *attribute,
                                                     GVariant    *value);
extern
void        g_menu_item_set_attribute               (GMenuItem   *menu_item,
                                                     const gchar *attribute,
                                                     const gchar *format_string,
                                                     ...);
extern
void        g_menu_item_set_link                    (GMenuItem   *menu_item,
                                                     const gchar *link,
                                                     GMenuModel  *model);
extern
void        g_menu_item_set_label                   (GMenuItem   *menu_item,
                                                     const gchar *label);
extern
void        g_menu_item_set_submenu                 (GMenuItem   *menu_item,
                                                     GMenuModel  *submenu);
extern
void        g_menu_item_set_section                 (GMenuItem   *menu_item,
                                                     GMenuModel  *section);
extern
void        g_menu_item_set_action_and_target_value (GMenuItem   *menu_item,
                                                     const gchar *action,
                                                     GVariant    *target_value);
extern
void        g_menu_item_set_action_and_target       (GMenuItem   *menu_item,
                                                     const gchar *action,
                                                     const gchar *format_string,
                                                     ...);
extern
void        g_menu_item_set_detailed_action         (GMenuItem   *menu_item,
                                                     const gchar *detailed_action);

extern
void        g_menu_item_set_icon                    (GMenuItem   *menu_item,
                                                     GIcon       *icon);



#line 183 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmenu.h"
#line 165 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmenuexporter.h"



























extern
guint                   g_dbus_connection_export_menu_model             (GDBusConnection  *connection,
                                                                         const gchar      *object_path,
                                                                         GMenuModel       *menu,
                                                                         GError          **error);

extern
void                    g_dbus_connection_unexport_menu_model           (GDBusConnection  *connection,
                                                                         guint             export_id);



#line 41 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gmenuexporter.h"
#line 166 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmenumodel.h"
































typedef struct _GDBusMenuModel GDBusMenuModel;

extern
GType                   g_dbus_menu_model_get_type     (void) ;

extern
GDBusMenuModel *        g_dbus_menu_model_get          (GDBusConnection *connection,
                                                        const gchar     *bus_name,
                                                        const gchar     *object_path);



#line 46 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gdbusmenumodel.h"
#line 167 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnotification.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnotification.h"










extern
GType                   g_notification_get_type                         (void) ;

extern
GNotification *         g_notification_new                              (const gchar *title);

extern
void                    g_notification_set_title                        (GNotification *notification,
                                                                         const gchar   *title);

extern
void                    g_notification_set_body                         (GNotification *notification,
                                                                         const gchar   *body);

extern
void                    g_notification_set_icon                         (GNotification *notification,
                                                                         GIcon         *icon);

__declspec(deprecated("is deprecated. Use '" "g_notification_set_priority" "' instead")) extern
void                    g_notification_set_urgent                       (GNotification *notification,
                                                                         gboolean       urgent);

extern
void                    g_notification_set_priority                     (GNotification         *notification,
                                                                         GNotificationPriority  priority);

extern
void                    g_notification_add_button                       (GNotification *notification,
                                                                         const gchar   *label,
                                                                         const gchar   *detailed_action);

extern
void                    g_notification_add_button_with_target           (GNotification *notification,
                                                                         const gchar   *label,
                                                                         const gchar   *action,
                                                                         const gchar   *target_format,
                                                                         ...);

extern
void                    g_notification_add_button_with_target_value     (GNotification *notification,
                                                                         const gchar   *label,
                                                                         const gchar   *action,
                                                                         GVariant      *target);

extern
void                    g_notification_set_default_action               (GNotification *notification,
                                                                         const gchar   *detailed_action);

extern
void                    g_notification_set_default_action_and_target    (GNotification *notification,
                                                                         const gchar   *action,
                                                                         const gchar   *target_format,
                                                                         ...);

extern
void                 g_notification_set_default_action_and_target_value (GNotification *notification,
                                                                         const gchar   *action,
                                                                         GVariant      *target);



#line 98 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gnotification.h"
#line 168 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/glistmodel.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/glistmodel.h"






extern
GType g_list_model_get_type (void); 

struct _GListModelInterface
{
  GTypeInterface g_iface;

  GType     (* get_item_type)   (GListModel *list);

  guint     (* get_n_items)     (GListModel *list);

  gpointer  (* get_item)        (GListModel *list,
                                 guint       position);
};

extern
GType                   g_list_model_get_item_type                      (GListModel *list);

extern
guint                   g_list_model_get_n_items                        (GListModel *list);

extern
gpointer                g_list_model_get_item                           (GListModel *list,
                                                                         guint       position);

extern
GObject *               g_list_model_get_object                         (GListModel *list,
                                                                         guint       position);

extern
void                    g_list_model_items_changed                      (GListModel *list,
                                                                         guint       position,
                                                                         guint       removed,
                                                                         guint       added);



#line 73 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/glistmodel.h"
#line 169 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gliststore.h"



























#line 29 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gliststore.h"






extern
GType g_list_store_get_type (void); 

extern
GListStore *            g_list_store_new                                (GType       item_type);

extern
void                    g_list_store_insert                             (GListStore *store,
                                                                         guint       position,
                                                                         gpointer    item);

extern
guint                   g_list_store_insert_sorted                      (GListStore       *store,
                                                                         gpointer          item,
                                                                         GCompareDataFunc  compare_func,
                                                                         gpointer          user_data);

extern
void                   g_list_store_sort                                (GListStore       *store,
                                                                         GCompareDataFunc  compare_func,
                                                                         gpointer          user_data);

extern
void                    g_list_store_append                             (GListStore *store,
                                                                         gpointer    item);

extern
void                    g_list_store_remove                             (GListStore *store,
                                                                         guint       position);

extern
void                    g_list_store_remove_all                         (GListStore *store);

extern
void                    g_list_store_splice                             (GListStore *store,
                                                                         guint       position,
                                                                         guint       n_removals,
                                                                         gpointer   *additions,
                                                                         guint       n_additions);



#line 78 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gliststore.h"
#line 170 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio-autocleanups.h"





















#line 23 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio-autocleanups.h"
































































































































#line 172 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"



#line 176 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gio/gio.h"

#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"





























#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"






#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"


#line 4 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"

















































#line 54 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"
















#line 71 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"
#line 72 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"


#line 75 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"












































extern __declspec(dllimport) const guint gdk_pixbuf_major_version;
extern __declspec(dllimport) const guint gdk_pixbuf_minor_version;
extern __declspec(dllimport) const guint gdk_pixbuf_micro_version;
extern __declspec(dllimport) const char *gdk_pixbuf_version;

#line 125 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"
#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"





















































































































































































































#line 245 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 247 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 248 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 253 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 255 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 256 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
























#line 281 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"






















#line 304 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 305 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 310 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"


#line 313 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"



#line 317 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"










#line 328 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 329 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 334 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 336 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 337 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 346 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 347 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 352 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 354 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 355 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 364 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 365 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 370 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 372 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 373 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 382 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 383 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 388 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 390 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 391 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 400 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 401 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 406 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 408 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 409 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 418 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 419 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 424 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 426 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 427 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 436 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 437 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 442 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 444 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 445 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 454 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 455 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 460 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 462 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 463 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 472 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 473 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 478 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 480 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 481 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 490 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 491 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 496 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 498 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 499 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 508 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 509 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 514 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 516 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 517 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 526 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 527 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 532 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 534 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 535 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 544 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 545 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 550 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 552 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 553 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 562 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 563 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 568 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 570 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 571 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 580 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 581 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 586 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 588 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 589 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 598 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 599 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 604 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 606 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 607 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 616 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 617 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 622 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 624 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 625 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 634 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 635 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 640 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 642 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 643 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"








#line 652 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 653 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"




#line 658 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 660 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 661 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"

#line 663 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"
#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"


#line 4 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-features.h"

























































































































#line 32 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"


#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"




























#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"





#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"































































































































































































































































































































































































































































































































































































































































#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"


























































































typedef enum
{
        GDK_PIXBUF_ALPHA_BILEVEL,
        GDK_PIXBUF_ALPHA_FULL
} GdkPixbufAlphaMode;











typedef enum {
	GDK_COLORSPACE_RGB
} GdkColorspace;












typedef struct _GdkPixbuf GdkPixbuf;



















typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);

























typedef enum {
        
        GDK_PIXBUF_ERROR_CORRUPT_IMAGE,
        
        GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,
        
        GDK_PIXBUF_ERROR_BAD_OPTION,
        
        GDK_PIXBUF_ERROR_UNKNOWN_TYPE,
        
        GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
        GDK_PIXBUF_ERROR_FAILED,
        GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION
} GdkPixbufError;

extern
GQuark gdk_pixbuf_error_quark (void);



extern
GType gdk_pixbuf_get_type (void) ;




__declspec(deprecated("is deprecated. Use '" "g_object_ref" "' instead")) extern
GdkPixbuf *gdk_pixbuf_ref      (GdkPixbuf *pixbuf);
__declspec(deprecated("is deprecated. Use '" "g_object_unref" "' instead")) extern
void       gdk_pixbuf_unref    (GdkPixbuf *pixbuf);
#line 234 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"



extern
GdkColorspace gdk_pixbuf_get_colorspace      (const GdkPixbuf *pixbuf);
extern
int           gdk_pixbuf_get_n_channels      (const GdkPixbuf *pixbuf);
extern
gboolean      gdk_pixbuf_get_has_alpha       (const GdkPixbuf *pixbuf);
extern
int           gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);
extern
guchar       *gdk_pixbuf_get_pixels          (const GdkPixbuf *pixbuf);
extern
int           gdk_pixbuf_get_width           (const GdkPixbuf *pixbuf);
extern
int           gdk_pixbuf_get_height          (const GdkPixbuf *pixbuf);
extern
int           gdk_pixbuf_get_rowstride       (const GdkPixbuf *pixbuf);
extern
gsize         gdk_pixbuf_get_byte_length     (const GdkPixbuf *pixbuf);

extern
guchar       *gdk_pixbuf_get_pixels_with_length (const GdkPixbuf *pixbuf,
                                                 guint           *length);

extern
const guint8* gdk_pixbuf_read_pixels         (const GdkPixbuf  *pixbuf);
extern
GBytes *      gdk_pixbuf_read_pixel_bytes    (const GdkPixbuf  *pixbuf);





extern
GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample,
			   int width, int height);

extern
gint gdk_pixbuf_calculate_rowstride (GdkColorspace colorspace,
				     gboolean      has_alpha,
				     int           bits_per_sample,
				     int           width,
				     int           height);


extern
GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);


extern
GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf,
                                     int        src_x,
                                     int        src_y,
                                     int        width,
                                     int        height);








extern
GdkPixbuf *gdk_pixbuf_new_from_file_utf8 (const char *filename,
                                          GError    **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_size_utf8 (const char *filename,
                                                  int         width,
                                                  int         height,
                                                  GError    **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_scale_utf8 (const char *filename,
                                                   int         width,
                                                   int         height,
                                                   gboolean    preserve_aspect_ratio,
                                                   GError    **error);
#line 314 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"

extern
GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename,
                                     GError    **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_size (const char *filename,
					     int         width, 
					     int         height,
					     GError    **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_file_at_scale (const char *filename,
					      int         width, 
					      int         height,
					      gboolean    preserve_aspect_ratio,
					      GError    **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_resource (const char *resource_path,
					 GError    **error);
extern
GdkPixbuf *gdk_pixbuf_new_from_resource_at_scale (const char *resource_path,
						  int         width,
						  int         height,
						  gboolean    preserve_aspect_ratio,
						  GError    **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data,
				     GdkColorspace colorspace,
				     gboolean has_alpha,
				     int bits_per_sample,
				     int width, int height,
				     int rowstride,
				     GdkPixbufDestroyNotify destroy_fn,
				     gpointer destroy_fn_data);

extern
GdkPixbuf *gdk_pixbuf_new_from_bytes (GBytes *data,
				      GdkColorspace colorspace,
				      gboolean has_alpha,
				      int bits_per_sample,
				      int width, int height,
				      int rowstride);

extern
GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);


__declspec(deprecated) extern
GdkPixbuf* gdk_pixbuf_new_from_inline	(gint          data_length,
					 const guint8 *data,
					 gboolean      copy_pixels,
					 GError      **error);
#line 367 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"


extern
void       gdk_pixbuf_fill              (GdkPixbuf    *pixbuf,
                                         guint32       pixel);







#line 380 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"
#line 381 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"

extern
gboolean gdk_pixbuf_save_utf8           (GdkPixbuf  *pixbuf, 
                                    const char *filename, 
                                    const char *type, 
                                    GError    **error,
                                    ...) ;

extern
gboolean gdk_pixbuf_savev          (GdkPixbuf  *pixbuf, 
                                    const char *filename, 
                                    const char *type,
                                    char      **option_keys,
                                    char      **option_values,
                                    GError    **error);


extern
gboolean gdk_pixbuf_savev_utf8     (GdkPixbuf  *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    char      **option_keys,
                                    char      **option_values,
                                    GError    **error);
#line 406 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"






















typedef gboolean (*GdkPixbufSaveFunc)   (const gchar *buf,
					 gsize count,
					 GError **error,
					 gpointer data);

extern
gboolean gdk_pixbuf_save_to_callback    (GdkPixbuf  *pixbuf,
					 GdkPixbufSaveFunc save_func,
					 gpointer user_data,
					 const char *type, 
					 GError    **error,
					 ...) ;

extern
gboolean gdk_pixbuf_save_to_callbackv   (GdkPixbuf  *pixbuf, 
					 GdkPixbufSaveFunc save_func,
					 gpointer user_data,
					 const char *type,
					 char      **option_keys,
					 char      **option_values,
					 GError    **error);



extern
gboolean gdk_pixbuf_save_to_buffer      (GdkPixbuf  *pixbuf,
					 gchar     **buffer,
					 gsize      *buffer_size,
					 const char *type, 
					 GError    **error,
					 ...) ;

extern
gboolean gdk_pixbuf_save_to_bufferv     (GdkPixbuf  *pixbuf,
					 gchar     **buffer,
					 gsize      *buffer_size,
					 const char *type, 
					 char      **option_keys,
					 char      **option_values,
					 GError    **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream   (GInputStream   *stream,
					 GCancellable   *cancellable,
                                         GError        **error);

extern
void gdk_pixbuf_new_from_stream_async (GInputStream        *stream,
				       GCancellable        *cancellable,
				       GAsyncReadyCallback  callback,
				       gpointer             user_data);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream_finish (GAsyncResult  *async_result,
					      GError       **error);

extern
GdkPixbuf *gdk_pixbuf_new_from_stream_at_scale   (GInputStream   *stream,
                                                  gint            width,
                                                  gint            height,
                                                  gboolean        preserve_aspect_ratio,
						  GCancellable   *cancellable,
                                                  GError        **error);

extern
void gdk_pixbuf_new_from_stream_at_scale_async (GInputStream        *stream,
						gint                 width,
						gint                 height,
						gboolean             preserve_aspect_ratio,
						GCancellable        *cancellable,
						GAsyncReadyCallback  callback,
						gpointer             user_data);

extern
gboolean   gdk_pixbuf_save_to_stream    (GdkPixbuf      *pixbuf,
                                         GOutputStream  *stream,
                                         const char     *type,
					 GCancellable   *cancellable,
                                         GError        **error,
                                         ...);

extern
void gdk_pixbuf_save_to_stream_async (GdkPixbuf           *pixbuf,
				      GOutputStream       *stream,
				      const gchar         *type,
				      GCancellable        *cancellable,
				      GAsyncReadyCallback  callback,
				      gpointer             user_data,
				      ...);

extern
gboolean gdk_pixbuf_save_to_stream_finish (GAsyncResult  *async_result,
					   GError       **error);

extern
void gdk_pixbuf_save_to_streamv_async (GdkPixbuf           *pixbuf,
                                       GOutputStream       *stream,
                                       const gchar         *type,
                                       gchar              **option_keys,
                                       gchar              **option_values,
                                       GCancellable        *cancellable,
                                       GAsyncReadyCallback  callback,
                                       gpointer             user_data);

extern
gboolean gdk_pixbuf_save_to_streamv (GdkPixbuf      *pixbuf,
                                     GOutputStream  *stream,
                                     const char     *type,
                                     char          **option_keys,
                                     char          **option_values,
                                     GCancellable   *cancellable,
                                     GError        **error);


extern
GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color,
				 guchar r, guchar g, guchar b);


extern
void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf,
			   int src_x, int src_y,
			   int width, int height,
			   GdkPixbuf *dest_pixbuf,
			   int dest_x, int dest_y);


extern
void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src,
                                       GdkPixbuf       *dest,
                                       gfloat           saturation,
                                       gboolean         pixelate);


extern
GdkPixbuf *gdk_pixbuf_apply_embedded_orientation (GdkPixbuf *src);


extern
gboolean gdk_pixbuf_set_option  (GdkPixbuf   *pixbuf,
                                 const gchar *key,
                                 const gchar *value);
extern
const gchar * gdk_pixbuf_get_option (GdkPixbuf   *pixbuf,
                                              const gchar *key);
extern
gboolean gdk_pixbuf_remove_option (GdkPixbuf   *pixbuf,
                                   const gchar *key);
extern
GHashTable * gdk_pixbuf_get_options (GdkPixbuf   *pixbuf);
extern
gboolean gdk_pixbuf_copy_options (GdkPixbuf *src_pixbuf,
                                  GdkPixbuf *dest_pixbuf);





#line 587 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-core.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-transform.h"




























#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-transform.h"









































typedef enum {
	GDK_INTERP_NEAREST,
	GDK_INTERP_TILES,
	GDK_INTERP_BILINEAR,
	GDK_INTERP_HYPER
} GdkInterpType;











typedef enum {
	GDK_PIXBUF_ROTATE_NONE             =   0,
	GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE =  90,
	GDK_PIXBUF_ROTATE_UPSIDEDOWN       = 180,
	GDK_PIXBUF_ROTATE_CLOCKWISE        = 270
} GdkPixbufRotation;

extern
void gdk_pixbuf_scale           (const GdkPixbuf *src,
				 GdkPixbuf       *dest,
				 int              dest_x,
				 int              dest_y,
				 int              dest_width,
				 int              dest_height,
				 double           offset_x,
				 double           offset_y,
				 double           scale_x,
				 double           scale_y,
				 GdkInterpType    interp_type);
extern
void gdk_pixbuf_composite       (const GdkPixbuf *src,
				 GdkPixbuf       *dest,
				 int              dest_x,
				 int              dest_y,
				 int              dest_width,
				 int              dest_height,
				 double           offset_x,
				 double           offset_y,
				 double           scale_x,
				 double           scale_y,
				 GdkInterpType    interp_type,
				 int              overall_alpha);
extern
void gdk_pixbuf_composite_color (const GdkPixbuf *src,
				 GdkPixbuf       *dest,
				 int              dest_x,
				 int              dest_y,
				 int              dest_width,
				 int              dest_height,
				 double           offset_x,
				 double           offset_y,
				 double           scale_x,
				 double           scale_y,
				 GdkInterpType    interp_type,
				 int              overall_alpha,
				 int              check_x,
				 int              check_y,
				 int              check_size,
				 guint32          color1,
				 guint32          color2);

extern
GdkPixbuf *gdk_pixbuf_scale_simple           (const GdkPixbuf *src,
					      int              dest_width,
					      int              dest_height,
					      GdkInterpType    interp_type);

extern
GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src,
					      int              dest_width,
					      int              dest_height,
					      GdkInterpType    interp_type,
					      int              overall_alpha,
					      int              check_size,
					      guint32          color1,
					      guint32          color2);

extern
GdkPixbuf *gdk_pixbuf_rotate_simple          (const GdkPixbuf   *src,
				              GdkPixbufRotation  angle);
extern
GdkPixbuf *gdk_pixbuf_flip                   (const GdkPixbuf   *src,
				              gboolean           horizontal);
				     



#line 166 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-transform.h"
#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-animation.h"





























#line 31 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-animation.h"













typedef struct _GdkPixbufAnimation GdkPixbufAnimation;








typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;









extern
GType               gdk_pixbuf_animation_get_type        (void) ;



extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file_utf8   (const char         *filename,
                                                               GError            **error);
#line 72 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-animation.h"

extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file   (const char         *filename,
                                                          GError            **error);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream (GInputStream       *stream,
                                                          GCancellable       *cancellable,
                                                          GError            **error);
extern
void                gdk_pixbuf_animation_new_from_stream_async (GInputStream *stream,
                                                          GCancellable       *cancellable,
                                                          GAsyncReadyCallback callback,
                                                          gpointer            user_data);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_stream_finish (GAsyncResult*async_result,
                                                          GError            **error);
extern
GdkPixbufAnimation *gdk_pixbuf_animation_new_from_resource(const char        *resource_path,
                                                          GError            **error);



__declspec(deprecated("is deprecated. Use '" "g_object_ref" "' instead")) extern
GdkPixbufAnimation *gdk_pixbuf_animation_ref             (GdkPixbufAnimation *animation);
__declspec(deprecated("is deprecated. Use '" "g_object_unref" "' instead")) extern
void                gdk_pixbuf_animation_unref           (GdkPixbufAnimation *animation);
#line 99 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-animation.h"

extern
int                 gdk_pixbuf_animation_get_width       (GdkPixbufAnimation *animation);
extern
int                 gdk_pixbuf_animation_get_height      (GdkPixbufAnimation *animation);
extern
gboolean            gdk_pixbuf_animation_is_static_image  (GdkPixbufAnimation *animation);
extern
GdkPixbuf          *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);

extern
GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter                        (GdkPixbufAnimation     *animation,
                                                                              const GTimeVal         *start_time);
extern
GType                   gdk_pixbuf_animation_iter_get_type                   (void) ;
extern
int                     gdk_pixbuf_animation_iter_get_delay_time             (GdkPixbufAnimationIter *iter);
extern
GdkPixbuf              *gdk_pixbuf_animation_iter_get_pixbuf                 (GdkPixbufAnimationIter *iter);
extern
gboolean                gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);
extern
gboolean                gdk_pixbuf_animation_iter_advance                    (GdkPixbufAnimationIter *iter,
                                                                              const GTimeVal         *current_time);





































































































#line 225 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-animation.h"
#line 37 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-simple-anim.h"


























#line 28 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-simple-anim.h"










typedef struct _GdkPixbufSimpleAnim GdkPixbufSimpleAnim;
typedef struct _GdkPixbufSimpleAnimClass GdkPixbufSimpleAnimClass;









extern
GType gdk_pixbuf_simple_anim_get_type (void) ;
extern
GType gdk_pixbuf_simple_anim_iter_get_type (void) ;

extern
GdkPixbufSimpleAnim *gdk_pixbuf_simple_anim_new           (gint   width, 
                                                           gint   height,
                                                           gfloat rate);
extern
void                 gdk_pixbuf_simple_anim_add_frame     (GdkPixbufSimpleAnim *animation,
                                                           GdkPixbuf           *pixbuf);
extern
void                 gdk_pixbuf_simple_anim_set_loop      (GdkPixbufSimpleAnim *animation,
                                                           gboolean             loop);
extern
gboolean             gdk_pixbuf_simple_anim_get_loop      (GdkPixbufSimpleAnim *animation);




#line 71 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-simple-anim.h"
#line 38 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-io.h"































#line 33 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-io.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"







#pragma once







#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"




#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"


    

#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
        
    

#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"














    








#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"




#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"

    





#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"






#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"


    
    
       
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }

    
    
       
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"



#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_stdio_config.h"




















#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"










    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

 FILE* __cdecl __acrt_iob_func(unsigned _Ix);










    
    
    
    
    
    
     wint_t __cdecl fgetwc(
          FILE* _Stream
        );

    
     wint_t __cdecl _fgetwchar(void);

    
     wint_t __cdecl fputwc(
             wchar_t _Character,
          FILE*   _Stream);

    
     wint_t __cdecl _fputwchar(
          wchar_t _Character
        );

     
     wint_t __cdecl getwc(
          FILE* _Stream
        );

     
     wint_t __cdecl getwchar(void);


    
     
     wchar_t* __cdecl fgetws(
          wchar_t* _Buffer,
                                  int      _BufferCount,
                               FILE*    _Stream
        );

    
     int __cdecl fputws(
           wchar_t const* _Buffer,
          FILE*          _Stream
        );

    
     
     wchar_t* __cdecl _getws_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
     wint_t __cdecl putwc(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl putwchar(
          wchar_t _Character
        );

    
     int __cdecl _putws(
          wchar_t const* _Buffer
        );

    
     wint_t __cdecl ungetwc(
             wint_t _Character,
          FILE*  _Stream
        );

     
     FILE * __cdecl _wfdopen(
            int            _FileHandle,
          wchar_t const* _Mode
        );

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
     FILE* __cdecl _wfopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode
        );

    
     errno_t __cdecl _wfopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode
        );

     
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
     FILE* __cdecl _wfreopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
          FILE*          _OldStream
        );

    
     errno_t __cdecl _wfreopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode,
                            FILE*          _OldStream
        );

     
     FILE* __cdecl _wfsopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode,
            int            _ShFlag
        );

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    

         
         FILE* __cdecl _wpopen(
              wchar_t const* _Command,
              wchar_t const* _Mode
            );

    #line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     int __cdecl _wremove(
          wchar_t const* _FileName
        );

    
    

     
     __declspec(allocator) wchar_t* __cdecl _wtempnam(
          wchar_t const* _Directory,
          wchar_t const* _FilePrefix
        );

    

     
    
     errno_t __cdecl _wtmpnam_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
     wint_t __cdecl _fgetwc_nolock(
          FILE* _Stream
        );

    
     wint_t __cdecl _fputwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl _getwc_nolock(
          FILE* _Stream
        );

    
     wint_t __cdecl _putwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl _ungetwc_nolock(
             wint_t _Character,
          FILE*  _Stream
        );

    



#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



    
    





    
    
    
    
    
    
     int __cdecl __stdio_common_vfwprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __stdio_common_vfwprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __stdio_common_vfwprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l(_Stream, _Format, ((void *)0), _ArgList);
    }
    #line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }
    #line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
    }
    #line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }
    #line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwprintf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        }
    #line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }
    #line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl fwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfwprintf_l(_Stream, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfwprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfwprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl wprintf(
            wchar_t const* const _Format,
        ...)
    

#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wprintf_s(
                wchar_t const* const _Format,
            ...)
    

#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
    
     int __cdecl __stdio_common_vfwscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vfwscanf_l(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vfwscanf(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l(_Stream, _Format, ((void *)0), _ArgList);
    }
    #line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vfwscanf_s_l(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vfwscanf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }
    #line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __inline int __cdecl _vwscanf_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl vwscanf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
    }
    #line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _vwscanf_s_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl vwscanf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        }
    #line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fwscanf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    

#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfwscanf_l(_Stream, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _fwscanf_s_l(
                                           FILE*          const _Stream,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl fwscanf_s(
                                     FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
    

#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfwscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _wscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl wscanf(
            wchar_t const* const _Format,
        ...)
    

#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
    __inline int __cdecl _wscanf_s_l(
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

        
        __inline int __cdecl wscanf_s(
                wchar_t const* const _Format,
            ...)
    

#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"



    
    
    
    
    
    
        



    

#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
     int __cdecl __stdio_common_vswprintf(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vswprintf_s(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vsnwprintf_s(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vswprintf_p(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                     va_list              _ArgList
        )
    

#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(push)
    #pragma warning(disable: 4793)

     
    
    __inline int __cdecl _vsnwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1091 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
    }
    #line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
                                                     va_list        _ArgList
        )
    

#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnwprintf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        #pragma warning(pop)
    }
    #line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
#line 1147 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }
    #line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    

#line 1197 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)
    }
    #line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __vswprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
                                         va_list              _ArgList
        )
    

#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, ((void *)0), _ArgList);
    }
    #line 1235 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    

#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }
    #line 1251 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl vswprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
            )
    

#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        }
    #line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 1291 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    

#line 1312 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
                                                      va_list              _ArgList
        )
    

#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }
    #line 1336 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1347 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_l(_Format, ((void *)0), _ArgList);
    }
    #line 1369 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    

#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1388 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _vscwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    

#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vscwprintf_p_l(_Format, ((void *)0), _ArgList);
    }
    #line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl __swprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1422 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
        ...)
    

#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = __vswprintf_l(_Buffer, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl swprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1482 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(push)
    
    
    #pragma warning(disable:4793 4996)

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __swprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __vswprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1496 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _swprintf(   wchar_t *_Buffer,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vswprintf(   wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1503 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)

     
    
    __inline int __cdecl _swprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1526 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        __inline int __cdecl swprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
            ...)
    

#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 1549 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    

#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
        ...)
    

#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1597 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1638 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)
    

#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
        ...)
    

#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    

#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
        ...)
    

#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    __inline int __cdecl _scwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf(
            wchar_t const* const _Format,
        ...)
    

#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vscwprintf_l(_Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    

#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     
    __inline int __cdecl _scwprintf_p(
            wchar_t const* const _Format,
        ...)
    

#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vscwprintf_p_l(_Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"


    
        #pragma warning(push)
        #pragma warning(disable: 4141 4412 4793 4996 6054)

        























































        #pragma warning(pop)
    #line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    




#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"


    
    
    
    
    
     
     int __cdecl __stdio_common_vswscanf(
                                            unsigned __int64 _Options,
                  wchar_t const*   _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     
    
    __inline int __cdecl _vswscanf_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl vswscanf(
                                 wchar_t const* _Buffer,
            wchar_t const* _Format,
                                      va_list        _ArgList
        )
    

#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
    }
    #line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vswscanf_s_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    

#line 1945 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 1951 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl vswscanf_s(
                                     wchar_t const* const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
    

#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            return _vswscanf_s_l(_Buffer, _Format, ((void *)0), _ArgList);
        }
    #line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    
#line 1978 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    

#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _vsnwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
                                                 va_list              _ArgList
        )
    

#line 2010 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }
    #line 2016 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _swscanf_l(
                                          wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t            _Locale,
        ...)
    

#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2036 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl swscanf(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)
    

#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vswscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _swscanf_s_l(
                                            wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    

         
        
        __inline int __cdecl swscanf_s(
                                      wchar_t const* const _Buffer,
                wchar_t const* const _Format,
            ...)
    

#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vswscanf_s_l(_Buffer, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    #line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    

#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snwscanf(
            wchar_t const* const _Buffer,
                                      size_t         const _BufferCount,
                wchar_t const* const _Format,
        ...)
    

#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2149 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    

#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

     
    
    __inline int __cdecl _snwscanf_s(
             wchar_t const* const _Buffer,
                                       size_t         const _BufferCount,
               wchar_t const* const _Format,
        ...)
    

#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"

    


#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\corecrt_wstdio.h"




#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

































    
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"















    
    
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;





    
     errno_t __cdecl _get_stream_buffer_pointers(
               FILE*   _Stream,
          char*** _Base,
          char*** _Pointer,
          int**   _Count
        );


    
    
    
    
    
    

        
         errno_t __cdecl clearerr_s(
              FILE* _Stream
            );

        
         errno_t __cdecl fopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode
            );

        
         
         size_t __cdecl fread_s(
                void*  _Buffer,
                                    size_t _BufferSize,
                                                                            size_t _ElementSize,
                                                                            size_t _ElementCount,
                                                                         FILE*  _Stream
            );

        
         errno_t __cdecl freopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode,
                                FILE*       _OldStream
            );

         
         char* __cdecl gets_s(
              char*   _Buffer,
                               rsize_t _Size
            );

        
         errno_t __cdecl tmpfile_s(
                FILE** _Stream
            );

         
        
         errno_t __cdecl tmpnam_s(
              char*   _Buffer,
                               rsize_t _Size
            );

    #line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     void __cdecl clearerr(
          FILE* _Stream
        );

     
    
     int __cdecl fclose(
          FILE* _Stream
        );

    
     int __cdecl _fcloseall(void);

     
     FILE* __cdecl _fdopen(
            int         _FileHandle,
          char const* _Mode
        );

     
     int __cdecl feof(
          FILE* _Stream
        );

     
     int __cdecl ferror(
          FILE* _Stream
        );

    
     int __cdecl fflush(
          FILE* _Stream
        );

     
    
     int __cdecl fgetc(
          FILE* _Stream
        );

    
     int __cdecl _fgetchar(void);

     
    
     int __cdecl fgetpos(
          FILE*   _Stream,
            fpos_t* _Position
        );

     
    
     char* __cdecl fgets(
          char* _Buffer,
                               int   _MaxCount,
                            FILE* _Stream
        );

     
     int __cdecl _fileno(
          FILE* _Stream
        );

    
     int __cdecl _flushall(void);

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
     FILE* __cdecl fopen(
          char const* _FileName,
          char const* _Mode
        );


     
    
     int __cdecl fputc(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl _fputchar(
          int _Character
        );

     
    
     int __cdecl fputs(
           char const* _Buffer,
          FILE*       _Stream
        );

    
     size_t __cdecl fread(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
     FILE* __cdecl freopen(
           char const* _FileName,
           char const* _Mode,
          FILE*       _Stream
        );

     
     FILE* __cdecl _fsopen(
          char const* _FileName,
          char const* _Mode,
            int         _ShFlag
        );

     
    
     int __cdecl fsetpos(
          FILE*         _Stream,
             fpos_t const* _Position
        );

     
    
     int __cdecl fseek(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

     
    
     int __cdecl _fseeki64(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     
     long __cdecl ftell(
          FILE* _Stream
        );

     
     
     __int64 __cdecl _ftelli64(
          FILE* _Stream
        );

    
     size_t __cdecl fwrite(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

     
     
     int __cdecl getc(
          FILE* _Stream
        );

     
     int __cdecl getchar(void);

     
     int __cdecl _getmaxstdio(void);

    
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     int __cdecl _getw(
          FILE* _Stream
        );

     void __cdecl perror(
          char const* _ErrorMessage
        );

    

         
        
         int __cdecl _pclose(
              FILE* _Stream
            );

         
         FILE* __cdecl _popen(
              char const* _Command,
              char const* _Mode
            );

    #line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
     int __cdecl putc(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl putchar(
          int _Character
        );

    
     int __cdecl puts(
          char const* _Buffer
        );

     
    
     int __cdecl _putw(
             int   _Word,
          FILE* _Stream
        );

     int __cdecl remove(
          char const* _FileName
        );

     
     int __cdecl rename(
          char const* _OldFileName,
          char const* _NewFileName
        );

     int __cdecl _unlink(
          char const* _FileName
        );

    

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
         int __cdecl unlink(
              char const* _FileName
            );

    #line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     void __cdecl rewind(
          FILE* _Stream
        );

    
     int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
     void __cdecl setbuf(
                                                      FILE* _Stream,
            char* _Buffer
        );

    
     int __cdecl _setmaxstdio(
          int _Maximum
        );

     
    
     int __cdecl setvbuf(
                               FILE*  _Stream,
            char*  _Buffer,
                                  int    _Mode,
                                  size_t _Size
        );

    


#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(allocator) char* __cdecl _tempnam(
          char const* _DirectoryName,
          char const* _FilePrefix
        );

    

#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
     FILE* __cdecl tmpfile(void);

    
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 28726) 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   char* __cdecl tmpnam(  char *_Buffer);
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
#pragma warning(pop)

     
    
     int __cdecl ungetc(
             int   _Character,
          FILE* _Stream
        );



    
    
    
    
    
     void __cdecl _lock_file(
          FILE* _Stream
        );

     void __cdecl _unlock_file(
          FILE* _Stream
        );

     
    
     int __cdecl _fclose_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fflush_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fgetc_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fputc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
     size_t __cdecl _fread_nolock(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

    
     
     size_t __cdecl _fread_nolock_s(
          void*  _Buffer,
                              size_t _BufferSize,
                                                                      size_t _ElementSize,
                                                                      size_t _ElementCount,
                                                                   FILE*  _Stream
        );

    
     int __cdecl _fseek_nolock(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

    
     int __cdecl _fseeki64_nolock(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     long __cdecl _ftell_nolock(
          FILE* _Stream
        );

     
     __int64 __cdecl _ftelli64_nolock(
          FILE* _Stream
        );

    
     size_t __cdecl _fwrite_nolock(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

    
     int __cdecl _getc_nolock(
          FILE* _Stream
        );

    
     int __cdecl _putc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl _ungetc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
    
    
    



    














#line 584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



     int* __cdecl __p__commode(void);

    


        
    #line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    
    

#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    
    
    
    
     int __cdecl __stdio_common_vfprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     int __cdecl __stdio_common_vfprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vfprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfprintf_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfprintf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l(_Stream, _Format, ((void *)0), _ArgList);
    }
    #line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_s_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vfprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }
    #line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    

#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }
    #line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
    }
    #line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }
    #line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vprintf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        }
    #line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }
    #line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
    }
    #line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl fprintf(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfprintf_l(_Stream, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     int __cdecl _set_printf_count_output(
          int _Value
        );

     int __cdecl _get_printf_count_output(void);

    
    __inline int __cdecl _fprintf_s_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfprintf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfprintf_p_l(_Stream, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl printf(
            char const* const _Format,
        ...)
    

#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl printf_s(
                char const* const _Format,
            ...)
    

#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _printf_p(
            char const* const _Format,
        ...)
    

#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


    
    
    
    
    
     int __cdecl __stdio_common_vfscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _Arglist
        );

    
    __inline int __cdecl _vfscanf_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vfscanf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l(_Stream, _Format, ((void *)0), _ArgList);
    }
    #line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vfscanf_s_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }
    #line 1099 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


    

        
        __inline int __cdecl vfscanf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
        }
    #line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vscanf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
    }
    #line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscanf_s_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }
    #line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl vscanf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        }
    #line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _fscanf_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl fscanf(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)
    

#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfscanf_l(_Stream, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _fscanf_s_l(
                                           FILE*       const _Stream,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl fscanf_s(
                                     FILE*       const _Stream,
                char const* const _Format,
            ...)
    

#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfscanf_s_l(_Stream, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _scanf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1272 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl scanf(
            char const* const _Format,
        ...)
    

#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scanf_s_l(
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl scanf_s(
                char const* const _Format,
            ...)
    

#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1326 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1328 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    
    
    
    
    
     
     int __cdecl __stdio_common_vsprintf(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsprintf_s(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsnprintf_s(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsprintf_p(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsnprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
                                                     va_list           _ArgList
        )
    

#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                          char const* const _Format,
                                                    va_list           _ArgList
        )
    

#line 1409 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        #pragma warning(pop)
    }
    #line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    








#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl vsnprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, ((void *)0), _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vsprintf_l(
           char*       const _Buffer,
                                    char const* const _Format,
                                  _locale_t   const _Locale,
                                         va_list           _ArgList
        )
    

#line 1459 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        #pragma warning(pop)
    }
    #line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl vsprintf(
           char*       const _Buffer,
               char const* const _Format,
                                         va_list           _ArgList
        )
    

#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, ((void *)0), _ArgList);
        #pragma warning(pop)
    }
    #line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1497 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1505 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
            )
    

#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        }
    #line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    

#line 1546 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
                                                      va_list           _ArgList
        )
    

#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }
    #line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
                                                          va_list          _ArgList
        )
    

#line 1584 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    

#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
    }
    #line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
#line 1618 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl vsnprintf_s(
               char*       const _Buffer,
                                                           size_t      const _BufferCount,
                                                           size_t      const _MaxCount,
                                    char const* const _Format,
                                                              va_list           _ArgList
            )
    

#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
        }
    #line 1637 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vscprintf_l(_Format, ((void *)0), _ArgList);
    }
    #line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vscprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1689 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            ((void *)0), 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _vscprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vscprintf_p_l(_Format, ((void *)0), _ArgList);
    }
    #line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    

#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }
    #line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _vsnprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
                                       va_list           _ArgList
        )
    

#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
    }
    #line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sprintf_l(
                  char*       const _Buffer,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl sprintf(
           char*       const _Buffer,
               char const* const _Format,
        ...)
    

#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsprintf_l(_Buffer, _Format, ((void *)0), _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1795 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable: 4996)
    #pragma warning(disable: 28719) 
    #pragma warning(disable: 28726) 
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    #pragma warning(pop)

     
    
    __inline int __cdecl _sprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

         
        
        __inline int __cdecl sprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
            ...)
    

#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 1850 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 1852 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
#line 1859 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    

#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1880 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _sprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
        ...)
    

#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1900 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
        ...)
    

#line 1912 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1926 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    








#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl snprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
        ...)
    

#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
    #pragma warning(suppress:28719)    
        _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1958 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                           char const* const _Format,
        ...)
    

#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
    #pragma warning(suppress:28719)    
        _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1988 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
        ...)
    

#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
        ...)
    

#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    
    __inline int __cdecl _snprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
        ...)
    

#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf(
            char const* const _Format,
        ...)
    

#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vscprintf_l(_Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _scprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    

#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     
    __inline int __cdecl _scprintf_p(
            char const* const _Format,
        ...)
    

#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    
    
    
    
     int __cdecl __stdio_common_vsscanf(
                                            unsigned __int64 _Options,
                  char const*      _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vsscanf_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl vsscanf(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )
    

#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return _vsscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
    }
    #line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _vsscanf_s_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    

#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }
    #line 2212 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        #pragma warning(push)
        #pragma warning(disable:6530)

        
        __inline int __cdecl vsscanf_s(
                                     char const* const _Buffer,
                char const* const _Format,
                                          va_list           _ArgList
            )
    

#line 2227 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            return _vsscanf_s_l(_Buffer, _Format, ((void *)0), _ArgList);
        }
    #line 2231 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        
#line 2238 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        #pragma warning(pop)

    #line 2242 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _sscanf_l(
                                          char const* const _Buffer,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl sscanf(
                                char const* const _Buffer,
            char const* const _Format,
        ...)
    

#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));
        _Result = _vsscanf_l(_Buffer, _Format, ((void *)0), _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _sscanf_s_l(
                                            char const* const _Buffer,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2298 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    

        
        __inline int __cdecl sscanf_s(
                                      char const* const _Buffer,
                char const* const _Format,
            ...)
    

#line 2309 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
        {
            int _Result;
            va_list _ArgList;
            ((void)(__va_start(&_ArgList, _Format)));

            #pragma warning(push)
            #pragma warning(disable: 4996) 
            _Result = vsscanf_s(_Buffer, _Format, _ArgList);
            #pragma warning(pop)

            ((void)(_ArgList = (va_list)0));
            return _Result;
        }
    #line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #line 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #pragma warning(push)
    #pragma warning(disable:6530)

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf_l(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    

#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _snscanf(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                      char const* const _Format,
        ...)
    

#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, ((void *)0), _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2375 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"


    
    __inline int __cdecl _snscanf_s_l(
              char const* const _Buffer,
                                              size_t      const _BufferCount,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    

#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Locale)));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2400 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    
    __inline int __cdecl _snscanf_s(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                    char const* const _Format,
        ...)
    

#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__va_start(&_ArgList, _Format)));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, ((void *)0), _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
    #line 2423 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

    #pragma warning(pop)

    

#line 2429 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"



    
    
    
    
    
    

        

        


#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
         char* __cdecl tempnam(
              char const* _Directory,
              char const* _FilePrefix
            );

        

#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"

         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details."))  int   __cdecl fcloseall(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details."))     FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details."))   int   __cdecl fgetchar(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details."))     int   __cdecl fileno(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details."))   int   __cdecl flushall(void);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details."))   int   __cdecl fputchar(  int _Ch);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details."))       int   __cdecl getw(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details."))       int   __cdecl putw(  int _Ch,   FILE* _Stream);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details."))      int   __cdecl rmtmp(void);

    #line 2467 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
#line 2468 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"




#line 2473 "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.17763.0\\ucrt\\stdio.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-io.h"







typedef struct _GdkPixbufFormat GdkPixbufFormat;

extern
GType gdk_pixbuf_format_get_type (void) ;

extern
GSList    *gdk_pixbuf_get_formats            (void);
extern
gchar     *gdk_pixbuf_format_get_name        (GdkPixbufFormat *format);
extern
gchar     *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);
extern
gchar    **gdk_pixbuf_format_get_mime_types  (GdkPixbufFormat *format);
extern
gchar    **gdk_pixbuf_format_get_extensions  (GdkPixbufFormat *format);
extern
gboolean   gdk_pixbuf_format_is_save_option_supported (GdkPixbufFormat *format,
                                                       const gchar     *option_key);
extern
gboolean   gdk_pixbuf_format_is_writable     (GdkPixbufFormat *format);
extern
gboolean   gdk_pixbuf_format_is_scalable     (GdkPixbufFormat *format);
extern
gboolean   gdk_pixbuf_format_is_disabled     (GdkPixbufFormat *format);
extern
void       gdk_pixbuf_format_set_disabled    (GdkPixbufFormat *format,
					      gboolean         disabled);
extern
gchar     *gdk_pixbuf_format_get_license     (GdkPixbufFormat *format);

extern
GdkPixbufFormat *gdk_pixbuf_get_file_info    (const gchar     *filename,
					      gint            *width, 
					      gint            *height);
extern
void             gdk_pixbuf_get_file_info_async  (const gchar          *filename,
						  GCancellable         *cancellable,
						  GAsyncReadyCallback   callback,
						  gpointer              user_data);
extern
GdkPixbufFormat *gdk_pixbuf_get_file_info_finish (GAsyncResult         *async_result,
						  gint                 *width,
						  gint                 *height,
						  GError              **error);

extern
GdkPixbufFormat *gdk_pixbuf_format_copy (const GdkPixbufFormat *format);
extern
void             gdk_pixbuf_format_free (GdkPixbufFormat       *format);


















































































































































































































































































#line 366 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-io.h"
#line 39 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-loader.h"




























#line 30 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-loader.h"






















typedef struct _GdkPixbufLoader GdkPixbufLoader;
struct _GdkPixbufLoader
{
  GObject parent_instance;
  
  
  gpointer priv;
};

typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass
{
  GObjectClass parent_class;

  void (*size_prepared)      (GdkPixbufLoader *loader, 
			      int              width,
			      int              height);

  void (*area_prepared)      (GdkPixbufLoader *loader);

  
  void (*area_updated)       (GdkPixbufLoader *loader,
                              int              x,
                              int              y,
			      int              width,
			      int              height);

  void (*closed)             (GdkPixbufLoader *loader);
};

extern
GType                gdk_pixbuf_loader_get_type      (void) ;
extern
GdkPixbufLoader *    gdk_pixbuf_loader_new           (void);
extern
GdkPixbufLoader *    gdk_pixbuf_loader_new_with_type (const char *image_type,
                                                      GError    **error);
extern
GdkPixbufLoader *    gdk_pixbuf_loader_new_with_mime_type (const char *mime_type,
							   GError    **error);
extern
void                 gdk_pixbuf_loader_set_size (GdkPixbufLoader  *loader,
                                                 int               width,
						 int               height);
extern
gboolean             gdk_pixbuf_loader_write         (GdkPixbufLoader *loader,
						      const guchar    *buf,
						      gsize            count,
                                                      GError         **error);
extern
gboolean             gdk_pixbuf_loader_write_bytes   (GdkPixbufLoader *loader,
                                                      GBytes          *buffer,
                                                      GError         **error);
extern
GdkPixbuf *          gdk_pixbuf_loader_get_pixbuf    (GdkPixbufLoader *loader);
extern
GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);
extern
gboolean             gdk_pixbuf_loader_close         (GdkPixbufLoader *loader,
                                                      GError         **error);
extern
GdkPixbufFormat     *gdk_pixbuf_loader_get_format    (GdkPixbufLoader *loader);



#line 118 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-loader.h"


#line 40 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-enum-types.h"





#line 7 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-enum-types.h"






#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"






















#line 24 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-macros.h"































































































































































































































































































































































































































































































































































































































































#line 14 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-enum-types.h"




extern
GType gdk_pixbuf_alpha_mode_get_type (void) ;

extern
GType gdk_colorspace_get_type (void) ;

extern
GType gdk_pixbuf_error_get_type (void) ;



extern
GType gdk_interp_type_get_type (void) ;

extern
GType gdk_pixbuf_rotation_get_type (void) ;



#line 38 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-enum-types.h"



#line 41 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"

#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-autocleanups.h"
























#line 26 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-autocleanups.h"









#line 36 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-autocleanups.h"

#line 38 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf-autocleanups.h"
#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"



#line 47 "C:\\home\\test\\wrap_rsvg\\library/C/include\\gdk-pixbuf/gdk-pixbuf.h"
#line 35 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"






#line 42 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"


#line 45 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"








GType rsvg_handle_get_type (void);







typedef enum {
    RSVG_ERROR_FAILED
} RsvgError;


GQuark rsvg_error_quark (void) ;






typedef struct _RsvgHandle RsvgHandle;
typedef struct RsvgHandlePrivate RsvgHandlePrivate;
typedef struct _RsvgHandleClass RsvgHandleClass;
typedef struct _RsvgDimensionData RsvgDimensionData;
typedef struct _RsvgPositionData RsvgPositionData;







struct _RsvgHandleClass {
    GObjectClass parent;

    
    gpointer _abi_padding[15];
};

struct _RsvgHandle {
    GObject parent;

    

    RsvgHandlePrivate *priv;

    gpointer _abi_padding[15];
};








struct _RsvgDimensionData {
    int width;
    int height;
    gdouble em;
    gdouble ex;
};








struct _RsvgPositionData {
    int x;
    int y;
};

void rsvg_cleanup (void);

void rsvg_set_default_dpi	(double dpi);
void rsvg_set_default_dpi_x_y	(double dpi_x, double dpi_y);

void rsvg_handle_set_dpi	(RsvgHandle * handle, double dpi);
void rsvg_handle_set_dpi_x_y	(RsvgHandle * handle, double dpi_x, double dpi_y);

RsvgHandle  *rsvg_handle_new		(void);
gboolean     rsvg_handle_write		(RsvgHandle * handle, const guchar * buf, 
                                     gsize count, GError ** error);
gboolean     rsvg_handle_close		(RsvgHandle * handle, GError ** error);
GdkPixbuf   *rsvg_handle_get_pixbuf	(RsvgHandle * handle);
GdkPixbuf   *rsvg_handle_get_pixbuf_sub (RsvgHandle * handle, const char *id);

const char  *rsvg_handle_get_base_uri (RsvgHandle * handle);
void         rsvg_handle_set_base_uri (RsvgHandle * handle, const char *base_uri);

void rsvg_handle_get_dimensions (RsvgHandle * handle, RsvgDimensionData * dimension_data);

gboolean rsvg_handle_get_dimensions_sub (RsvgHandle * handle, RsvgDimensionData * dimension_data, const char *id);
gboolean rsvg_handle_get_position_sub (RsvgHandle * handle, RsvgPositionData * position_data, const char *id);

gboolean rsvg_handle_has_sub (RsvgHandle * handle, const char *id);














typedef enum  
{
    RSVG_HANDLE_FLAGS_NONE           = 0,
    RSVG_HANDLE_FLAG_UNLIMITED       = 1 << 0,
    RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA = 1 << 1
} RsvgHandleFlags;

RsvgHandle *rsvg_handle_new_with_flags (RsvgHandleFlags flags);

void        rsvg_handle_set_base_gfile (RsvgHandle *handle,
                                        GFile      *base_file);

gboolean    rsvg_handle_read_stream_sync (RsvgHandle   *handle,
                                          GInputStream *stream,
                                          GCancellable *cancellable,
                                          GError      **error);

RsvgHandle *rsvg_handle_new_from_gfile_sync (GFile          *file,
                                             RsvgHandleFlags flags,
                                             GCancellable   *cancellable,
                                             GError        **error);

RsvgHandle *rsvg_handle_new_from_stream_sync (GInputStream   *input_stream,
                                              GFile          *base_file,
                                              RsvgHandleFlags flags,
                                              GCancellable   *cancellable,
                                              GError        **error);

RsvgHandle *rsvg_handle_new_from_data (const guint8 * data, gsize data_len, GError ** error);
RsvgHandle *rsvg_handle_new_from_file (const gchar * file_name, GError ** error);

void rsvg_handle_internal_set_testing (RsvgHandle *handle, gboolean testing);





__declspec(deprecated("is deprecated. Use '" "g_type_init" "' instead"))
void rsvg_init (void);
__declspec(deprecated)
void rsvg_term (void);

__declspec(deprecated("is deprecated. Use '" "g_object_unref" "' instead"))
void rsvg_handle_free (RsvgHandle * handle);












typedef  void (*RsvgSizeFunc) (gint * width, gint * height, gpointer user_data);

__declspec(deprecated)
void rsvg_handle_set_size_callback (RsvgHandle * handle,
                                    RsvgSizeFunc size_func,
                                    gpointer user_data, GDestroyNotify user_data_destroy);



__declspec(deprecated)
GdkPixbuf *rsvg_pixbuf_from_file            (const gchar * file_name, GError ** error);
__declspec(deprecated)
GdkPixbuf *rsvg_pixbuf_from_file_at_zoom    (const gchar * file_name,
                                             double x_zoom, double y_zoom, GError ** error);
__declspec(deprecated)
GdkPixbuf *rsvg_pixbuf_from_file_at_size    (const gchar * file_name, gint width, gint height,
                                             GError ** error);
__declspec(deprecated)
GdkPixbuf *rsvg_pixbuf_from_file_at_max_size    (const gchar * file_name,
                                                 gint max_width, gint max_height, GError ** error);
__declspec(deprecated)
GdkPixbuf *rsvg_pixbuf_from_file_at_zoom_with_max (const gchar * file_name,
                                                   double x_zoom,
                                                   double y_zoom,
                                                   gint max_width, gint max_height, GError ** error);

__declspec(deprecated)
const char *rsvg_handle_get_title       (RsvgHandle * handle);
__declspec(deprecated)
const char *rsvg_handle_get_desc        (RsvgHandle * handle);
__declspec(deprecated)
const char *rsvg_handle_get_metadata    (RsvgHandle * handle);

#line 256 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"





#line 1 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-enum-types.h"





#line 7 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-enum-types.h"








GType rsvg_error_get_type (void);

GType rsvg_handle_flags_get_type (void);



#line 22 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-enum-types.h"



#line 262 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"
#line 1 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"


#line 4 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"



















#line 24 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"












#line 37 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"


#line 40 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"


#line 43 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"
#line 44 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"

extern __declspec (dllimport) const guint librsvg_major_version;
extern __declspec (dllimport) const guint librsvg_minor_version;
extern __declspec (dllimport) const guint librsvg_micro_version;
extern __declspec (dllimport) const char librsvg_version[];

#line 51 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\librsvg-features.h"
#line 263 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"
#line 1 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\rsvg-cairo.h"



























#line 29 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\rsvg-cairo.h"




#line 1 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"








































#line 1 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-version.h"







#line 9 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-version.h"
#line 42 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"
#line 1 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-features.h"










#line 12 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-features.h"


























#line 39 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-features.h"
#line 43 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"
#line 1 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-deprecated.h"


























































































































#line 124 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\cairo-deprecated.h"
#line 44 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"







#line 52 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"






#line 59 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"
#line 60 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"

























__declspec(dllimport) int
cairo_version (void);

__declspec(dllimport) const char*
cairo_version_string (void);

















typedef int cairo_bool_t;
















typedef struct _cairo cairo_t;




























typedef struct _cairo_surface cairo_surface_t;

















typedef struct _cairo_device cairo_device_t;




















typedef struct _cairo_matrix {
    double xx; double yx;
    double xy; double yy;
    double x0; double y0;
} cairo_matrix_t;























typedef struct _cairo_pattern cairo_pattern_t;











typedef void (*cairo_destroy_func_t) (void *data);













typedef struct _cairo_user_data_key {
    int unused;
} cairo_user_data_key_t;

































































typedef enum _cairo_status {
    CAIRO_STATUS_SUCCESS = 0,

    CAIRO_STATUS_NO_MEMORY,
    CAIRO_STATUS_INVALID_RESTORE,
    CAIRO_STATUS_INVALID_POP_GROUP,
    CAIRO_STATUS_NO_CURRENT_POINT,
    CAIRO_STATUS_INVALID_MATRIX,
    CAIRO_STATUS_INVALID_STATUS,
    CAIRO_STATUS_NULL_POINTER,
    CAIRO_STATUS_INVALID_STRING,
    CAIRO_STATUS_INVALID_PATH_DATA,
    CAIRO_STATUS_READ_ERROR,
    CAIRO_STATUS_WRITE_ERROR,
    CAIRO_STATUS_SURFACE_FINISHED,
    CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
    CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
    CAIRO_STATUS_INVALID_CONTENT,
    CAIRO_STATUS_INVALID_FORMAT,
    CAIRO_STATUS_INVALID_VISUAL,
    CAIRO_STATUS_FILE_NOT_FOUND,
    CAIRO_STATUS_INVALID_DASH,
    CAIRO_STATUS_INVALID_DSC_COMMENT,
    CAIRO_STATUS_INVALID_INDEX,
    CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
    CAIRO_STATUS_TEMP_FILE_ERROR,
    CAIRO_STATUS_INVALID_STRIDE,
    CAIRO_STATUS_FONT_TYPE_MISMATCH,
    CAIRO_STATUS_USER_FONT_IMMUTABLE,
    CAIRO_STATUS_USER_FONT_ERROR,
    CAIRO_STATUS_NEGATIVE_COUNT,
    CAIRO_STATUS_INVALID_CLUSTERS,
    CAIRO_STATUS_INVALID_SLANT,
    CAIRO_STATUS_INVALID_WEIGHT,
    CAIRO_STATUS_INVALID_SIZE,
    CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
    CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
    CAIRO_STATUS_DEVICE_ERROR,
    CAIRO_STATUS_INVALID_MESH_CONSTRUCTION,
    CAIRO_STATUS_DEVICE_FINISHED,
    CAIRO_STATUS_JBIG2_GLOBAL_MISSING,
    CAIRO_STATUS_PNG_ERROR,
    CAIRO_STATUS_FREETYPE_ERROR,
    CAIRO_STATUS_WIN32_GDI_ERROR,
    CAIRO_STATUS_TAG_ERROR,

    CAIRO_STATUS_LAST_STATUS
} cairo_status_t;

















typedef enum _cairo_content {
    CAIRO_CONTENT_COLOR		= 0x1000,
    CAIRO_CONTENT_ALPHA		= 0x2000,
    CAIRO_CONTENT_COLOR_ALPHA	= 0x3000
} cairo_content_t;
































typedef enum _cairo_format {
    CAIRO_FORMAT_INVALID   = -1,
    CAIRO_FORMAT_ARGB32    = 0,
    CAIRO_FORMAT_RGB24     = 1,
    CAIRO_FORMAT_A8        = 2,
    CAIRO_FORMAT_A1        = 3,
    CAIRO_FORMAT_RGB16_565 = 4,
    CAIRO_FORMAT_RGB30     = 5
} cairo_format_t;




















typedef cairo_status_t (*cairo_write_func_t) (void		  *closure,
					      const unsigned char *data,
					      unsigned int	   length);



















typedef cairo_status_t (*cairo_read_func_t) (void		*closure,
					     unsigned char	*data,
					     unsigned int	length);













typedef struct _cairo_rectangle_int {
    int x, y;
    int width, height;
} cairo_rectangle_int_t;



__declspec(dllimport) cairo_t *
cairo_create (cairo_surface_t *target);

__declspec(dllimport) cairo_t *
cairo_reference (cairo_t *cr);

__declspec(dllimport) void
cairo_destroy (cairo_t *cr);

__declspec(dllimport) unsigned int
cairo_get_reference_count (cairo_t *cr);

__declspec(dllimport) void *
cairo_get_user_data (cairo_t			 *cr,
		     const cairo_user_data_key_t *key);

__declspec(dllimport) cairo_status_t
cairo_set_user_data (cairo_t			 *cr,
		     const cairo_user_data_key_t *key,
		     void			 *user_data,
		     cairo_destroy_func_t	  destroy);

__declspec(dllimport) void
cairo_save (cairo_t *cr);

__declspec(dllimport) void
cairo_restore (cairo_t *cr);

__declspec(dllimport) void
cairo_push_group (cairo_t *cr);

__declspec(dllimport) void
cairo_push_group_with_content (cairo_t *cr, cairo_content_t content);

__declspec(dllimport) cairo_pattern_t *
cairo_pop_group (cairo_t *cr);

__declspec(dllimport) void
cairo_pop_group_to_source (cairo_t *cr);




















































































typedef enum _cairo_operator {
    CAIRO_OPERATOR_CLEAR,

    CAIRO_OPERATOR_SOURCE,
    CAIRO_OPERATOR_OVER,
    CAIRO_OPERATOR_IN,
    CAIRO_OPERATOR_OUT,
    CAIRO_OPERATOR_ATOP,

    CAIRO_OPERATOR_DEST,
    CAIRO_OPERATOR_DEST_OVER,
    CAIRO_OPERATOR_DEST_IN,
    CAIRO_OPERATOR_DEST_OUT,
    CAIRO_OPERATOR_DEST_ATOP,

    CAIRO_OPERATOR_XOR,
    CAIRO_OPERATOR_ADD,
    CAIRO_OPERATOR_SATURATE,

    CAIRO_OPERATOR_MULTIPLY,
    CAIRO_OPERATOR_SCREEN,
    CAIRO_OPERATOR_OVERLAY,
    CAIRO_OPERATOR_DARKEN,
    CAIRO_OPERATOR_LIGHTEN,
    CAIRO_OPERATOR_COLOR_DODGE,
    CAIRO_OPERATOR_COLOR_BURN,
    CAIRO_OPERATOR_HARD_LIGHT,
    CAIRO_OPERATOR_SOFT_LIGHT,
    CAIRO_OPERATOR_DIFFERENCE,
    CAIRO_OPERATOR_EXCLUSION,
    CAIRO_OPERATOR_HSL_HUE,
    CAIRO_OPERATOR_HSL_SATURATION,
    CAIRO_OPERATOR_HSL_COLOR,
    CAIRO_OPERATOR_HSL_LUMINOSITY
} cairo_operator_t;

__declspec(dllimport) void
cairo_set_operator (cairo_t *cr, cairo_operator_t op);

__declspec(dllimport) void
cairo_set_source (cairo_t *cr, cairo_pattern_t *source);

__declspec(dllimport) void
cairo_set_source_rgb (cairo_t *cr, double red, double green, double blue);

__declspec(dllimport) void
cairo_set_source_rgba (cairo_t *cr,
		       double red, double green, double blue,
		       double alpha);

__declspec(dllimport) void
cairo_set_source_surface (cairo_t	  *cr,
			  cairo_surface_t *surface,
			  double	   x,
			  double	   y);

__declspec(dllimport) void
cairo_set_tolerance (cairo_t *cr, double tolerance);






































typedef enum _cairo_antialias {
    CAIRO_ANTIALIAS_DEFAULT,

    
    CAIRO_ANTIALIAS_NONE,
    CAIRO_ANTIALIAS_GRAY,
    CAIRO_ANTIALIAS_SUBPIXEL,

    
    CAIRO_ANTIALIAS_FAST,
    CAIRO_ANTIALIAS_GOOD,
    CAIRO_ANTIALIAS_BEST
} cairo_antialias_t;

__declspec(dllimport) void
cairo_set_antialias (cairo_t *cr, cairo_antialias_t antialias);




























typedef enum _cairo_fill_rule {
    CAIRO_FILL_RULE_WINDING,
    CAIRO_FILL_RULE_EVEN_ODD
} cairo_fill_rule_t;

__declspec(dllimport) void
cairo_set_fill_rule (cairo_t *cr, cairo_fill_rule_t fill_rule);

__declspec(dllimport) void
cairo_set_line_width (cairo_t *cr, double width);













typedef enum _cairo_line_cap {
    CAIRO_LINE_CAP_BUTT,
    CAIRO_LINE_CAP_ROUND,
    CAIRO_LINE_CAP_SQUARE
} cairo_line_cap_t;

__declspec(dllimport) void
cairo_set_line_cap (cairo_t *cr, cairo_line_cap_t line_cap);
















typedef enum _cairo_line_join {
    CAIRO_LINE_JOIN_MITER,
    CAIRO_LINE_JOIN_ROUND,
    CAIRO_LINE_JOIN_BEVEL
} cairo_line_join_t;

__declspec(dllimport) void
cairo_set_line_join (cairo_t *cr, cairo_line_join_t line_join);

__declspec(dllimport) void
cairo_set_dash (cairo_t      *cr,
		const double *dashes,
		int	      num_dashes,
		double	      offset);

__declspec(dllimport) void
cairo_set_miter_limit (cairo_t *cr, double limit);

__declspec(dllimport) void
cairo_translate (cairo_t *cr, double tx, double ty);

__declspec(dllimport) void
cairo_scale (cairo_t *cr, double sx, double sy);

__declspec(dllimport) void
cairo_rotate (cairo_t *cr, double angle);

__declspec(dllimport) void
cairo_transform (cairo_t	      *cr,
		 const cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_set_matrix (cairo_t	       *cr,
		  const cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_identity_matrix (cairo_t *cr);

__declspec(dllimport) void
cairo_user_to_device (cairo_t *cr, double *x, double *y);

__declspec(dllimport) void
cairo_user_to_device_distance (cairo_t *cr, double *dx, double *dy);

__declspec(dllimport) void
cairo_device_to_user (cairo_t *cr, double *x, double *y);

__declspec(dllimport) void
cairo_device_to_user_distance (cairo_t *cr, double *dx, double *dy);


__declspec(dllimport) void
cairo_new_path (cairo_t *cr);

__declspec(dllimport) void
cairo_move_to (cairo_t *cr, double x, double y);

__declspec(dllimport) void
cairo_new_sub_path (cairo_t *cr);

__declspec(dllimport) void
cairo_line_to (cairo_t *cr, double x, double y);

__declspec(dllimport) void
cairo_curve_to (cairo_t *cr,
		double x1, double y1,
		double x2, double y2,
		double x3, double y3);

__declspec(dllimport) void
cairo_arc (cairo_t *cr,
	   double xc, double yc,
	   double radius,
	   double angle1, double angle2);

__declspec(dllimport) void
cairo_arc_negative (cairo_t *cr,
		    double xc, double yc,
		    double radius,
		    double angle1, double angle2);









__declspec(dllimport) void
cairo_rel_move_to (cairo_t *cr, double dx, double dy);

__declspec(dllimport) void
cairo_rel_line_to (cairo_t *cr, double dx, double dy);

__declspec(dllimport) void
cairo_rel_curve_to (cairo_t *cr,
		    double dx1, double dy1,
		    double dx2, double dy2,
		    double dx3, double dy3);

__declspec(dllimport) void
cairo_rectangle (cairo_t *cr,
		 double x, double y,
		 double width, double height);






__declspec(dllimport) void
cairo_close_path (cairo_t *cr);

__declspec(dllimport) void
cairo_path_extents (cairo_t *cr,
		    double *x1, double *y1,
		    double *x2, double *y2);


__declspec(dllimport) void
cairo_paint (cairo_t *cr);

__declspec(dllimport) void
cairo_paint_with_alpha (cairo_t *cr,
			double   alpha);

__declspec(dllimport) void
cairo_mask (cairo_t         *cr,
	    cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_mask_surface (cairo_t         *cr,
		    cairo_surface_t *surface,
		    double           surface_x,
		    double           surface_y);

__declspec(dllimport) void
cairo_stroke (cairo_t *cr);

__declspec(dllimport) void
cairo_stroke_preserve (cairo_t *cr);

__declspec(dllimport) void
cairo_fill (cairo_t *cr);

__declspec(dllimport) void
cairo_fill_preserve (cairo_t *cr);

__declspec(dllimport) void
cairo_copy_page (cairo_t *cr);

__declspec(dllimport) void
cairo_show_page (cairo_t *cr);


__declspec(dllimport) cairo_bool_t
cairo_in_stroke (cairo_t *cr, double x, double y);

__declspec(dllimport) cairo_bool_t
cairo_in_fill (cairo_t *cr, double x, double y);

__declspec(dllimport) cairo_bool_t
cairo_in_clip (cairo_t *cr, double x, double y);


__declspec(dllimport) void
cairo_stroke_extents (cairo_t *cr,
		      double *x1, double *y1,
		      double *x2, double *y2);

__declspec(dllimport) void
cairo_fill_extents (cairo_t *cr,
		    double *x1, double *y1,
		    double *x2, double *y2);


__declspec(dllimport) void
cairo_reset_clip (cairo_t *cr);

__declspec(dllimport) void
cairo_clip (cairo_t *cr);

__declspec(dllimport) void
cairo_clip_preserve (cairo_t *cr);

__declspec(dllimport) void
cairo_clip_extents (cairo_t *cr,
		    double *x1, double *y1,
		    double *x2, double *y2);












typedef struct _cairo_rectangle {
    double x, y, width, height;
} cairo_rectangle_t;












typedef struct _cairo_rectangle_list {
    cairo_status_t     status;
    cairo_rectangle_t *rectangles;
    int                num_rectangles;
} cairo_rectangle_list_t;

__declspec(dllimport) cairo_rectangle_list_t *
cairo_copy_clip_rectangle_list (cairo_t *cr);

__declspec(dllimport) void
cairo_rectangle_list_destroy (cairo_rectangle_list_t *rectangle_list);






__declspec(dllimport) void
cairo_tag_begin (cairo_t *cr, const char *tag_name, const char *attributes);

__declspec(dllimport) void
cairo_tag_end (cairo_t *cr, const char *tag_name);




















typedef struct _cairo_scaled_font cairo_scaled_font_t;




















typedef struct _cairo_font_face cairo_font_face_t;



























typedef struct {
    unsigned long        index;
    double               x;
    double               y;
} cairo_glyph_t;

__declspec(dllimport) cairo_glyph_t *
cairo_glyph_allocate (int num_glyphs);

__declspec(dllimport) void
cairo_glyph_free (cairo_glyph_t *glyphs);





















typedef struct {
    int        num_bytes;
    int        num_glyphs;
} cairo_text_cluster_t;

__declspec(dllimport) cairo_text_cluster_t *
cairo_text_cluster_allocate (int num_clusters);

__declspec(dllimport) void
cairo_text_cluster_free (cairo_text_cluster_t *clusters);










typedef enum _cairo_text_cluster_flags {
    CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 0x00000001
} cairo_text_cluster_flags_t;






























typedef struct {
    double x_bearing;
    double y_bearing;
    double width;
    double height;
    double x_advance;
    double y_advance;
} cairo_text_extents_t;












































typedef struct {
    double ascent;
    double descent;
    double height;
    double max_x_advance;
    double max_y_advance;
} cairo_font_extents_t;











typedef enum _cairo_font_slant {
    CAIRO_FONT_SLANT_NORMAL,
    CAIRO_FONT_SLANT_ITALIC,
    CAIRO_FONT_SLANT_OBLIQUE
} cairo_font_slant_t;










typedef enum _cairo_font_weight {
    CAIRO_FONT_WEIGHT_NORMAL,
    CAIRO_FONT_WEIGHT_BOLD
} cairo_font_weight_t;




















typedef enum _cairo_subpixel_order {
    CAIRO_SUBPIXEL_ORDER_DEFAULT,
    CAIRO_SUBPIXEL_ORDER_RGB,
    CAIRO_SUBPIXEL_ORDER_BGR,
    CAIRO_SUBPIXEL_ORDER_VRGB,
    CAIRO_SUBPIXEL_ORDER_VBGR
} cairo_subpixel_order_t;

























typedef enum _cairo_hint_style {
    CAIRO_HINT_STYLE_DEFAULT,
    CAIRO_HINT_STYLE_NONE,
    CAIRO_HINT_STYLE_SLIGHT,
    CAIRO_HINT_STYLE_MEDIUM,
    CAIRO_HINT_STYLE_FULL
} cairo_hint_style_t;
















typedef enum _cairo_hint_metrics {
    CAIRO_HINT_METRICS_DEFAULT,
    CAIRO_HINT_METRICS_OFF,
    CAIRO_HINT_METRICS_ON
} cairo_hint_metrics_t;























typedef struct _cairo_font_options cairo_font_options_t;

__declspec(dllimport) cairo_font_options_t *
cairo_font_options_create (void);

__declspec(dllimport) cairo_font_options_t *
cairo_font_options_copy (const cairo_font_options_t *original);

__declspec(dllimport) void
cairo_font_options_destroy (cairo_font_options_t *options);

__declspec(dllimport) cairo_status_t
cairo_font_options_status (cairo_font_options_t *options);

__declspec(dllimport) void
cairo_font_options_merge (cairo_font_options_t       *options,
			  const cairo_font_options_t *other);
__declspec(dllimport) cairo_bool_t
cairo_font_options_equal (const cairo_font_options_t *options,
			  const cairo_font_options_t *other);

__declspec(dllimport) unsigned long
cairo_font_options_hash (const cairo_font_options_t *options);

__declspec(dllimport) void
cairo_font_options_set_antialias (cairo_font_options_t *options,
				  cairo_antialias_t     antialias);
__declspec(dllimport) cairo_antialias_t
cairo_font_options_get_antialias (const cairo_font_options_t *options);

__declspec(dllimport) void
cairo_font_options_set_subpixel_order (cairo_font_options_t   *options,
				       cairo_subpixel_order_t  subpixel_order);
__declspec(dllimport) cairo_subpixel_order_t
cairo_font_options_get_subpixel_order (const cairo_font_options_t *options);

__declspec(dllimport) void
cairo_font_options_set_hint_style (cairo_font_options_t *options,
				   cairo_hint_style_t     hint_style);
__declspec(dllimport) cairo_hint_style_t
cairo_font_options_get_hint_style (const cairo_font_options_t *options);

__declspec(dllimport) void
cairo_font_options_set_hint_metrics (cairo_font_options_t *options,
				     cairo_hint_metrics_t  hint_metrics);
__declspec(dllimport) cairo_hint_metrics_t
cairo_font_options_get_hint_metrics (const cairo_font_options_t *options);

__declspec(dllimport) const char *
cairo_font_options_get_variations (cairo_font_options_t *options);

__declspec(dllimport) void
cairo_font_options_set_variations (cairo_font_options_t *options,
                                   const char           *variations);




__declspec(dllimport) void
cairo_select_font_face (cairo_t              *cr,
			const char           *family,
			cairo_font_slant_t   slant,
			cairo_font_weight_t  weight);

__declspec(dllimport) void
cairo_set_font_size (cairo_t *cr, double size);

__declspec(dllimport) void
cairo_set_font_matrix (cairo_t		    *cr,
		       const cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_get_font_matrix (cairo_t *cr,
		       cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_set_font_options (cairo_t                    *cr,
			const cairo_font_options_t *options);

__declspec(dllimport) void
cairo_get_font_options (cairo_t              *cr,
			cairo_font_options_t *options);

__declspec(dllimport) void
cairo_set_font_face (cairo_t *cr, cairo_font_face_t *font_face);

__declspec(dllimport) cairo_font_face_t *
cairo_get_font_face (cairo_t *cr);

__declspec(dllimport) void
cairo_set_scaled_font (cairo_t                   *cr,
		       const cairo_scaled_font_t *scaled_font);

__declspec(dllimport) cairo_scaled_font_t *
cairo_get_scaled_font (cairo_t *cr);

__declspec(dllimport) void
cairo_show_text (cairo_t *cr, const char *utf8);

__declspec(dllimport) void
cairo_show_glyphs (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

__declspec(dllimport) void
cairo_show_text_glyphs (cairo_t			   *cr,
			const char		   *utf8,
			int			    utf8_len,
			const cairo_glyph_t	   *glyphs,
			int			    num_glyphs,
			const cairo_text_cluster_t *clusters,
			int			    num_clusters,
			cairo_text_cluster_flags_t  cluster_flags);

__declspec(dllimport) void
cairo_text_path  (cairo_t *cr, const char *utf8);

__declspec(dllimport) void
cairo_glyph_path (cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs);

__declspec(dllimport) void
cairo_text_extents (cairo_t              *cr,
		    const char    	 *utf8,
		    cairo_text_extents_t *extents);

__declspec(dllimport) void
cairo_glyph_extents (cairo_t               *cr,
		     const cairo_glyph_t   *glyphs,
		     int                   num_glyphs,
		     cairo_text_extents_t  *extents);

__declspec(dllimport) void
cairo_font_extents (cairo_t              *cr,
		    cairo_font_extents_t *extents);



__declspec(dllimport) cairo_font_face_t *
cairo_font_face_reference (cairo_font_face_t *font_face);

__declspec(dllimport) void
cairo_font_face_destroy (cairo_font_face_t *font_face);

__declspec(dllimport) unsigned int
cairo_font_face_get_reference_count (cairo_font_face_t *font_face);

__declspec(dllimport) cairo_status_t
cairo_font_face_status (cairo_font_face_t *font_face);









































typedef enum _cairo_font_type {
    CAIRO_FONT_TYPE_TOY,
    CAIRO_FONT_TYPE_FT,
    CAIRO_FONT_TYPE_WIN32,
    CAIRO_FONT_TYPE_QUARTZ,
    CAIRO_FONT_TYPE_USER
} cairo_font_type_t;

__declspec(dllimport) cairo_font_type_t
cairo_font_face_get_type (cairo_font_face_t *font_face);

__declspec(dllimport) void *
cairo_font_face_get_user_data (cairo_font_face_t	   *font_face,
			       const cairo_user_data_key_t *key);

__declspec(dllimport) cairo_status_t
cairo_font_face_set_user_data (cairo_font_face_t	   *font_face,
			       const cairo_user_data_key_t *key,
			       void			   *user_data,
			       cairo_destroy_func_t	    destroy);



__declspec(dllimport) cairo_scaled_font_t *
cairo_scaled_font_create (cairo_font_face_t          *font_face,
			  const cairo_matrix_t       *font_matrix,
			  const cairo_matrix_t       *ctm,
			  const cairo_font_options_t *options);

__declspec(dllimport) cairo_scaled_font_t *
cairo_scaled_font_reference (cairo_scaled_font_t *scaled_font);

__declspec(dllimport) void
cairo_scaled_font_destroy (cairo_scaled_font_t *scaled_font);

__declspec(dllimport) unsigned int
cairo_scaled_font_get_reference_count (cairo_scaled_font_t *scaled_font);

__declspec(dllimport) cairo_status_t
cairo_scaled_font_status (cairo_scaled_font_t *scaled_font);

__declspec(dllimport) cairo_font_type_t
cairo_scaled_font_get_type (cairo_scaled_font_t *scaled_font);

__declspec(dllimport) void *
cairo_scaled_font_get_user_data (cairo_scaled_font_t         *scaled_font,
				 const cairo_user_data_key_t *key);

__declspec(dllimport) cairo_status_t
cairo_scaled_font_set_user_data (cairo_scaled_font_t         *scaled_font,
				 const cairo_user_data_key_t *key,
				 void                        *user_data,
				 cairo_destroy_func_t	      destroy);

__declspec(dllimport) void
cairo_scaled_font_extents (cairo_scaled_font_t  *scaled_font,
			   cairo_font_extents_t *extents);

__declspec(dllimport) void
cairo_scaled_font_text_extents (cairo_scaled_font_t  *scaled_font,
				const char  	     *utf8,
				cairo_text_extents_t *extents);

__declspec(dllimport) void
cairo_scaled_font_glyph_extents (cairo_scaled_font_t   *scaled_font,
				 const cairo_glyph_t   *glyphs,
				 int                   num_glyphs,
				 cairo_text_extents_t  *extents);

__declspec(dllimport) cairo_status_t
cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t        *scaled_font,
				  double		      x,
				  double		      y,
				  const char	             *utf8,
				  int		              utf8_len,
				  cairo_glyph_t	            **glyphs,
				  int		             *num_glyphs,
				  cairo_text_cluster_t      **clusters,
				  int		             *num_clusters,
				  cairo_text_cluster_flags_t *cluster_flags);

__declspec(dllimport) cairo_font_face_t *
cairo_scaled_font_get_font_face (cairo_scaled_font_t *scaled_font);

__declspec(dllimport) void
cairo_scaled_font_get_font_matrix (cairo_scaled_font_t	*scaled_font,
				   cairo_matrix_t	*font_matrix);

__declspec(dllimport) void
cairo_scaled_font_get_ctm (cairo_scaled_font_t	*scaled_font,
			   cairo_matrix_t	*ctm);

__declspec(dllimport) void
cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t	*scaled_font,
				    cairo_matrix_t	*scale_matrix);

__declspec(dllimport) void
cairo_scaled_font_get_font_options (cairo_scaled_font_t		*scaled_font,
				    cairo_font_options_t	*options);




__declspec(dllimport) cairo_font_face_t *
cairo_toy_font_face_create (const char           *family,
			    cairo_font_slant_t    slant,
			    cairo_font_weight_t   weight);

__declspec(dllimport) const char *
cairo_toy_font_face_get_family (cairo_font_face_t *font_face);

__declspec(dllimport) cairo_font_slant_t
cairo_toy_font_face_get_slant (cairo_font_face_t *font_face);

__declspec(dllimport) cairo_font_weight_t
cairo_toy_font_face_get_weight (cairo_font_face_t *font_face);




__declspec(dllimport) cairo_font_face_t *
cairo_user_font_face_create (void);



































typedef cairo_status_t (*cairo_user_scaled_font_init_func_t) (cairo_scaled_font_t  *scaled_font,
							      cairo_t              *cr,
							      cairo_font_extents_t *extents);












































typedef cairo_status_t (*cairo_user_scaled_font_render_glyph_func_t) (cairo_scaled_font_t  *scaled_font,
								      unsigned long         glyph,
								      cairo_t              *cr,
								      cairo_text_extents_t *extents);


































































typedef cairo_status_t (*cairo_user_scaled_font_text_to_glyphs_func_t) (cairo_scaled_font_t        *scaled_font,
									const char	           *utf8,
									int		            utf8_len,
									cairo_glyph_t	          **glyphs,
									int		           *num_glyphs,
									cairo_text_cluster_t      **clusters,
									int		           *num_clusters,
									cairo_text_cluster_flags_t *cluster_flags);







































typedef cairo_status_t (*cairo_user_scaled_font_unicode_to_glyph_func_t) (cairo_scaled_font_t *scaled_font,
									  unsigned long        unicode,
									  unsigned long       *glyph_index);



__declspec(dllimport) void
cairo_user_font_face_set_init_func (cairo_font_face_t                  *font_face,
				    cairo_user_scaled_font_init_func_t  init_func);

__declspec(dllimport) void
cairo_user_font_face_set_render_glyph_func (cairo_font_face_t                          *font_face,
					    cairo_user_scaled_font_render_glyph_func_t  render_glyph_func);

__declspec(dllimport) void
cairo_user_font_face_set_text_to_glyphs_func (cairo_font_face_t                            *font_face,
					      cairo_user_scaled_font_text_to_glyphs_func_t  text_to_glyphs_func);

__declspec(dllimport) void
cairo_user_font_face_set_unicode_to_glyph_func (cairo_font_face_t                              *font_face,
					        cairo_user_scaled_font_unicode_to_glyph_func_t  unicode_to_glyph_func);



__declspec(dllimport) cairo_user_scaled_font_init_func_t
cairo_user_font_face_get_init_func (cairo_font_face_t *font_face);

__declspec(dllimport) cairo_user_scaled_font_render_glyph_func_t
cairo_user_font_face_get_render_glyph_func (cairo_font_face_t *font_face);

__declspec(dllimport) cairo_user_scaled_font_text_to_glyphs_func_t
cairo_user_font_face_get_text_to_glyphs_func (cairo_font_face_t *font_face);

__declspec(dllimport) cairo_user_scaled_font_unicode_to_glyph_func_t
cairo_user_font_face_get_unicode_to_glyph_func (cairo_font_face_t *font_face);




__declspec(dllimport) cairo_operator_t
cairo_get_operator (cairo_t *cr);

__declspec(dllimport) cairo_pattern_t *
cairo_get_source (cairo_t *cr);

__declspec(dllimport) double
cairo_get_tolerance (cairo_t *cr);

__declspec(dllimport) cairo_antialias_t
cairo_get_antialias (cairo_t *cr);

__declspec(dllimport) cairo_bool_t
cairo_has_current_point (cairo_t *cr);

__declspec(dllimport) void
cairo_get_current_point (cairo_t *cr, double *x, double *y);

__declspec(dllimport) cairo_fill_rule_t
cairo_get_fill_rule (cairo_t *cr);

__declspec(dllimport) double
cairo_get_line_width (cairo_t *cr);

__declspec(dllimport) cairo_line_cap_t
cairo_get_line_cap (cairo_t *cr);

__declspec(dllimport) cairo_line_join_t
cairo_get_line_join (cairo_t *cr);

__declspec(dllimport) double
cairo_get_miter_limit (cairo_t *cr);

__declspec(dllimport) int
cairo_get_dash_count (cairo_t *cr);

__declspec(dllimport) void
cairo_get_dash (cairo_t *cr, double *dashes, double *offset);

__declspec(dllimport) void
cairo_get_matrix (cairo_t *cr, cairo_matrix_t *matrix);

__declspec(dllimport) cairo_surface_t *
cairo_get_target (cairo_t *cr);

__declspec(dllimport) cairo_surface_t *
cairo_get_group_target (cairo_t *cr);














typedef enum _cairo_path_data_type {
    CAIRO_PATH_MOVE_TO,
    CAIRO_PATH_LINE_TO,
    CAIRO_PATH_CURVE_TO,
    CAIRO_PATH_CLOSE_PATH
} cairo_path_data_type_t;





































































typedef union _cairo_path_data_t cairo_path_data_t;
union _cairo_path_data_t {
    struct {
	cairo_path_data_type_t type;
	int length;
    } header;
    struct {
	double x, y;
    } point;
};






















typedef struct cairo_path {
    cairo_status_t status;
    cairo_path_data_t *data;
    int num_data;
} cairo_path_t;

__declspec(dllimport) cairo_path_t *
cairo_copy_path (cairo_t *cr);

__declspec(dllimport) cairo_path_t *
cairo_copy_path_flat (cairo_t *cr);

__declspec(dllimport) void
cairo_append_path (cairo_t		*cr,
		   const cairo_path_t	*path);

__declspec(dllimport) void
cairo_path_destroy (cairo_path_t *path);



__declspec(dllimport) cairo_status_t
cairo_status (cairo_t *cr);

__declspec(dllimport) const char *
cairo_status_to_string (cairo_status_t status);



__declspec(dllimport) cairo_device_t *
cairo_device_reference (cairo_device_t *device);
































typedef enum _cairo_device_type {
    CAIRO_DEVICE_TYPE_DRM,
    CAIRO_DEVICE_TYPE_GL,
    CAIRO_DEVICE_TYPE_SCRIPT,
    CAIRO_DEVICE_TYPE_XCB,
    CAIRO_DEVICE_TYPE_XLIB,
    CAIRO_DEVICE_TYPE_XML,
    CAIRO_DEVICE_TYPE_COGL,
    CAIRO_DEVICE_TYPE_WIN32,

    CAIRO_DEVICE_TYPE_INVALID = -1
} cairo_device_type_t;

__declspec(dllimport) cairo_device_type_t
cairo_device_get_type (cairo_device_t *device);

__declspec(dllimport) cairo_status_t
cairo_device_status (cairo_device_t *device);

__declspec(dllimport) cairo_status_t
cairo_device_acquire (cairo_device_t *device);

__declspec(dllimport) void
cairo_device_release (cairo_device_t *device);

__declspec(dllimport) void
cairo_device_flush (cairo_device_t *device);

__declspec(dllimport) void
cairo_device_finish (cairo_device_t *device);

__declspec(dllimport) void
cairo_device_destroy (cairo_device_t *device);

__declspec(dllimport) unsigned int
cairo_device_get_reference_count (cairo_device_t *device);

__declspec(dllimport) void *
cairo_device_get_user_data (cairo_device_t		 *device,
			    const cairo_user_data_key_t *key);

__declspec(dllimport) cairo_status_t
cairo_device_set_user_data (cairo_device_t		 *device,
			    const cairo_user_data_key_t *key,
			    void			 *user_data,
			    cairo_destroy_func_t	  destroy);




__declspec(dllimport) cairo_surface_t *
cairo_surface_create_similar (cairo_surface_t  *other,
			      cairo_content_t	content,
			      int		width,
			      int		height);

__declspec(dllimport) cairo_surface_t *
cairo_surface_create_similar_image (cairo_surface_t  *other,
				    cairo_format_t    format,
				    int		width,
				    int		height);

__declspec(dllimport) cairo_surface_t *
cairo_surface_map_to_image (cairo_surface_t  *surface,
			    const cairo_rectangle_int_t *extents);

__declspec(dllimport) void
cairo_surface_unmap_image (cairo_surface_t *surface,
			   cairo_surface_t *image);

__declspec(dllimport) cairo_surface_t *
cairo_surface_create_for_rectangle (cairo_surface_t	*target,
                                    double		 x,
                                    double		 y,
                                    double		 width,
                                    double		 height);










typedef enum {
	CAIRO_SURFACE_OBSERVER_NORMAL = 0,
	CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 0x1
} cairo_surface_observer_mode_t;

__declspec(dllimport) cairo_surface_t *
cairo_surface_create_observer (cairo_surface_t *target,
			       cairo_surface_observer_mode_t mode);

typedef void (*cairo_surface_observer_callback_t) (cairo_surface_t *observer,
						   cairo_surface_t *target,
						   void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_paint_callback (cairo_surface_t *abstract_surface,
					   cairo_surface_observer_callback_t func,
					   void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_mask_callback (cairo_surface_t *abstract_surface,
					  cairo_surface_observer_callback_t func,
					  void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_fill_callback (cairo_surface_t *abstract_surface,
					  cairo_surface_observer_callback_t func,
					  void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_stroke_callback (cairo_surface_t *abstract_surface,
					    cairo_surface_observer_callback_t func,
					    void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_glyphs_callback (cairo_surface_t *abstract_surface,
					    cairo_surface_observer_callback_t func,
					    void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_flush_callback (cairo_surface_t *abstract_surface,
					   cairo_surface_observer_callback_t func,
					   void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_add_finish_callback (cairo_surface_t *abstract_surface,
					    cairo_surface_observer_callback_t func,
					    void *data);

__declspec(dllimport) cairo_status_t
cairo_surface_observer_print (cairo_surface_t *surface,
			      cairo_write_func_t write_func,
			      void *closure);
__declspec(dllimport) double
cairo_surface_observer_elapsed (cairo_surface_t *surface);

__declspec(dllimport) cairo_status_t
cairo_device_observer_print (cairo_device_t *device,
			     cairo_write_func_t write_func,
			     void *closure);

__declspec(dllimport) double
cairo_device_observer_elapsed (cairo_device_t *device);

__declspec(dllimport) double
cairo_device_observer_paint_elapsed (cairo_device_t *device);

__declspec(dllimport) double
cairo_device_observer_mask_elapsed (cairo_device_t *device);

__declspec(dllimport) double
cairo_device_observer_fill_elapsed (cairo_device_t *device);

__declspec(dllimport) double
cairo_device_observer_stroke_elapsed (cairo_device_t *device);

__declspec(dllimport) double
cairo_device_observer_glyphs_elapsed (cairo_device_t *device);

__declspec(dllimport) cairo_surface_t *
cairo_surface_reference (cairo_surface_t *surface);

__declspec(dllimport) void
cairo_surface_finish (cairo_surface_t *surface);

__declspec(dllimport) void
cairo_surface_destroy (cairo_surface_t *surface);

__declspec(dllimport) cairo_device_t *
cairo_surface_get_device (cairo_surface_t *surface);

__declspec(dllimport) unsigned int
cairo_surface_get_reference_count (cairo_surface_t *surface);

__declspec(dllimport) cairo_status_t
cairo_surface_status (cairo_surface_t *surface);





















































typedef enum _cairo_surface_type {
    CAIRO_SURFACE_TYPE_IMAGE,
    CAIRO_SURFACE_TYPE_PDF,
    CAIRO_SURFACE_TYPE_PS,
    CAIRO_SURFACE_TYPE_XLIB,
    CAIRO_SURFACE_TYPE_XCB,
    CAIRO_SURFACE_TYPE_GLITZ,
    CAIRO_SURFACE_TYPE_QUARTZ,
    CAIRO_SURFACE_TYPE_WIN32,
    CAIRO_SURFACE_TYPE_BEOS,
    CAIRO_SURFACE_TYPE_DIRECTFB,
    CAIRO_SURFACE_TYPE_SVG,
    CAIRO_SURFACE_TYPE_OS2,
    CAIRO_SURFACE_TYPE_WIN32_PRINTING,
    CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
    CAIRO_SURFACE_TYPE_SCRIPT,
    CAIRO_SURFACE_TYPE_QT,
    CAIRO_SURFACE_TYPE_RECORDING,
    CAIRO_SURFACE_TYPE_VG,
    CAIRO_SURFACE_TYPE_GL,
    CAIRO_SURFACE_TYPE_DRM,
    CAIRO_SURFACE_TYPE_TEE,
    CAIRO_SURFACE_TYPE_XML,
    CAIRO_SURFACE_TYPE_SKIA,
    CAIRO_SURFACE_TYPE_SUBSURFACE,
    CAIRO_SURFACE_TYPE_COGL
} cairo_surface_type_t;

__declspec(dllimport) cairo_surface_type_t
cairo_surface_get_type (cairo_surface_t *surface);

__declspec(dllimport) cairo_content_t
cairo_surface_get_content (cairo_surface_t *surface);



__declspec(dllimport) cairo_status_t
cairo_surface_write_to_png (cairo_surface_t	*surface,
			    const char		*filename);

__declspec(dllimport) cairo_status_t
cairo_surface_write_to_png_stream (cairo_surface_t	*surface,
				   cairo_write_func_t	write_func,
				   void			*closure);

#line 2443 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"

__declspec(dllimport) void *
cairo_surface_get_user_data (cairo_surface_t		 *surface,
			     const cairo_user_data_key_t *key);

__declspec(dllimport) cairo_status_t
cairo_surface_set_user_data (cairo_surface_t		 *surface,
			     const cairo_user_data_key_t *key,
			     void			 *user_data,
			     cairo_destroy_func_t	 destroy);














__declspec(dllimport) void
cairo_surface_get_mime_data (cairo_surface_t		*surface,
                             const char			*mime_type,
                             const unsigned char       **data,
                             unsigned long		*length);

__declspec(dllimport) cairo_status_t
cairo_surface_set_mime_data (cairo_surface_t		*surface,
                             const char			*mime_type,
                             const unsigned char	*data,
                             unsigned long		 length,
			     cairo_destroy_func_t	 destroy,
			     void			*closure);

__declspec(dllimport) cairo_bool_t
cairo_surface_supports_mime_type (cairo_surface_t		*surface,
				  const char		        *mime_type);

__declspec(dllimport) void
cairo_surface_get_font_options (cairo_surface_t      *surface,
				cairo_font_options_t *options);

__declspec(dllimport) void
cairo_surface_flush (cairo_surface_t *surface);

__declspec(dllimport) void
cairo_surface_mark_dirty (cairo_surface_t *surface);

__declspec(dllimport) void
cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface,
				    int              x,
				    int              y,
				    int              width,
				    int              height);

__declspec(dllimport) void
cairo_surface_set_device_scale (cairo_surface_t *surface,
				double           x_scale,
				double           y_scale);

__declspec(dllimport) void
cairo_surface_get_device_scale (cairo_surface_t *surface,
				double          *x_scale,
				double          *y_scale);

__declspec(dllimport) void
cairo_surface_set_device_offset (cairo_surface_t *surface,
				 double           x_offset,
				 double           y_offset);

__declspec(dllimport) void
cairo_surface_get_device_offset (cairo_surface_t *surface,
				 double          *x_offset,
				 double          *y_offset);

__declspec(dllimport) void
cairo_surface_set_fallback_resolution (cairo_surface_t	*surface,
				       double		 x_pixels_per_inch,
				       double		 y_pixels_per_inch);

__declspec(dllimport) void
cairo_surface_get_fallback_resolution (cairo_surface_t	*surface,
				       double		*x_pixels_per_inch,
				       double		*y_pixels_per_inch);

__declspec(dllimport) void
cairo_surface_copy_page (cairo_surface_t *surface);

__declspec(dllimport) void
cairo_surface_show_page (cairo_surface_t *surface);

__declspec(dllimport) cairo_bool_t
cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);



__declspec(dllimport) cairo_surface_t *
cairo_image_surface_create (cairo_format_t	format,
			    int			width,
			    int			height);

__declspec(dllimport) int
cairo_format_stride_for_width (cairo_format_t	format,
			       int		width);

__declspec(dllimport) cairo_surface_t *
cairo_image_surface_create_for_data (unsigned char	       *data,
				     cairo_format_t		format,
				     int			width,
				     int			height,
				     int			stride);

__declspec(dllimport) unsigned char *
cairo_image_surface_get_data (cairo_surface_t *surface);

__declspec(dllimport) cairo_format_t
cairo_image_surface_get_format (cairo_surface_t *surface);

__declspec(dllimport) int
cairo_image_surface_get_width (cairo_surface_t *surface);

__declspec(dllimport) int
cairo_image_surface_get_height (cairo_surface_t *surface);

__declspec(dllimport) int
cairo_image_surface_get_stride (cairo_surface_t *surface);



__declspec(dllimport) cairo_surface_t *
cairo_image_surface_create_from_png (const char	*filename);

__declspec(dllimport) cairo_surface_t *
cairo_image_surface_create_from_png_stream (cairo_read_func_t	read_func,
					    void		*closure);

#line 2584 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"



__declspec(dllimport) cairo_surface_t *
cairo_recording_surface_create (cairo_content_t		 content,
                                const cairo_rectangle_t *extents);

__declspec(dllimport) void
cairo_recording_surface_ink_extents (cairo_surface_t *surface,
                                     double *x0,
                                     double *y0,
                                     double *width,
                                     double *height);

__declspec(dllimport) cairo_bool_t
cairo_recording_surface_get_extents (cairo_surface_t *surface,
				     cairo_rectangle_t *extents);



























typedef cairo_surface_t *
(*cairo_raster_source_acquire_func_t) (cairo_pattern_t *pattern,
				       void *callback_data,
				       cairo_surface_t *target,
				       const cairo_rectangle_int_t *extents);














typedef void
(*cairo_raster_source_release_func_t) (cairo_pattern_t *pattern,
				       void *callback_data,
				       cairo_surface_t *surface);

















typedef cairo_status_t
(*cairo_raster_source_snapshot_func_t) (cairo_pattern_t *pattern,
					void *callback_data);















typedef cairo_status_t
(*cairo_raster_source_copy_func_t) (cairo_pattern_t *pattern,
				    void *callback_data,
				    const cairo_pattern_t *other);











typedef void
(*cairo_raster_source_finish_func_t) (cairo_pattern_t *pattern,
				      void *callback_data);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_raster_source (void *user_data,
				    cairo_content_t content,
				    int width, int height);

__declspec(dllimport) void
cairo_raster_source_pattern_set_callback_data (cairo_pattern_t *pattern,
					       void *data);

__declspec(dllimport) void *
cairo_raster_source_pattern_get_callback_data (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_raster_source_pattern_set_acquire (cairo_pattern_t *pattern,
					 cairo_raster_source_acquire_func_t acquire,
					 cairo_raster_source_release_func_t release);

__declspec(dllimport) void
cairo_raster_source_pattern_get_acquire (cairo_pattern_t *pattern,
					 cairo_raster_source_acquire_func_t *acquire,
					 cairo_raster_source_release_func_t *release);
__declspec(dllimport) void
cairo_raster_source_pattern_set_snapshot (cairo_pattern_t *pattern,
					  cairo_raster_source_snapshot_func_t snapshot);

__declspec(dllimport) cairo_raster_source_snapshot_func_t
cairo_raster_source_pattern_get_snapshot (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_raster_source_pattern_set_copy (cairo_pattern_t *pattern,
				      cairo_raster_source_copy_func_t copy);

__declspec(dllimport) cairo_raster_source_copy_func_t
cairo_raster_source_pattern_get_copy (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_raster_source_pattern_set_finish (cairo_pattern_t *pattern,
					cairo_raster_source_finish_func_t finish);

__declspec(dllimport) cairo_raster_source_finish_func_t
cairo_raster_source_pattern_get_finish (cairo_pattern_t *pattern);



__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_rgb (double red, double green, double blue);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_rgba (double red, double green, double blue,
			   double alpha);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_for_surface (cairo_surface_t *surface);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_linear (double x0, double y0,
			     double x1, double y1);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_radial (double cx0, double cy0, double radius0,
			     double cx1, double cy1, double radius1);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_create_mesh (void);

__declspec(dllimport) cairo_pattern_t *
cairo_pattern_reference (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_pattern_destroy (cairo_pattern_t *pattern);

__declspec(dllimport) unsigned int
cairo_pattern_get_reference_count (cairo_pattern_t *pattern);

__declspec(dllimport) cairo_status_t
cairo_pattern_status (cairo_pattern_t *pattern);

__declspec(dllimport) void *
cairo_pattern_get_user_data (cairo_pattern_t		 *pattern,
			     const cairo_user_data_key_t *key);

__declspec(dllimport) cairo_status_t
cairo_pattern_set_user_data (cairo_pattern_t		 *pattern,
			     const cairo_user_data_key_t *key,
			     void			 *user_data,
			     cairo_destroy_func_t	  destroy);

































typedef enum _cairo_pattern_type {
    CAIRO_PATTERN_TYPE_SOLID,
    CAIRO_PATTERN_TYPE_SURFACE,
    CAIRO_PATTERN_TYPE_LINEAR,
    CAIRO_PATTERN_TYPE_RADIAL,
    CAIRO_PATTERN_TYPE_MESH,
    CAIRO_PATTERN_TYPE_RASTER_SOURCE
} cairo_pattern_type_t;

__declspec(dllimport) cairo_pattern_type_t
cairo_pattern_get_type (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_pattern_add_color_stop_rgb (cairo_pattern_t *pattern,
				  double offset,
				  double red, double green, double blue);

__declspec(dllimport) void
cairo_pattern_add_color_stop_rgba (cairo_pattern_t *pattern,
				   double offset,
				   double red, double green, double blue,
				   double alpha);

__declspec(dllimport) void
cairo_mesh_pattern_begin_patch (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_mesh_pattern_end_patch (cairo_pattern_t *pattern);

__declspec(dllimport) void
cairo_mesh_pattern_curve_to (cairo_pattern_t *pattern,
			     double x1, double y1,
			     double x2, double y2,
			     double x3, double y3);

__declspec(dllimport) void
cairo_mesh_pattern_line_to (cairo_pattern_t *pattern,
			    double x, double y);

__declspec(dllimport) void
cairo_mesh_pattern_move_to (cairo_pattern_t *pattern,
			    double x, double y);

__declspec(dllimport) void
cairo_mesh_pattern_set_control_point (cairo_pattern_t *pattern,
				      unsigned int point_num,
				      double x, double y);

__declspec(dllimport) void
cairo_mesh_pattern_set_corner_color_rgb (cairo_pattern_t *pattern,
					 unsigned int corner_num,
					 double red, double green, double blue);

__declspec(dllimport) void
cairo_mesh_pattern_set_corner_color_rgba (cairo_pattern_t *pattern,
					  unsigned int corner_num,
					  double red, double green, double blue,
					  double alpha);

__declspec(dllimport) void
cairo_pattern_set_matrix (cairo_pattern_t      *pattern,
			  const cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_pattern_get_matrix (cairo_pattern_t *pattern,
			  cairo_matrix_t  *matrix);


























typedef enum _cairo_extend {
    CAIRO_EXTEND_NONE,
    CAIRO_EXTEND_REPEAT,
    CAIRO_EXTEND_REFLECT,
    CAIRO_EXTEND_PAD
} cairo_extend_t;

__declspec(dllimport) void
cairo_pattern_set_extend (cairo_pattern_t *pattern, cairo_extend_t extend);

__declspec(dllimport) cairo_extend_t
cairo_pattern_get_extend (cairo_pattern_t *pattern);





















typedef enum _cairo_filter {
    CAIRO_FILTER_FAST,
    CAIRO_FILTER_GOOD,
    CAIRO_FILTER_BEST,
    CAIRO_FILTER_NEAREST,
    CAIRO_FILTER_BILINEAR,
    CAIRO_FILTER_GAUSSIAN
} cairo_filter_t;

__declspec(dllimport) void
cairo_pattern_set_filter (cairo_pattern_t *pattern, cairo_filter_t filter);

__declspec(dllimport) cairo_filter_t
cairo_pattern_get_filter (cairo_pattern_t *pattern);

__declspec(dllimport) cairo_status_t
cairo_pattern_get_rgba (cairo_pattern_t *pattern,
			double *red, double *green,
			double *blue, double *alpha);

__declspec(dllimport) cairo_status_t
cairo_pattern_get_surface (cairo_pattern_t *pattern,
			   cairo_surface_t **surface);


__declspec(dllimport) cairo_status_t
cairo_pattern_get_color_stop_rgba (cairo_pattern_t *pattern,
				   int index, double *offset,
				   double *red, double *green,
				   double *blue, double *alpha);

__declspec(dllimport) cairo_status_t
cairo_pattern_get_color_stop_count (cairo_pattern_t *pattern,
				    int *count);

__declspec(dllimport) cairo_status_t
cairo_pattern_get_linear_points (cairo_pattern_t *pattern,
				 double *x0, double *y0,
				 double *x1, double *y1);

__declspec(dllimport) cairo_status_t
cairo_pattern_get_radial_circles (cairo_pattern_t *pattern,
				  double *x0, double *y0, double *r0,
				  double *x1, double *y1, double *r1);

__declspec(dllimport) cairo_status_t
cairo_mesh_pattern_get_patch_count (cairo_pattern_t *pattern,
				    unsigned int *count);

__declspec(dllimport) cairo_path_t *
cairo_mesh_pattern_get_path (cairo_pattern_t *pattern,
			     unsigned int patch_num);

__declspec(dllimport) cairo_status_t
cairo_mesh_pattern_get_corner_color_rgba (cairo_pattern_t *pattern,
					  unsigned int patch_num,
					  unsigned int corner_num,
					  double *red, double *green,
					  double *blue, double *alpha);

__declspec(dllimport) cairo_status_t
cairo_mesh_pattern_get_control_point (cairo_pattern_t *pattern,
				      unsigned int patch_num,
				      unsigned int point_num,
				      double *x, double *y);



__declspec(dllimport) void
cairo_matrix_init (cairo_matrix_t *matrix,
		   double  xx, double  yx,
		   double  xy, double  yy,
		   double  x0, double  y0);

__declspec(dllimport) void
cairo_matrix_init_identity (cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_matrix_init_translate (cairo_matrix_t *matrix,
			     double tx, double ty);

__declspec(dllimport) void
cairo_matrix_init_scale (cairo_matrix_t *matrix,
			 double sx, double sy);

__declspec(dllimport) void
cairo_matrix_init_rotate (cairo_matrix_t *matrix,
			  double radians);

__declspec(dllimport) void
cairo_matrix_translate (cairo_matrix_t *matrix, double tx, double ty);

__declspec(dllimport) void
cairo_matrix_scale (cairo_matrix_t *matrix, double sx, double sy);

__declspec(dllimport) void
cairo_matrix_rotate (cairo_matrix_t *matrix, double radians);

__declspec(dllimport) cairo_status_t
cairo_matrix_invert (cairo_matrix_t *matrix);

__declspec(dllimport) void
cairo_matrix_multiply (cairo_matrix_t	    *result,
		       const cairo_matrix_t *a,
		       const cairo_matrix_t *b);

__declspec(dllimport) void
cairo_matrix_transform_distance (const cairo_matrix_t *matrix,
				 double *dx, double *dy);

__declspec(dllimport) void
cairo_matrix_transform_point (const cairo_matrix_t *matrix,
			      double *x, double *y);
















typedef struct _cairo_region cairo_region_t;












typedef enum _cairo_region_overlap {
    CAIRO_REGION_OVERLAP_IN,		
    CAIRO_REGION_OVERLAP_OUT,		
    CAIRO_REGION_OVERLAP_PART		
} cairo_region_overlap_t;

__declspec(dllimport) cairo_region_t *
cairo_region_create (void);

__declspec(dllimport) cairo_region_t *
cairo_region_create_rectangle (const cairo_rectangle_int_t *rectangle);

__declspec(dllimport) cairo_region_t *
cairo_region_create_rectangles (const cairo_rectangle_int_t *rects,
				int count);

__declspec(dllimport) cairo_region_t *
cairo_region_copy (const cairo_region_t *original);

__declspec(dllimport) cairo_region_t *
cairo_region_reference (cairo_region_t *region);

__declspec(dllimport) void
cairo_region_destroy (cairo_region_t *region);

__declspec(dllimport) cairo_bool_t
cairo_region_equal (const cairo_region_t *a, const cairo_region_t *b);

__declspec(dllimport) cairo_status_t
cairo_region_status (const cairo_region_t *region);

__declspec(dllimport) void
cairo_region_get_extents (const cairo_region_t        *region,
			  cairo_rectangle_int_t *extents);

__declspec(dllimport) int
cairo_region_num_rectangles (const cairo_region_t *region);

__declspec(dllimport) void
cairo_region_get_rectangle (const cairo_region_t  *region,
			    int                    nth,
			    cairo_rectangle_int_t *rectangle);

__declspec(dllimport) cairo_bool_t
cairo_region_is_empty (const cairo_region_t *region);

__declspec(dllimport) cairo_region_overlap_t
cairo_region_contains_rectangle (const cairo_region_t *region,
				 const cairo_rectangle_int_t *rectangle);

__declspec(dllimport) cairo_bool_t
cairo_region_contains_point (const cairo_region_t *region, int x, int y);

__declspec(dllimport) void
cairo_region_translate (cairo_region_t *region, int dx, int dy);

__declspec(dllimport) cairo_status_t
cairo_region_subtract (cairo_region_t *dst, const cairo_region_t *other);

__declspec(dllimport) cairo_status_t
cairo_region_subtract_rectangle (cairo_region_t *dst,
				 const cairo_rectangle_int_t *rectangle);

__declspec(dllimport) cairo_status_t
cairo_region_intersect (cairo_region_t *dst, const cairo_region_t *other);

__declspec(dllimport) cairo_status_t
cairo_region_intersect_rectangle (cairo_region_t *dst,
				  const cairo_rectangle_int_t *rectangle);

__declspec(dllimport) cairo_status_t
cairo_region_union (cairo_region_t *dst, const cairo_region_t *other);

__declspec(dllimport) cairo_status_t
cairo_region_union_rectangle (cairo_region_t *dst,
			      const cairo_rectangle_int_t *rectangle);

__declspec(dllimport) cairo_status_t
cairo_region_xor (cairo_region_t *dst, const cairo_region_t *other);

__declspec(dllimport) cairo_status_t
cairo_region_xor_rectangle (cairo_region_t *dst,
			    const cairo_rectangle_int_t *rectangle);


__declspec(dllimport) void
cairo_debug_reset_static_data (void);




#line 3183 "C:\\home\\test\\wrap_rsvg\\library/C/include\\cairo.h"
#line 34 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\rsvg-cairo.h"

 

gboolean    rsvg_handle_render_cairo     (RsvgHandle * handle, cairo_t * cr);
gboolean    rsvg_handle_render_cairo_sub (RsvgHandle * handle, cairo_t * cr, const char *id);



#line 43 "c:\\home\\test\\wrap_rsvg\\library\\c\\include\\librsvg\\rsvg-cairo.h"
#line 264 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"



#line 268 "C:\\home\\test\\wrap_rsvg\\library/C/include/librsvg/rsvg.h"
